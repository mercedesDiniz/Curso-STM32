
ADC_Simultaneo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000400c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004194  08004194  00005194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d4  080041d4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080041d4  080041d4  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041d4  080041d4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d4  080041d4  000051d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041d8  080041d8  000051d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080041dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  080041e8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080041e8  0000614c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2ff  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d73  00000000  00000000  0001133b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  000130b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000843  00000000  00000000  00013ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262bb  00000000  00000000  000143e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc70  00000000  00000000  0003a69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1fa9  00000000  00000000  0004630e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001382b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c94  00000000  00000000  001382fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0013af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800417c 	.word	0x0800417c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800417c 	.word	0x0800417c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb30 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f826 	bl	8000220 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001d4:	f000 f875 	bl	80002c2 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f998 	bl	800050c <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f000 f978 	bl	80004d0 <MX_DMA_Init>
  MX_ADC1_Init();
 80001e0:	f000 f89a 	bl	8000318 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001e4:	f000 f916 	bl	8000414 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, &datag, 1); // start na conversao simultanea
 80001e8:	2201      	movs	r2, #1
 80001ea:	4909      	ldr	r1, [pc, #36]	@ (8000210 <main+0x48>)
 80001ec:	4809      	ldr	r0, [pc, #36]	@ (8000214 <main+0x4c>)
 80001ee:	f001 fe79 	bl	8001ee4 <HAL_ADCEx_MultiModeStart_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  adc1 = datag & 0x0000FFFF;
 80001f2:	4b07      	ldr	r3, [pc, #28]	@ (8000210 <main+0x48>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	4a07      	ldr	r2, [pc, #28]	@ (8000218 <main+0x50>)
 80001fa:	6013      	str	r3, [r2, #0]
	  adc2 = datag >> 16;
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <main+0x48>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	0c1b      	lsrs	r3, r3, #16
 8000202:	4a06      	ldr	r2, [pc, #24]	@ (800021c <main+0x54>)
 8000204:	6013      	str	r3, [r2, #0]

	  HAL_Delay(100);
 8000206:	2064      	movs	r0, #100	@ 0x64
 8000208:	f000 fb8e 	bl	8000928 <HAL_Delay>
	  adc1 = datag & 0x0000FFFF;
 800020c:	bf00      	nop
 800020e:	e7f0      	b.n	80001f2 <main+0x2a>
 8000210:	20000028 	.word	0x20000028
 8000214:	20000034 	.word	0x20000034
 8000218:	2000002c 	.word	0x2000002c
 800021c:	20000030 	.word	0x20000030

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b096      	sub	sp, #88	@ 0x58
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0314 	add.w	r3, r7, #20
 800022a:	2244      	movs	r2, #68	@ 0x44
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f003 ff78 	bl	8004124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	463b      	mov	r3, r7
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000242:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000246:	f002 fc93 	bl	8002b70 <HAL_PWREx_ControlVoltageScaling>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000250:	f000 f980 	bl	8000554 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000254:	2302      	movs	r3, #2
 8000256:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800025c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025e:	2310      	movs	r3, #16
 8000260:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800026a:	2301      	movs	r3, #1
 800026c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800026e:	230a      	movs	r3, #10
 8000270:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000272:	2307      	movs	r3, #7
 8000274:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000276:	2302      	movs	r3, #2
 8000278:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800027a:	2302      	movs	r3, #2
 800027c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f107 0314 	add.w	r3, r7, #20
 8000282:	4618      	mov	r0, r3
 8000284:	f002 fcca 	bl	8002c1c <HAL_RCC_OscConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800028e:	f000 f961 	bl	8000554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	230f      	movs	r3, #15
 8000294:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000296:	2303      	movs	r3, #3
 8000298:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002a6:	463b      	mov	r3, r7
 80002a8:	2104      	movs	r1, #4
 80002aa:	4618      	mov	r0, r3
 80002ac:	f003 f892 	bl	80033d4 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002b6:	f000 f94d 	bl	8000554 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3758      	adds	r7, #88	@ 0x58
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b0a2      	sub	sp, #136	@ 0x88
 80002c6:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c8:	463b      	mov	r3, r7
 80002ca:	2288      	movs	r2, #136	@ 0x88
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f003 ff28 	bl	8004124 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80002d8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80002da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80002de:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80002e0:	2302      	movs	r3, #2
 80002e2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002e4:	2301      	movs	r3, #1
 80002e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80002e8:	2308      	movs	r3, #8
 80002ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002ec:	2307      	movs	r3, #7
 80002ee:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002f0:	2302      	movs	r3, #2
 80002f2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80002f4:	2302      	movs	r3, #2
 80002f6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80002f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80002fc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fe:	463b      	mov	r3, r7
 8000300:	4618      	mov	r0, r3
 8000302:	f003 fa53 	bl	80037ac <HAL_RCCEx_PeriphCLKConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800030c:	f000 f922 	bl	8000554 <Error_Handler>
  }
}
 8000310:	bf00      	nop
 8000312:	3788      	adds	r7, #136	@ 0x88
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08a      	sub	sp, #40	@ 0x28
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800031e:	f107 031c 	add.w	r3, r7, #28
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
 8000338:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800033a:	4b33      	ldr	r3, [pc, #204]	@ (8000408 <MX_ADC1_Init+0xf0>)
 800033c:	4a33      	ldr	r2, [pc, #204]	@ (800040c <MX_ADC1_Init+0xf4>)
 800033e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000340:	4b31      	ldr	r3, [pc, #196]	@ (8000408 <MX_ADC1_Init+0xf0>)
 8000342:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000346:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000348:	4b2f      	ldr	r3, [pc, #188]	@ (8000408 <MX_ADC1_Init+0xf0>)
 800034a:	2208      	movs	r2, #8
 800034c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034e:	4b2e      	ldr	r3, [pc, #184]	@ (8000408 <MX_ADC1_Init+0xf0>)
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000354:	4b2c      	ldr	r3, [pc, #176]	@ (8000408 <MX_ADC1_Init+0xf0>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800035a:	4b2b      	ldr	r3, [pc, #172]	@ (8000408 <MX_ADC1_Init+0xf0>)
 800035c:	2204      	movs	r2, #4
 800035e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000360:	4b29      	ldr	r3, [pc, #164]	@ (8000408 <MX_ADC1_Init+0xf0>)
 8000362:	2200      	movs	r2, #0
 8000364:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000366:	4b28      	ldr	r3, [pc, #160]	@ (8000408 <MX_ADC1_Init+0xf0>)
 8000368:	2201      	movs	r2, #1
 800036a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800036c:	4b26      	ldr	r3, [pc, #152]	@ (8000408 <MX_ADC1_Init+0xf0>)
 800036e:	2201      	movs	r2, #1
 8000370:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000372:	4b25      	ldr	r3, [pc, #148]	@ (8000408 <MX_ADC1_Init+0xf0>)
 8000374:	2200      	movs	r2, #0
 8000376:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800037a:	4b23      	ldr	r3, [pc, #140]	@ (8000408 <MX_ADC1_Init+0xf0>)
 800037c:	2200      	movs	r2, #0
 800037e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000380:	4b21      	ldr	r3, [pc, #132]	@ (8000408 <MX_ADC1_Init+0xf0>)
 8000382:	2200      	movs	r2, #0
 8000384:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000386:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <MX_ADC1_Init+0xf0>)
 8000388:	2201      	movs	r2, #1
 800038a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800038e:	4b1e      	ldr	r3, [pc, #120]	@ (8000408 <MX_ADC1_Init+0xf0>)
 8000390:	2200      	movs	r2, #0
 8000392:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000394:	4b1c      	ldr	r3, [pc, #112]	@ (8000408 <MX_ADC1_Init+0xf0>)
 8000396:	2200      	movs	r2, #0
 8000398:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800039c:	481a      	ldr	r0, [pc, #104]	@ (8000408 <MX_ADC1_Init+0xf0>)
 800039e:	f000 fcc9 	bl	8000d34 <HAL_ADC_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80003a8:	f000 f8d4 	bl	8000554 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80003ac:	2306      	movs	r3, #6
 80003ae:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 80003b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003b4:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_8CYCLES;
 80003b6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80003ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003bc:	f107 031c 	add.w	r3, r7, #28
 80003c0:	4619      	mov	r1, r3
 80003c2:	4811      	ldr	r0, [pc, #68]	@ (8000408 <MX_ADC1_Init+0xf0>)
 80003c4:	f001 fe62 	bl	800208c <HAL_ADCEx_MultiModeConfigChannel>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80003ce:	f000 f8c1 	bl	8000554 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <MX_ADC1_Init+0xf8>)
 80003d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d6:	2306      	movs	r3, #6
 80003d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80003da:	2307      	movs	r3, #7
 80003dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003de:	237f      	movs	r3, #127	@ 0x7f
 80003e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003e2:	2304      	movs	r3, #4
 80003e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	4806      	ldr	r0, [pc, #24]	@ (8000408 <MX_ADC1_Init+0xf0>)
 80003f0:	f001 f832 	bl	8001458 <HAL_ADC_ConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80003fa:	f000 f8ab 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	3728      	adds	r7, #40	@ 0x28
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000034 	.word	0x20000034
 800040c:	50040000 	.word	0x50040000
 8000410:	04300002 	.word	0x04300002

08000414 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800041a:	463b      	mov	r3, r7
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]
 8000424:	60da      	str	r2, [r3, #12]
 8000426:	611a      	str	r2, [r3, #16]
 8000428:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800042a:	4b26      	ldr	r3, [pc, #152]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 800042c:	4a26      	ldr	r2, [pc, #152]	@ (80004c8 <MX_ADC2_Init+0xb4>)
 800042e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000430:	4b24      	ldr	r3, [pc, #144]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 8000432:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000436:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8000438:	4b22      	ldr	r3, [pc, #136]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 800043a:	2208      	movs	r2, #8
 800043c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800043e:	4b21      	ldr	r3, [pc, #132]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000444:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800044a:	4b1e      	ldr	r3, [pc, #120]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 800044c:	2204      	movs	r2, #4
 800044e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000450:	4b1c      	ldr	r3, [pc, #112]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 8000452:	2200      	movs	r2, #0
 8000454:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000456:	4b1b      	ldr	r3, [pc, #108]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 8000458:	2201      	movs	r2, #1
 800045a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800045c:	4b19      	ldr	r3, [pc, #100]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 800045e:	2201      	movs	r2, #1
 8000460:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000462:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 8000464:	2200      	movs	r2, #0
 8000466:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800046a:	4b16      	ldr	r3, [pc, #88]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 800046c:	2200      	movs	r2, #0
 800046e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000472:	4b14      	ldr	r3, [pc, #80]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 8000474:	2200      	movs	r2, #0
 8000476:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000478:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 800047a:	2200      	movs	r2, #0
 800047c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000480:	4810      	ldr	r0, [pc, #64]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 8000482:	f000 fc57 	bl	8000d34 <HAL_ADC_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC2_Init+0x7c>
  {
    Error_Handler();
 800048c:	f000 f862 	bl	8000554 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000490:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <MX_ADC2_Init+0xb8>)
 8000492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000494:	2306      	movs	r3, #6
 8000496:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000498:	2307      	movs	r3, #7
 800049a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800049c:	237f      	movs	r3, #127	@ 0x7f
 800049e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004a0:	2304      	movs	r3, #4
 80004a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004a8:	463b      	mov	r3, r7
 80004aa:	4619      	mov	r1, r3
 80004ac:	4805      	ldr	r0, [pc, #20]	@ (80004c4 <MX_ADC2_Init+0xb0>)
 80004ae:	f000 ffd3 	bl	8001458 <HAL_ADC_ConfigChannel>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 80004b8:	f000 f84c 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004bc:	bf00      	nop
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000098 	.word	0x20000098
 80004c8:	50040100 	.word	0x50040100
 80004cc:	43210000 	.word	0x43210000

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <MX_DMA_Init+0x38>)
 80004d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004da:	4a0b      	ldr	r2, [pc, #44]	@ (8000508 <MX_DMA_Init+0x38>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80004e2:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <MX_DMA_Init+0x38>)
 80004e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	200b      	movs	r0, #11
 80004f4:	f001 ff55 	bl	80023a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004f8:	200b      	movs	r0, #11
 80004fa:	f001 ff6e 	bl	80023da <HAL_NVIC_EnableIRQ>

}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_GPIO_Init+0x44>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000516:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <MX_GPIO_Init+0x44>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800051e:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <MX_GPIO_Init+0x44>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_GPIO_Init+0x44>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	4a08      	ldr	r2, [pc, #32]	@ (8000550 <MX_GPIO_Init+0x44>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000536:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <MX_GPIO_Init+0x44>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <Error_Handler+0x8>

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <HAL_MspInit+0x44>)
 8000568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800056a:	4a0e      	ldr	r2, [pc, #56]	@ (80005a4 <HAL_MspInit+0x44>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6613      	str	r3, [r2, #96]	@ 0x60
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <HAL_MspInit+0x44>)
 8000574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <HAL_MspInit+0x44>)
 8000580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000582:	4a08      	ldr	r2, [pc, #32]	@ (80005a4 <HAL_MspInit+0x44>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000588:	6593      	str	r3, [r2, #88]	@ 0x58
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <HAL_MspInit+0x44>)
 800058c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800058e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	@ 0x30
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a50      	ldr	r2, [pc, #320]	@ (8000708 <HAL_ADC_MspInit+0x160>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d160      	bne.n	800068c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80005ca:	4b50      	ldr	r3, [pc, #320]	@ (800070c <HAL_ADC_MspInit+0x164>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	4a4e      	ldr	r2, [pc, #312]	@ (800070c <HAL_ADC_MspInit+0x164>)
 80005d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80005d4:	4b4d      	ldr	r3, [pc, #308]	@ (800070c <HAL_ADC_MspInit+0x164>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d10b      	bne.n	80005f4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80005dc:	4b4c      	ldr	r3, [pc, #304]	@ (8000710 <HAL_ADC_MspInit+0x168>)
 80005de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e0:	4a4b      	ldr	r2, [pc, #300]	@ (8000710 <HAL_ADC_MspInit+0x168>)
 80005e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e8:	4b49      	ldr	r3, [pc, #292]	@ (8000710 <HAL_ADC_MspInit+0x168>)
 80005ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005f0:	61bb      	str	r3, [r7, #24]
 80005f2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f4:	4b46      	ldr	r3, [pc, #280]	@ (8000710 <HAL_ADC_MspInit+0x168>)
 80005f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f8:	4a45      	ldr	r2, [pc, #276]	@ (8000710 <HAL_ADC_MspInit+0x168>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000600:	4b43      	ldr	r3, [pc, #268]	@ (8000710 <HAL_ADC_MspInit+0x168>)
 8000602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060c:	2301      	movs	r3, #1
 800060e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000610:	230b      	movs	r3, #11
 8000612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	483d      	ldr	r0, [pc, #244]	@ (8000714 <HAL_ADC_MspInit+0x16c>)
 8000620:	f002 f8ee 	bl	8002800 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000624:	4b3c      	ldr	r3, [pc, #240]	@ (8000718 <HAL_ADC_MspInit+0x170>)
 8000626:	4a3d      	ldr	r2, [pc, #244]	@ (800071c <HAL_ADC_MspInit+0x174>)
 8000628:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800062a:	4b3b      	ldr	r3, [pc, #236]	@ (8000718 <HAL_ADC_MspInit+0x170>)
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000630:	4b39      	ldr	r3, [pc, #228]	@ (8000718 <HAL_ADC_MspInit+0x170>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000636:	4b38      	ldr	r3, [pc, #224]	@ (8000718 <HAL_ADC_MspInit+0x170>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800063c:	4b36      	ldr	r3, [pc, #216]	@ (8000718 <HAL_ADC_MspInit+0x170>)
 800063e:	2280      	movs	r2, #128	@ 0x80
 8000640:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000642:	4b35      	ldr	r3, [pc, #212]	@ (8000718 <HAL_ADC_MspInit+0x170>)
 8000644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000648:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800064a:	4b33      	ldr	r3, [pc, #204]	@ (8000718 <HAL_ADC_MspInit+0x170>)
 800064c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000650:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000652:	4b31      	ldr	r3, [pc, #196]	@ (8000718 <HAL_ADC_MspInit+0x170>)
 8000654:	2220      	movs	r2, #32
 8000656:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000658:	4b2f      	ldr	r3, [pc, #188]	@ (8000718 <HAL_ADC_MspInit+0x170>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800065e:	482e      	ldr	r0, [pc, #184]	@ (8000718 <HAL_ADC_MspInit+0x170>)
 8000660:	f001 fed6 	bl	8002410 <HAL_DMA_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800066a:	f7ff ff73 	bl	8000554 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a29      	ldr	r2, [pc, #164]	@ (8000718 <HAL_ADC_MspInit+0x170>)
 8000672:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000674:	4a28      	ldr	r2, [pc, #160]	@ (8000718 <HAL_ADC_MspInit+0x170>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2012      	movs	r0, #18
 8000680:	f001 fe8f 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000684:	2012      	movs	r0, #18
 8000686:	f001 fea8 	bl	80023da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800068a:	e039      	b.n	8000700 <HAL_ADC_MspInit+0x158>
  else if(hadc->Instance==ADC2)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a23      	ldr	r2, [pc, #140]	@ (8000720 <HAL_ADC_MspInit+0x178>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d134      	bne.n	8000700 <HAL_ADC_MspInit+0x158>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000696:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <HAL_ADC_MspInit+0x164>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	4a1b      	ldr	r2, [pc, #108]	@ (800070c <HAL_ADC_MspInit+0x164>)
 800069e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80006a0:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <HAL_ADC_MspInit+0x164>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d10b      	bne.n	80006c0 <HAL_ADC_MspInit+0x118>
      __HAL_RCC_ADC_CLK_ENABLE();
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x168>)
 80006aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ac:	4a18      	ldr	r2, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x168>)
 80006ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x168>)
 80006b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <HAL_ADC_MspInit+0x168>)
 80006c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c4:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x168>)
 80006c6:	f043 0302 	orr.w	r3, r3, #2
 80006ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006cc:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <HAL_ADC_MspInit+0x168>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006d8:	2302      	movs	r3, #2
 80006da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006dc:	230b      	movs	r3, #11
 80006de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	480e      	ldr	r0, [pc, #56]	@ (8000724 <HAL_ADC_MspInit+0x17c>)
 80006ec:	f002 f888 	bl	8002800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	2012      	movs	r0, #18
 80006f6:	f001 fe54 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006fa:	2012      	movs	r0, #18
 80006fc:	f001 fe6d 	bl	80023da <HAL_NVIC_EnableIRQ>
}
 8000700:	bf00      	nop
 8000702:	3730      	adds	r7, #48	@ 0x30
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	50040000 	.word	0x50040000
 800070c:	20000144 	.word	0x20000144
 8000710:	40021000 	.word	0x40021000
 8000714:	48000800 	.word	0x48000800
 8000718:	200000fc 	.word	0x200000fc
 800071c:	40020008 	.word	0x40020008
 8000720:	50040100 	.word	0x50040100
 8000724:	48000400 	.word	0x48000400

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <NMI_Handler+0x4>

08000730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <MemManage_Handler+0x4>

08000740 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <UsageFault_Handler+0x4>

08000750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077e:	f000 f8b3 	bl	80008e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800078c:	4802      	ldr	r0, [pc, #8]	@ (8000798 <DMA1_Channel1_IRQHandler+0x10>)
 800078e:	f001 ff57 	bl	8002640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000fc 	.word	0x200000fc

0800079c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80007a0:	4803      	ldr	r0, [pc, #12]	@ (80007b0 <ADC1_2_IRQHandler+0x14>)
 80007a2:	f000 fc17 	bl	8000fd4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80007a6:	4803      	ldr	r0, [pc, #12]	@ (80007b4 <ADC1_2_IRQHandler+0x18>)
 80007a8:	f000 fc14 	bl	8000fd4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000034 	.word	0x20000034
 80007b4:	20000098 	.word	0x20000098

080007b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <SystemInit+0x20>)
 80007be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007c2:	4a05      	ldr	r2, [pc, #20]	@ (80007d8 <SystemInit+0x20>)
 80007c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000814 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e0:	f7ff ffea 	bl	80007b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480c      	ldr	r0, [pc, #48]	@ (8000818 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e6:	490d      	ldr	r1, [pc, #52]	@ (800081c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000820 <LoopForever+0xe>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000828 <LoopForever+0x16>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080a:	f003 fc93 	bl	8004134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800080e:	f7ff fcdb 	bl	80001c8 <main>

08000812 <LoopForever>:

LoopForever:
    b LoopForever
 8000812:	e7fe      	b.n	8000812 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000814:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000820:	080041dc 	.word	0x080041dc
  ldr r2, =_sbss
 8000824:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000828:	2000014c 	.word	0x2000014c

0800082c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC3_IRQHandler>
	...

08000830 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <HAL_Init+0x3c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <HAL_Init+0x3c>)
 8000840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000844:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000846:	2003      	movs	r0, #3
 8000848:	f001 fda0 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800084c:	2000      	movs	r0, #0
 800084e:	f000 f80f 	bl	8000870 <HAL_InitTick>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d002      	beq.n	800085e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	e001      	b.n	8000862 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800085e:	f7ff fe7f 	bl	8000560 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000862:	79fb      	ldrb	r3, [r7, #7]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000878:	2300      	movs	r3, #0
 800087a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <HAL_InitTick+0x6c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d023      	beq.n	80008cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <HAL_InitTick+0x70>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <HAL_InitTick+0x6c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	fbb3 f3f1 	udiv	r3, r3, r1
 8000896:	fbb2 f3f3 	udiv	r3, r2, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fdab 	bl	80023f6 <HAL_SYSTICK_Config>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d10f      	bne.n	80008c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d809      	bhi.n	80008c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f001 fd75 	bl	80023a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008b8:	4a0a      	ldr	r2, [pc, #40]	@ (80008e4 <HAL_InitTick+0x74>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
 80008be:	e007      	b.n	80008d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008c0:	2301      	movs	r3, #1
 80008c2:	73fb      	strb	r3, [r7, #15]
 80008c4:	e004      	b.n	80008d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	73fb      	strb	r3, [r7, #15]
 80008ca:	e001      	b.n	80008d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000004 	.word	0x20000004

080008e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <HAL_IncTick+0x20>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_IncTick+0x24>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_IncTick+0x24>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000008 	.word	0x20000008
 800090c:	20000148 	.word	0x20000148

08000910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b03      	ldr	r3, [pc, #12]	@ (8000924 <HAL_GetTick+0x14>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000148 	.word	0x20000148

08000928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000930:	f7ff ffee 	bl	8000910 <HAL_GetTick>
 8000934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000940:	d005      	beq.n	800094e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <HAL_Delay+0x44>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4413      	add	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800094e:	bf00      	nop
 8000950:	f7ff ffde 	bl	8000910 <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	429a      	cmp	r2, r3
 800095e:	d8f7      	bhi.n	8000950 <HAL_Delay+0x28>
  {
  }
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008

08000970 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	431a      	orrs	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	609a      	str	r2, [r3, #8]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	609a      	str	r2, [r3, #8]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80009d8:	b480      	push	{r7}
 80009da:	b087      	sub	sp, #28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3360      	adds	r3, #96	@ 0x60
 80009ea:	461a      	mov	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <LL_ADC_SetOffset+0x44>)
 80009fa:	4013      	ands	r3, r2
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	430a      	orrs	r2, r1
 8000a06:	4313      	orrs	r3, r2
 8000a08:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a10:	bf00      	nop
 8000a12:	371c      	adds	r7, #28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	03fff000 	.word	0x03fff000

08000a20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3360      	adds	r3, #96	@ 0x60
 8000a2e:	461a      	mov	r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3360      	adds	r3, #96	@ 0x60
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	431a      	orrs	r2, r3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000a76:	bf00      	nop
 8000a78:	371c      	adds	r7, #28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3330      	adds	r3, #48	@ 0x30
 8000ab8:	461a      	mov	r2, r3
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	f003 030c 	and.w	r3, r3, #12
 8000ac4:	4413      	add	r3, r2
 8000ac6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	f003 031f 	and.w	r3, r3, #31
 8000ad2:	211f      	movs	r1, #31
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	401a      	ands	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	0e9b      	lsrs	r3, r3, #26
 8000ae0:	f003 011f 	and.w	r1, r3, #31
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	f003 031f 	and.w	r3, r3, #31
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	431a      	orrs	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000af4:	bf00      	nop
 8000af6:	371c      	adds	r7, #28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000b14:	2301      	movs	r3, #1
 8000b16:	e000      	b.n	8000b1a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b087      	sub	sp, #28
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	3314      	adds	r3, #20
 8000b36:	461a      	mov	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	0e5b      	lsrs	r3, r3, #25
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	4413      	add	r3, r2
 8000b44:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	0d1b      	lsrs	r3, r3, #20
 8000b4e:	f003 031f 	and.w	r3, r3, #31
 8000b52:	2107      	movs	r1, #7
 8000b54:	fa01 f303 	lsl.w	r3, r1, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	0d1b      	lsrs	r3, r3, #20
 8000b60:	f003 031f 	and.w	r3, r3, #31
 8000b64:	6879      	ldr	r1, [r7, #4]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000b70:	bf00      	nop
 8000b72:	371c      	adds	r7, #28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b94:	43db      	mvns	r3, r3
 8000b96:	401a      	ands	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0318 	and.w	r3, r3, #24
 8000b9e:	4908      	ldr	r1, [pc, #32]	@ (8000bc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ba0:	40d9      	lsrs	r1, r3
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	400b      	ands	r3, r1
 8000ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000baa:	431a      	orrs	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	0007ffff 	.word	0x0007ffff

08000bc4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f003 031f 	and.w	r3, r3, #31
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000c0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	6093      	str	r3, [r2, #8]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c34:	d101      	bne.n	8000c3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e000      	b.n	8000c3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000c84:	d101      	bne.n	8000c8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ca8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000cac:	f043 0201 	orr.w	r2, r3, #1
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d101      	bne.n	8000cd8 <LL_ADC_IsEnabled+0x18>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e000      	b.n	8000cda <LL_ADC_IsEnabled+0x1a>
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d101      	bne.n	8000cfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	d101      	bne.n	8000d24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e130      	b.n	8000fb0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d109      	bne.n	8000d70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff fc23 	bl	80005a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff53 	bl	8000c20 <LL_ADC_IsDeepPowerDownEnabled>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d004      	beq.n	8000d8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff39 	bl	8000bfc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff6e 	bl	8000c70 <LL_ADC_IsInternalRegulatorEnabled>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d115      	bne.n	8000dc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff52 	bl	8000c48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000da4:	4b84      	ldr	r3, [pc, #528]	@ (8000fb8 <HAL_ADC_Init+0x284>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	099b      	lsrs	r3, r3, #6
 8000daa:	4a84      	ldr	r2, [pc, #528]	@ (8000fbc <HAL_ADC_Init+0x288>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	099b      	lsrs	r3, r3, #6
 8000db2:	3301      	adds	r3, #1
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000db8:	e002      	b.n	8000dc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f9      	bne.n	8000dba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff50 	bl	8000c70 <LL_ADC_IsInternalRegulatorEnabled>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10d      	bne.n	8000df2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dda:	f043 0210 	orr.w	r2, r3, #16
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de6:	f043 0201 	orr.w	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff75 	bl	8000ce6 <LL_ADC_REG_IsConversionOngoing>
 8000dfc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f040 80c9 	bne.w	8000f9e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 80c5 	bne.w	8000f9e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e18:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000e1c:	f043 0202 	orr.w	r2, r3, #2
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff49 	bl	8000cc0 <LL_ADC_IsEnabled>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d115      	bne.n	8000e60 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e34:	4862      	ldr	r0, [pc, #392]	@ (8000fc0 <HAL_ADC_Init+0x28c>)
 8000e36:	f7ff ff43 	bl	8000cc0 <LL_ADC_IsEnabled>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	4861      	ldr	r0, [pc, #388]	@ (8000fc4 <HAL_ADC_Init+0x290>)
 8000e3e:	f7ff ff3f 	bl	8000cc0 <LL_ADC_IsEnabled>
 8000e42:	4603      	mov	r3, r0
 8000e44:	431c      	orrs	r4, r3
 8000e46:	4860      	ldr	r0, [pc, #384]	@ (8000fc8 <HAL_ADC_Init+0x294>)
 8000e48:	f7ff ff3a 	bl	8000cc0 <LL_ADC_IsEnabled>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4323      	orrs	r3, r4
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d105      	bne.n	8000e60 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	485c      	ldr	r0, [pc, #368]	@ (8000fcc <HAL_ADC_Init+0x298>)
 8000e5c:	f7ff fd88 	bl	8000970 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7e5b      	ldrb	r3, [r3, #25]
 8000e64:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e6a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000e70:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000e76:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e7e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d106      	bne.n	8000e9c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e92:	3b01      	subs	r3, #1
 8000e94:	045b      	lsls	r3, r3, #17
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d009      	beq.n	8000eb8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	4b44      	ldr	r3, [pc, #272]	@ (8000fd0 <HAL_ADC_Init+0x29c>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	69b9      	ldr	r1, [r7, #24]
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff1b 	bl	8000d0c <LL_ADC_INJ_IsConversionOngoing>
 8000ed6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d13d      	bne.n	8000f5a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d13a      	bne.n	8000f5a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ee8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000ef0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f00:	f023 0302 	bic.w	r3, r3, #2
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	6812      	ldr	r2, [r2, #0]
 8000f08:	69b9      	ldr	r1, [r7, #24]
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d118      	bne.n	8000f4a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000f22:	f023 0304 	bic.w	r3, r3, #4
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000f2e:	4311      	orrs	r1, r2
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000f34:	4311      	orrs	r1, r2
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0201 	orr.w	r2, r2, #1
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	e007      	b.n	8000f5a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d10c      	bne.n	8000f7c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f68:	f023 010f 	bic.w	r1, r3, #15
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	1e5a      	subs	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f7a:	e007      	b.n	8000f8c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 020f 	bic.w	r2, r2, #15
 8000f8a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f90:	f023 0303 	bic.w	r3, r3, #3
 8000f94:	f043 0201 	orr.w	r2, r3, #1
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f9c:	e007      	b.n	8000fae <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa2:	f043 0210 	orr.w	r2, r3, #16
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fae:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3724      	adds	r7, #36	@ 0x24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	053e2d63 	.word	0x053e2d63
 8000fc0:	50040000 	.word	0x50040000
 8000fc4:	50040100 	.word	0x50040100
 8000fc8:	50040200 	.word	0x50040200
 8000fcc:	50040300 	.word	0x50040300
 8000fd0:	fff0c007 	.word	0xfff0c007

08000fd4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000ff0:	4882      	ldr	r0, [pc, #520]	@ (80011fc <HAL_ADC_IRQHandler+0x228>)
 8000ff2:	f7ff fde7 	bl	8000bc4 <LL_ADC_GetMultimode>
 8000ff6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d017      	beq.n	8001032 <HAL_ADC_IRQHandler+0x5e>
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d012      	beq.n	8001032 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	2b00      	cmp	r3, #0
 8001016:	d105      	bne.n	8001024 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800101c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f001 f827 	bl	8002078 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2202      	movs	r2, #2
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	d004      	beq.n	8001046 <HAL_ADC_IRQHandler+0x72>
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10a      	bne.n	800105c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 8083 	beq.w	8001158 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	2b00      	cmp	r3, #0
 800105a:	d07d      	beq.n	8001158 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800106c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fd02 	bl	8000a82 <LL_ADC_REG_IsTriggerSourceSWStart>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d062      	beq.n	800114a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a5d      	ldr	r2, [pc, #372]	@ (8001200 <HAL_ADC_IRQHandler+0x22c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d002      	beq.n	8001094 <HAL_ADC_IRQHandler+0xc0>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	e000      	b.n	8001096 <HAL_ADC_IRQHandler+0xc2>
 8001094:	4b5b      	ldr	r3, [pc, #364]	@ (8001204 <HAL_ADC_IRQHandler+0x230>)
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	6812      	ldr	r2, [r2, #0]
 800109a:	4293      	cmp	r3, r2
 800109c:	d008      	beq.n	80010b0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d002      	beq.n	80010b0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	d104      	bne.n	80010ba <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	623b      	str	r3, [r7, #32]
 80010b8:	e00c      	b.n	80010d4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a50      	ldr	r2, [pc, #320]	@ (8001200 <HAL_ADC_IRQHandler+0x22c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d002      	beq.n	80010ca <HAL_ADC_IRQHandler+0xf6>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	e000      	b.n	80010cc <HAL_ADC_IRQHandler+0xf8>
 80010ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001204 <HAL_ADC_IRQHandler+0x230>)
 80010cc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80010d4:	6a3b      	ldr	r3, [r7, #32]
 80010d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d135      	bne.n	800114a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d12e      	bne.n	800114a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fdf8 	bl	8000ce6 <LL_ADC_REG_IsConversionOngoing>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d11a      	bne.n	8001132 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 020c 	bic.w	r2, r2, #12
 800110a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001110:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800111c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d112      	bne.n	800114a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001130:	e00b      	b.n	800114a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001136:	f043 0210 	orr.w	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f95c 	bl	8001408 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	220c      	movs	r2, #12
 8001156:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	2b00      	cmp	r3, #0
 8001160:	d004      	beq.n	800116c <HAL_ADC_IRQHandler+0x198>
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10b      	bne.n	8001184 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 809f 	beq.w	80012b6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8099 	beq.w	80012b6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	2b00      	cmp	r3, #0
 800118e:	d105      	bne.n	800119c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001194:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fcad 	bl	8000b00 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80011a6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fc68 	bl	8000a82 <LL_ADC_REG_IsTriggerSourceSWStart>
 80011b2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <HAL_ADC_IRQHandler+0x22c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d002      	beq.n	80011c4 <HAL_ADC_IRQHandler+0x1f0>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	e000      	b.n	80011c6 <HAL_ADC_IRQHandler+0x1f2>
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <HAL_ADC_IRQHandler+0x230>)
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d008      	beq.n	80011e0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d002      	beq.n	80011e0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2b07      	cmp	r3, #7
 80011de:	d104      	bne.n	80011ea <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	e013      	b.n	8001212 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <HAL_ADC_IRQHandler+0x22c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d009      	beq.n	8001208 <HAL_ADC_IRQHandler+0x234>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	e007      	b.n	800120a <HAL_ADC_IRQHandler+0x236>
 80011fa:	bf00      	nop
 80011fc:	50040300 	.word	0x50040300
 8001200:	50040100 	.word	0x50040100
 8001204:	50040000 	.word	0x50040000
 8001208:	4b7d      	ldr	r3, [pc, #500]	@ (8001400 <HAL_ADC_IRQHandler+0x42c>)
 800120a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d047      	beq.n	80012a8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <HAL_ADC_IRQHandler+0x25e>
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d03f      	beq.n	80012a8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800122e:	2b00      	cmp	r3, #0
 8001230:	d13a      	bne.n	80012a8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123c:	2b40      	cmp	r3, #64	@ 0x40
 800123e:	d133      	bne.n	80012a8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d12e      	bne.n	80012a8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fd5c 	bl	8000d0c <LL_ADC_INJ_IsConversionOngoing>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d11a      	bne.n	8001290 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001268:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800126e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800127a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127e:	2b00      	cmp	r3, #0
 8001280:	d112      	bne.n	80012a8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001286:	f043 0201 	orr.w	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	655a      	str	r2, [r3, #84]	@ 0x54
 800128e:	e00b      	b.n	80012a8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001294:	f043 0210 	orr.w	r2, r3, #16
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a0:	f043 0201 	orr.w	r2, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 febd 	bl	8002028 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2260      	movs	r2, #96	@ 0x60
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d011      	beq.n	80012e4 <HAL_ADC_IRQHandler+0x310>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00c      	beq.n	80012e4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f8aa 	bl	8001430 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2280      	movs	r2, #128	@ 0x80
 80012e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d012      	beq.n	8001314 <HAL_ADC_IRQHandler+0x340>
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00d      	beq.n	8001314 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012fc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fea3 	bl	8002050 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001312:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800131a:	2b00      	cmp	r3, #0
 800131c:	d012      	beq.n	8001344 <HAL_ADC_IRQHandler+0x370>
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00d      	beq.n	8001344 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800132c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 fe95 	bl	8002064 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001342:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	2b00      	cmp	r3, #0
 800134c:	d036      	beq.n	80013bc <HAL_ADC_IRQHandler+0x3e8>
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	2b00      	cmp	r3, #0
 8001356:	d031      	beq.n	80013bc <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001360:	2301      	movs	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
 8001364:	e014      	b.n	8001390 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800136c:	4825      	ldr	r0, [pc, #148]	@ (8001404 <HAL_ADC_IRQHandler+0x430>)
 800136e:	f7ff fc37 	bl	8000be0 <LL_ADC_GetMultiDMATransfer>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00b      	beq.n	8001390 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001378:	2301      	movs	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
 800137c:	e008      	b.n	8001390 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800138c:	2301      	movs	r3, #1
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001392:	2b01      	cmp	r3, #1
 8001394:	d10e      	bne.n	80013b4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800139a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	f043 0202 	orr.w	r2, r3, #2
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f848 	bl	8001444 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2210      	movs	r2, #16
 80013ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d018      	beq.n	80013f8 <HAL_ADC_IRQHandler+0x424>
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e0:	f043 0208 	orr.w	r2, r3, #8
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013f0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fe22 	bl	800203c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	@ 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	50040000 	.word	0x50040000
 8001404:	50040300 	.word	0x50040300

08001408 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0b6      	sub	sp, #216	@ 0xd8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_ADC_ConfigChannel+0x22>
 8001476:	2302      	movs	r3, #2
 8001478:	e3c9      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x7b6>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fc2d 	bl	8000ce6 <LL_ADC_REG_IsConversionOngoing>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	f040 83aa 	bne.w	8001be8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b05      	cmp	r3, #5
 80014a2:	d824      	bhi.n	80014ee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	3b02      	subs	r3, #2
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d81b      	bhi.n	80014e6 <HAL_ADC_ConfigChannel+0x8e>
 80014ae:	a201      	add	r2, pc, #4	@ (adr r2, 80014b4 <HAL_ADC_ConfigChannel+0x5c>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	080014cd 	.word	0x080014cd
 80014bc:	080014d5 	.word	0x080014d5
 80014c0:	080014dd 	.word	0x080014dd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80014c4:	230c      	movs	r3, #12
 80014c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80014ca:	e010      	b.n	80014ee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80014cc:	2312      	movs	r3, #18
 80014ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80014d2:	e00c      	b.n	80014ee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80014d4:	2318      	movs	r3, #24
 80014d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80014da:	e008      	b.n	80014ee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80014dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80014e4:	e003      	b.n	80014ee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80014e6:	2306      	movs	r3, #6
 80014e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80014ec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80014fc:	f7ff fad4 	bl	8000aa8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fbee 	bl	8000ce6 <LL_ADC_REG_IsConversionOngoing>
 800150a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fbfa 	bl	8000d0c <LL_ADC_INJ_IsConversionOngoing>
 8001518:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800151c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001520:	2b00      	cmp	r3, #0
 8001522:	f040 81a4 	bne.w	800186e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800152a:	2b00      	cmp	r3, #0
 800152c:	f040 819f 	bne.w	800186e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6819      	ldr	r1, [r3, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	461a      	mov	r2, r3
 800153e:	f7ff faf2 	bl	8000b26 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	08db      	lsrs	r3, r3, #3
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	2b04      	cmp	r3, #4
 8001562:	d00a      	beq.n	800157a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	6919      	ldr	r1, [r3, #16]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001574:	f7ff fa30 	bl	80009d8 <LL_ADC_SetOffset>
 8001578:	e179      	b.n	800186e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fa4d 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10a      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x14e>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fa42 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	0e9b      	lsrs	r3, r3, #26
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	e01e      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x18c>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fa37 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80015c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80015d4:	2320      	movs	r3, #32
 80015d6:	e004      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80015d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80015dc:	fab3 f383 	clz	r3, r3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d105      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1a4>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0e9b      	lsrs	r3, r3, #26
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	e018      	b.n	800162e <HAL_ADC_ConfigChannel+0x1d6>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001610:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001618:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001620:	2320      	movs	r3, #32
 8001622:	e004      	b.n	800162e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001624:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800162e:	429a      	cmp	r2, r3
 8001630:	d106      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fa06 	bl	8000a4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f9ea 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10a      	bne.n	800166c <HAL_ADC_ConfigChannel+0x214>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2101      	movs	r1, #1
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f9df 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	0e9b      	lsrs	r3, r3, #26
 8001666:	f003 021f 	and.w	r2, r3, #31
 800166a:	e01e      	b.n	80016aa <HAL_ADC_ConfigChannel+0x252>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2101      	movs	r1, #1
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff f9d4 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800168a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800168e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800169a:	2320      	movs	r3, #32
 800169c:	e004      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800169e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d105      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x26a>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	0e9b      	lsrs	r3, r3, #26
 80016bc:	f003 031f 	and.w	r3, r3, #31
 80016c0:	e018      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x29c>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80016d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80016de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80016e6:	2320      	movs	r3, #32
 80016e8:	e004      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80016ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d106      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	2101      	movs	r1, #1
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff f9a3 	bl	8000a4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2102      	movs	r1, #2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff f987 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10a      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x2da>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2102      	movs	r1, #2
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff f97c 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	0e9b      	lsrs	r3, r3, #26
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	e01e      	b.n	8001770 <HAL_ADC_ConfigChannel+0x318>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2102      	movs	r1, #2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff f971 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001750:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001754:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001760:	2320      	movs	r3, #32
 8001762:	e004      	b.n	800176e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x330>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0e9b      	lsrs	r3, r3, #26
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	e014      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x35a>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001790:	fa93 f3a3 	rbit	r3, r3
 8001794:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001796:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001798:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800179c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80017a4:	2320      	movs	r3, #32
 80017a6:	e004      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80017a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d106      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	2102      	movs	r1, #2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f944 	bl	8000a4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2103      	movs	r1, #3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f928 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10a      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x398>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2103      	movs	r1, #3
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff f91d 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	0e9b      	lsrs	r3, r3, #26
 80017ea:	f003 021f 	and.w	r2, r3, #31
 80017ee:	e017      	b.n	8001820 <HAL_ADC_ConfigChannel+0x3c8>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2103      	movs	r1, #3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff f912 	bl	8000a20 <LL_ADC_GetOffsetChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800180a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800180c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001812:	2320      	movs	r3, #32
 8001814:	e003      	b.n	800181e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x3e0>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	0e9b      	lsrs	r3, r3, #26
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	e011      	b.n	800185c <HAL_ADC_ConfigChannel+0x404>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001840:	fa93 f3a3 	rbit	r3, r3
 8001844:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001848:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800184a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001850:	2320      	movs	r3, #32
 8001852:	e003      	b.n	800185c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001854:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800185c:	429a      	cmp	r2, r3
 800185e:	d106      	bne.n	800186e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2200      	movs	r2, #0
 8001866:	2103      	movs	r1, #3
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff f8ef 	bl	8000a4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fa24 	bl	8000cc0 <LL_ADC_IsEnabled>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	f040 8140 	bne.w	8001b00 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	461a      	mov	r2, r3
 800188e:	f7ff f975 	bl	8000b7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	4a8f      	ldr	r2, [pc, #572]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x67c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	f040 8131 	bne.w	8001b00 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10b      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x46e>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0e9b      	lsrs	r3, r3, #26
 80018b4:	3301      	adds	r3, #1
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	2b09      	cmp	r3, #9
 80018bc:	bf94      	ite	ls
 80018be:	2301      	movls	r3, #1
 80018c0:	2300      	movhi	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	e019      	b.n	80018fa <HAL_ADC_ConfigChannel+0x4a2>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80018d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80018d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80018de:	2320      	movs	r3, #32
 80018e0:	e003      	b.n	80018ea <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80018e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	2b09      	cmp	r3, #9
 80018f2:	bf94      	ite	ls
 80018f4:	2301      	movls	r3, #1
 80018f6:	2300      	movhi	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d079      	beq.n	80019f2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001906:	2b00      	cmp	r3, #0
 8001908:	d107      	bne.n	800191a <HAL_ADC_ConfigChannel+0x4c2>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	0e9b      	lsrs	r3, r3, #26
 8001910:	3301      	adds	r3, #1
 8001912:	069b      	lsls	r3, r3, #26
 8001914:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001918:	e015      	b.n	8001946 <HAL_ADC_ConfigChannel+0x4ee>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001922:	fa93 f3a3 	rbit	r3, r3
 8001926:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800192a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800192c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001932:	2320      	movs	r3, #32
 8001934:	e003      	b.n	800193e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	3301      	adds	r3, #1
 8001940:	069b      	lsls	r3, r3, #26
 8001942:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x50e>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0e9b      	lsrs	r3, r3, #26
 8001958:	3301      	adds	r3, #1
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	e017      	b.n	8001996 <HAL_ADC_ConfigChannel+0x53e>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001976:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800197e:	2320      	movs	r3, #32
 8001980:	e003      	b.n	800198a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	3301      	adds	r3, #1
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	ea42 0103 	orr.w	r1, r2, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10a      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x564>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0e9b      	lsrs	r3, r3, #26
 80019ac:	3301      	adds	r3, #1
 80019ae:	f003 021f 	and.w	r2, r3, #31
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	051b      	lsls	r3, r3, #20
 80019ba:	e018      	b.n	80019ee <HAL_ADC_ConfigChannel+0x596>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80019ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80019ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80019d4:	2320      	movs	r3, #32
 80019d6:	e003      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80019d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	3301      	adds	r3, #1
 80019e2:	f003 021f 	and.w	r2, r3, #31
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019ee:	430b      	orrs	r3, r1
 80019f0:	e081      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d107      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x5b6>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0e9b      	lsrs	r3, r3, #26
 8001a04:	3301      	adds	r3, #1
 8001a06:	069b      	lsls	r3, r3, #26
 8001a08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a0c:	e015      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x5e2>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001a26:	2320      	movs	r3, #32
 8001a28:	e003      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	069b      	lsls	r3, r3, #26
 8001a36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x602>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0e9b      	lsrs	r3, r3, #26
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	2101      	movs	r1, #1
 8001a54:	fa01 f303 	lsl.w	r3, r1, r3
 8001a58:	e017      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x632>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	fa93 f3a3 	rbit	r3, r3
 8001a66:	61bb      	str	r3, [r7, #24]
  return result;
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001a72:	2320      	movs	r3, #32
 8001a74:	e003      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	ea42 0103 	orr.w	r1, r2, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x65e>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	0e9b      	lsrs	r3, r3, #26
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	f003 021f 	and.w	r2, r3, #31
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	3b1e      	subs	r3, #30
 8001aae:	051b      	lsls	r3, r3, #20
 8001ab0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ab4:	e01e      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x69c>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	60fb      	str	r3, [r7, #12]
  return result;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d104      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	e006      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x688>
 8001ad2:	bf00      	nop
 8001ad4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f003 021f 	and.w	r2, r3, #31
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	3b1e      	subs	r3, #30
 8001aee:	051b      	lsls	r3, r3, #20
 8001af0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001af4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f813 	bl	8000b26 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b44      	ldr	r3, [pc, #272]	@ (8001c18 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d07a      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b0c:	4843      	ldr	r0, [pc, #268]	@ (8001c1c <HAL_ADC_ConfigChannel+0x7c4>)
 8001b0e:	f7fe ff55 	bl	80009bc <LL_ADC_GetCommonPathInternalCh>
 8001b12:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a41      	ldr	r2, [pc, #260]	@ (8001c20 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d12c      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d126      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a3c      	ldr	r2, [pc, #240]	@ (8001c24 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_ADC_ConfigChannel+0x6e8>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c28 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d15d      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4834      	ldr	r0, [pc, #208]	@ (8001c1c <HAL_ADC_ConfigChannel+0x7c4>)
 8001b4c:	f7fe ff23 	bl	8000996 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b50:	4b36      	ldr	r3, [pc, #216]	@ (8001c2c <HAL_ADC_ConfigChannel+0x7d4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	099b      	lsrs	r3, r3, #6
 8001b56:	4a36      	ldr	r2, [pc, #216]	@ (8001c30 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b6a:	e002      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f9      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b78:	e040      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c34 <HAL_ADC_ConfigChannel+0x7dc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d118      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d112      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a23      	ldr	r2, [pc, #140]	@ (8001c24 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d004      	beq.n	8001ba4 <HAL_ADC_ConfigChannel+0x74c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a22      	ldr	r2, [pc, #136]	@ (8001c28 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d12d      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ba4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ba8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bac:	4619      	mov	r1, r3
 8001bae:	481b      	ldr	r0, [pc, #108]	@ (8001c1c <HAL_ADC_ConfigChannel+0x7c4>)
 8001bb0:	f7fe fef1 	bl	8000996 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bb4:	e024      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1f      	ldr	r2, [pc, #124]	@ (8001c38 <HAL_ADC_ConfigChannel+0x7e0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d120      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d11a      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a14      	ldr	r2, [pc, #80]	@ (8001c24 <HAL_ADC_ConfigChannel+0x7cc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d115      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bde:	4619      	mov	r1, r3
 8001be0:	480e      	ldr	r0, [pc, #56]	@ (8001c1c <HAL_ADC_ConfigChannel+0x7c4>)
 8001be2:	f7fe fed8 	bl	8000996 <LL_ADC_SetCommonPathInternalCh>
 8001be6:	e00c      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bec:	f043 0220 	orr.w	r2, r3, #32
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001bfa:	e002      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bfc:	bf00      	nop
 8001bfe:	e000      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	37d8      	adds	r7, #216	@ 0xd8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	80080000 	.word	0x80080000
 8001c1c:	50040300 	.word	0x50040300
 8001c20:	c7520000 	.word	0xc7520000
 8001c24:	50040000 	.word	0x50040000
 8001c28:	50040200 	.word	0x50040200
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	053e2d63 	.word	0x053e2d63
 8001c34:	cb840000 	.word	0xcb840000
 8001c38:	80000001 	.word	0x80000001

08001c3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f837 	bl	8000cc0 <LL_ADC_IsEnabled>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d169      	bne.n	8001d2c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	4b36      	ldr	r3, [pc, #216]	@ (8001d38 <ADC_Enable+0xfc>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00d      	beq.n	8001c82 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c6a:	f043 0210 	orr.w	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c76:	f043 0201 	orr.w	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e055      	b.n	8001d2e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f806 	bl	8000c98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c8c:	482b      	ldr	r0, [pc, #172]	@ (8001d3c <ADC_Enable+0x100>)
 8001c8e:	f7fe fe95 	bl	80009bc <LL_ADC_GetCommonPathInternalCh>
 8001c92:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c9c:	4b28      	ldr	r3, [pc, #160]	@ (8001d40 <ADC_Enable+0x104>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	099b      	lsrs	r3, r3, #6
 8001ca2:	4a28      	ldr	r2, [pc, #160]	@ (8001d44 <ADC_Enable+0x108>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cb6:	e002      	b.n	8001cbe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f9      	bne.n	8001cb8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001cc4:	f7fe fe24 	bl	8000910 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cca:	e028      	b.n	8001d1e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fff5 	bl	8000cc0 <LL_ADC_IsEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d104      	bne.n	8001ce6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe ffd9 	bl	8000c98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ce6:	f7fe fe13 	bl	8000910 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d914      	bls.n	8001d1e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d00d      	beq.n	8001d1e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d06:	f043 0210 	orr.w	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e007      	b.n	8001d2e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d1cf      	bne.n	8001ccc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	8000003f 	.word	0x8000003f
 8001d3c:	50040300 	.word	0x50040300
 8001d40:	20000000 	.word	0x20000000
 8001d44:	053e2d63 	.word	0x053e2d63

08001d48 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d14b      	bne.n	8001dfa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d021      	beq.n	8001dc0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fe7e 	bl	8000a82 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d032      	beq.n	8001df2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d12b      	bne.n	8001df2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001daa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11f      	bne.n	8001df2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dbe:	e018      	b.n	8001df2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d111      	bne.n	8001df2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f7ff fb08 	bl	8001408 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001df8:	e00e      	b.n	8001e18 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f7ff fb1c 	bl	8001444 <HAL_ADC_ErrorCallback>
}
 8001e0c:	e004      	b.n	8001e18 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff faf4 	bl	800141c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	f043 0204 	orr.w	r2, r3, #4
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f7ff faee 	bl	8001444 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <LL_ADC_IsEnabled>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <LL_ADC_IsEnabled+0x18>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <LL_ADC_IsEnabled+0x1a>
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_ADC_REG_StartConversion>:
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ea6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eaa:	f043 0204 	orr.w	r2, r3, #4
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_ADC_REG_IsConversionOngoing>:
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d101      	bne.n	8001ed6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0a0      	sub	sp, #128	@ 0x80
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ffe2 	bl	8001ebe <LL_ADC_REG_IsConversionOngoing>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8001f00:	2302      	movs	r3, #2
 8001f02:	e080      	b.n	8002006 <HAL_ADCEx_MultiModeStart_DMA+0x122>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e079      	b.n	8002006 <HAL_ADCEx_MultiModeStart_DMA+0x122>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a3a      	ldr	r2, [pc, #232]	@ (8002010 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d102      	bne.n	8001f32 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8001f2c:	4b39      	ldr	r3, [pc, #228]	@ (8002014 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	e001      	b.n	8001f36 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]

    if (tmp_hadc_slave.Instance == NULL)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f40:	f043 0220 	orr.w	r2, r3, #32
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e058      	b.n	8002006 <HAL_ADCEx_MultiModeStart_DMA+0x122>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f7ff fe71 	bl	8001c3c <ADC_Enable>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (tmp_hal_status == HAL_OK)
 8001f60:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmp_hadc_slave);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fe65 	bl	8001c3c <ADC_Enable>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8001f78:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d13c      	bne.n	8001ffa <HAL_ADCEx_MultiModeStart_DMA+0x116>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	655a      	str	r2, [r3, #84]	@ 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002018 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 8001fa0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800201c <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 8001fa8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	4a1c      	ldr	r2, [pc, #112]	@ (8002020 <HAL_ADCEx_MultiModeStart_DMA+0x13c>)
 8001fb0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8001fb4:	67bb      	str	r3, [r7, #120]	@ 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	221c      	movs	r2, #28
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0210 	orr.w	r2, r2, #16
 8001fd4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001fda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fdc:	330c      	adds	r3, #12
 8001fde:	4619      	mov	r1, r3
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f000 facc 	bl	8002580 <HAL_DMA_Start_IT>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff4f 	bl	8001e96 <LL_ADC_REG_StartConversion>
 8001ff8:	e003      	b.n	8002002 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8002002:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	3780      	adds	r7, #128	@ 0x80
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	50040000 	.word	0x50040000
 8002014:	50040100 	.word	0x50040100
 8002018:	08001d49 	.word	0x08001d49
 800201c:	08001e21 	.word	0x08001e21
 8002020:	08001e3d 	.word	0x08001e3d
 8002024:	50040300 	.word	0x50040300

08002028 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b09f      	sub	sp, #124	@ 0x7c
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e093      	b.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80020b2:	2300      	movs	r3, #0
 80020b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80020b6:	2300      	movs	r3, #0
 80020b8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a47      	ldr	r2, [pc, #284]	@ (80021dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d102      	bne.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020c4:	4b46      	ldr	r3, [pc, #280]	@ (80021e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	e001      	b.n	80020ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10b      	bne.n	80020ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d8:	f043 0220 	orr.w	r2, r3, #32
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e072      	b.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fee5 	bl	8001ebe <LL_ADC_REG_IsConversionOngoing>
 80020f4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fedf 	bl	8001ebe <LL_ADC_REG_IsConversionOngoing>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d154      	bne.n	80021b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002106:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002108:	2b00      	cmp	r3, #0
 800210a:	d151      	bne.n	80021b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800210c:	4b35      	ldr	r3, [pc, #212]	@ (80021e4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800210e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d02c      	beq.n	8002172 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800212a:	035b      	lsls	r3, r3, #13
 800212c:	430b      	orrs	r3, r1
 800212e:	431a      	orrs	r2, r3
 8002130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002132:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002134:	4829      	ldr	r0, [pc, #164]	@ (80021dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002136:	f7ff fe9b 	bl	8001e70 <LL_ADC_IsEnabled>
 800213a:	4604      	mov	r4, r0
 800213c:	4828      	ldr	r0, [pc, #160]	@ (80021e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800213e:	f7ff fe97 	bl	8001e70 <LL_ADC_IsEnabled>
 8002142:	4603      	mov	r3, r0
 8002144:	431c      	orrs	r4, r3
 8002146:	4828      	ldr	r0, [pc, #160]	@ (80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002148:	f7ff fe92 	bl	8001e70 <LL_ADC_IsEnabled>
 800214c:	4603      	mov	r3, r0
 800214e:	4323      	orrs	r3, r4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d137      	bne.n	80021c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800215c:	f023 030f 	bic.w	r3, r3, #15
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	6811      	ldr	r1, [r2, #0]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	6892      	ldr	r2, [r2, #8]
 8002168:	430a      	orrs	r2, r1
 800216a:	431a      	orrs	r2, r3
 800216c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800216e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002170:	e028      	b.n	80021c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800217a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800217c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800217e:	4817      	ldr	r0, [pc, #92]	@ (80021dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002180:	f7ff fe76 	bl	8001e70 <LL_ADC_IsEnabled>
 8002184:	4604      	mov	r4, r0
 8002186:	4816      	ldr	r0, [pc, #88]	@ (80021e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002188:	f7ff fe72 	bl	8001e70 <LL_ADC_IsEnabled>
 800218c:	4603      	mov	r3, r0
 800218e:	431c      	orrs	r4, r3
 8002190:	4815      	ldr	r0, [pc, #84]	@ (80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002192:	f7ff fe6d 	bl	8001e70 <LL_ADC_IsEnabled>
 8002196:	4603      	mov	r3, r0
 8002198:	4323      	orrs	r3, r4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d112      	bne.n	80021c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800219e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021a6:	f023 030f 	bic.w	r3, r3, #15
 80021aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80021ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021ae:	e009      	b.n	80021c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b4:	f043 0220 	orr.w	r2, r3, #32
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80021c2:	e000      	b.n	80021c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80021ce:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	377c      	adds	r7, #124	@ 0x7c
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}
 80021da:	bf00      	nop
 80021dc:	50040000 	.word	0x50040000
 80021e0:	50040100 	.word	0x50040100
 80021e4:	50040300 	.word	0x50040300
 80021e8:	50040200 	.word	0x50040200

080021ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002208:	4013      	ands	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800221c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221e:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	60d3      	str	r3, [r2, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002238:	4b04      	ldr	r3, [pc, #16]	@ (800224c <__NVIC_GetPriorityGrouping+0x18>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	f003 0307 	and.w	r3, r3, #7
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	db0b      	blt.n	800227a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	4907      	ldr	r1, [pc, #28]	@ (8002288 <__NVIC_EnableIRQ+0x38>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2001      	movs	r0, #1
 8002272:	fa00 f202 	lsl.w	r2, r0, r2
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000e100 	.word	0xe000e100

0800228c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	db0a      	blt.n	80022b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	490c      	ldr	r1, [pc, #48]	@ (80022d8 <__NVIC_SetPriority+0x4c>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	0112      	lsls	r2, r2, #4
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	440b      	add	r3, r1
 80022b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b4:	e00a      	b.n	80022cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4908      	ldr	r1, [pc, #32]	@ (80022dc <__NVIC_SetPriority+0x50>)
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	3b04      	subs	r3, #4
 80022c4:	0112      	lsls	r2, r2, #4
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	440b      	add	r3, r1
 80022ca:	761a      	strb	r2, [r3, #24]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000e100 	.word	0xe000e100
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	@ 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f1c3 0307 	rsb	r3, r3, #7
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	bf28      	it	cs
 80022fe:	2304      	movcs	r3, #4
 8002300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3304      	adds	r3, #4
 8002306:	2b06      	cmp	r3, #6
 8002308:	d902      	bls.n	8002310 <NVIC_EncodePriority+0x30>
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3b03      	subs	r3, #3
 800230e:	e000      	b.n	8002312 <NVIC_EncodePriority+0x32>
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	f04f 32ff 	mov.w	r2, #4294967295
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	401a      	ands	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002328:	f04f 31ff 	mov.w	r1, #4294967295
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	43d9      	mvns	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	4313      	orrs	r3, r2
         );
}
 800233a:	4618      	mov	r0, r3
 800233c:	3724      	adds	r7, #36	@ 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f7ff ff8e 	bl	800228c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff29 	bl	80021ec <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff3e 	bl	8002234 <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff8e 	bl	80022e0 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5d 	bl	800228c <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff31 	bl	8002250 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa2 	bl	8002348 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e098      	b.n	8002554 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	4b4d      	ldr	r3, [pc, #308]	@ (8002560 <HAL_DMA_Init+0x150>)
 800242a:	429a      	cmp	r2, r3
 800242c:	d80f      	bhi.n	800244e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	4b4b      	ldr	r3, [pc, #300]	@ (8002564 <HAL_DMA_Init+0x154>)
 8002436:	4413      	add	r3, r2
 8002438:	4a4b      	ldr	r2, [pc, #300]	@ (8002568 <HAL_DMA_Init+0x158>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	009a      	lsls	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a48      	ldr	r2, [pc, #288]	@ (800256c <HAL_DMA_Init+0x15c>)
 800244a:	641a      	str	r2, [r3, #64]	@ 0x40
 800244c:	e00e      	b.n	800246c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	4b46      	ldr	r3, [pc, #280]	@ (8002570 <HAL_DMA_Init+0x160>)
 8002456:	4413      	add	r3, r2
 8002458:	4a43      	ldr	r2, [pc, #268]	@ (8002568 <HAL_DMA_Init+0x158>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	009a      	lsls	r2, r3, #2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a42      	ldr	r2, [pc, #264]	@ (8002574 <HAL_DMA_Init+0x164>)
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002486:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024c6:	d039      	beq.n	800253c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	4a27      	ldr	r2, [pc, #156]	@ (800256c <HAL_DMA_Init+0x15c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d11a      	bne.n	8002508 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024d2:	4b29      	ldr	r3, [pc, #164]	@ (8002578 <HAL_DMA_Init+0x168>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024da:	f003 031c 	and.w	r3, r3, #28
 80024de:	210f      	movs	r1, #15
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	4924      	ldr	r1, [pc, #144]	@ (8002578 <HAL_DMA_Init+0x168>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024ec:	4b22      	ldr	r3, [pc, #136]	@ (8002578 <HAL_DMA_Init+0x168>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f8:	f003 031c 	and.w	r3, r3, #28
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	491d      	ldr	r1, [pc, #116]	@ (8002578 <HAL_DMA_Init+0x168>)
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
 8002506:	e019      	b.n	800253c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002508:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <HAL_DMA_Init+0x16c>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	f003 031c 	and.w	r3, r3, #28
 8002514:	210f      	movs	r1, #15
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	4917      	ldr	r1, [pc, #92]	@ (800257c <HAL_DMA_Init+0x16c>)
 800251e:	4013      	ands	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002522:	4b16      	ldr	r3, [pc, #88]	@ (800257c <HAL_DMA_Init+0x16c>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f003 031c 	and.w	r3, r3, #28
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	4911      	ldr	r1, [pc, #68]	@ (800257c <HAL_DMA_Init+0x16c>)
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40020407 	.word	0x40020407
 8002564:	bffdfff8 	.word	0xbffdfff8
 8002568:	cccccccd 	.word	0xcccccccd
 800256c:	40020000 	.word	0x40020000
 8002570:	bffdfbf8 	.word	0xbffdfbf8
 8002574:	40020400 	.word	0x40020400
 8002578:	400200a8 	.word	0x400200a8
 800257c:	400204a8 	.word	0x400204a8

08002580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_DMA_Start_IT+0x20>
 800259c:	2302      	movs	r3, #2
 800259e:	e04b      	b.n	8002638 <HAL_DMA_Start_IT+0xb8>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d13a      	bne.n	800262a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f8e0 	bl	800279e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 020e 	orr.w	r2, r2, #14
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e00f      	b.n	8002618 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0204 	bic.w	r2, r2, #4
 8002606:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 020a 	orr.w	r2, r2, #10
 8002616:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e005      	b.n	8002636 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002632:	2302      	movs	r3, #2
 8002634:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002636:	7dfb      	ldrb	r3, [r7, #23]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265c:	f003 031c 	and.w	r3, r3, #28
 8002660:	2204      	movs	r2, #4
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d026      	beq.n	80026ba <HAL_DMA_IRQHandler+0x7a>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d021      	beq.n	80026ba <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002698:	f003 021c 	and.w	r2, r3, #28
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	2104      	movs	r1, #4
 80026a2:	fa01 f202 	lsl.w	r2, r1, r2
 80026a6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d071      	beq.n	8002794 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026b8:	e06c      	b.n	8002794 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	f003 031c 	and.w	r3, r3, #28
 80026c2:	2202      	movs	r2, #2
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d02e      	beq.n	800272c <HAL_DMA_IRQHandler+0xec>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d029      	beq.n	800272c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10b      	bne.n	80026fe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 020a 	bic.w	r2, r2, #10
 80026f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	f003 021c 	and.w	r2, r3, #28
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	2102      	movs	r1, #2
 800270c:	fa01 f202 	lsl.w	r2, r1, r2
 8002710:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d038      	beq.n	8002794 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800272a:	e033      	b.n	8002794 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002730:	f003 031c 	and.w	r3, r3, #28
 8002734:	2208      	movs	r2, #8
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d02a      	beq.n	8002796 <HAL_DMA_IRQHandler+0x156>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d025      	beq.n	8002796 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 020e 	bic.w	r2, r2, #14
 8002758:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	f003 021c 	and.w	r2, r3, #28
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	2101      	movs	r1, #1
 8002768:	fa01 f202 	lsl.w	r2, r1, r2
 800276c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002794:	bf00      	nop
 8002796:	bf00      	nop
}
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800279e:	b480      	push	{r7}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b0:	f003 021c 	and.w	r2, r3, #28
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	2101      	movs	r1, #1
 80027ba:	fa01 f202 	lsl.w	r2, r1, r2
 80027be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d108      	bne.n	80027e2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027e0:	e007      	b.n	80027f2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	60da      	str	r2, [r3, #12]
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280e:	e17f      	b.n	8002b10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8171 	beq.w	8002b0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d005      	beq.n	8002840 <HAL_GPIO_Init+0x40>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d130      	bne.n	80028a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	2203      	movs	r2, #3
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002876:	2201      	movs	r2, #1
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	f003 0201 	and.w	r2, r3, #1
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d118      	bne.n	80028e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	08db      	lsrs	r3, r3, #3
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	6939      	ldr	r1, [r7, #16]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80ac 	beq.w	8002b0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b30 <HAL_GPIO_Init+0x330>)
 80029b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002b30 <HAL_GPIO_Init+0x330>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80029be:	4b5c      	ldr	r3, [pc, #368]	@ (8002b30 <HAL_GPIO_Init+0x330>)
 80029c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002b34 <HAL_GPIO_Init+0x334>)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3302      	adds	r3, #2
 80029d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	220f      	movs	r2, #15
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029f4:	d025      	beq.n	8002a42 <HAL_GPIO_Init+0x242>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002b38 <HAL_GPIO_Init+0x338>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01f      	beq.n	8002a3e <HAL_GPIO_Init+0x23e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4e      	ldr	r2, [pc, #312]	@ (8002b3c <HAL_GPIO_Init+0x33c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d019      	beq.n	8002a3a <HAL_GPIO_Init+0x23a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4d      	ldr	r2, [pc, #308]	@ (8002b40 <HAL_GPIO_Init+0x340>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0x236>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4c      	ldr	r2, [pc, #304]	@ (8002b44 <HAL_GPIO_Init+0x344>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00d      	beq.n	8002a32 <HAL_GPIO_Init+0x232>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4b      	ldr	r2, [pc, #300]	@ (8002b48 <HAL_GPIO_Init+0x348>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_Init+0x22e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4a      	ldr	r2, [pc, #296]	@ (8002b4c <HAL_GPIO_Init+0x34c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_GPIO_Init+0x22a>
 8002a26:	2306      	movs	r3, #6
 8002a28:	e00c      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	e00a      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a2e:	2305      	movs	r3, #5
 8002a30:	e008      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e004      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x244>
 8002a42:	2300      	movs	r3, #0
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a54:	4937      	ldr	r1, [pc, #220]	@ (8002b34 <HAL_GPIO_Init+0x334>)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a62:	4b3b      	ldr	r3, [pc, #236]	@ (8002b50 <HAL_GPIO_Init+0x350>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a86:	4a32      	ldr	r2, [pc, #200]	@ (8002b50 <HAL_GPIO_Init+0x350>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a8c:	4b30      	ldr	r3, [pc, #192]	@ (8002b50 <HAL_GPIO_Init+0x350>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ab0:	4a27      	ldr	r2, [pc, #156]	@ (8002b50 <HAL_GPIO_Init+0x350>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ab6:	4b26      	ldr	r3, [pc, #152]	@ (8002b50 <HAL_GPIO_Init+0x350>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ada:	4a1d      	ldr	r2, [pc, #116]	@ (8002b50 <HAL_GPIO_Init+0x350>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <HAL_GPIO_Init+0x350>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b04:	4a12      	ldr	r2, [pc, #72]	@ (8002b50 <HAL_GPIO_Init+0x350>)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f47f ae78 	bne.w	8002810 <HAL_GPIO_Init+0x10>
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40010000 	.word	0x40010000
 8002b38:	48000400 	.word	0x48000400
 8002b3c:	48000800 	.word	0x48000800
 8002b40:	48000c00 	.word	0x48000c00
 8002b44:	48001000 	.word	0x48001000
 8002b48:	48001400 	.word	0x48001400
 8002b4c:	48001800 	.word	0x48001800
 8002b50:	40010400 	.word	0x40010400

08002b54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b58:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40007000 	.word	0x40007000

08002b70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b7e:	d130      	bne.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b80:	4b23      	ldr	r3, [pc, #140]	@ (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b8c:	d038      	beq.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b8e:	4b20      	ldr	r3, [pc, #128]	@ (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b96:	4a1e      	ldr	r2, [pc, #120]	@ (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2232      	movs	r2, #50	@ 0x32
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0c9b      	lsrs	r3, r3, #18
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb4:	e002      	b.n	8002bbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bbc:	4b14      	ldr	r3, [pc, #80]	@ (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc8:	d102      	bne.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f2      	bne.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bdc:	d110      	bne.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e00f      	b.n	8002c02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002be2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bee:	d007      	beq.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bf0:	4b07      	ldr	r3, [pc, #28]	@ (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bf8:	4a05      	ldr	r2, [pc, #20]	@ (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bfe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40007000 	.word	0x40007000
 8002c14:	20000000 	.word	0x20000000
 8002c18:	431bde83 	.word	0x431bde83

08002c1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e3ca      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2e:	4b97      	ldr	r3, [pc, #604]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c38:	4b94      	ldr	r3, [pc, #592]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80e4 	beq.w	8002e18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <HAL_RCC_OscConfig+0x4a>
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	f040 808b 	bne.w	8002d74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	f040 8087 	bne.w	8002d74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c66:	4b89      	ldr	r3, [pc, #548]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_RCC_OscConfig+0x62>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e3a2      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1a      	ldr	r2, [r3, #32]
 8002c82:	4b82      	ldr	r3, [pc, #520]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d004      	beq.n	8002c98 <HAL_RCC_OscConfig+0x7c>
 8002c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c96:	e005      	b.n	8002ca4 <HAL_RCC_OscConfig+0x88>
 8002c98:	4b7c      	ldr	r3, [pc, #496]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9e:	091b      	lsrs	r3, r3, #4
 8002ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d223      	bcs.n	8002cf0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fd1d 	bl	80036ec <RCC_SetFlashLatencyFromMSIRange>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e383      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cbc:	4b73      	ldr	r3, [pc, #460]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a72      	ldr	r2, [pc, #456]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cc2:	f043 0308 	orr.w	r3, r3, #8
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b70      	ldr	r3, [pc, #448]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	496d      	ldr	r1, [pc, #436]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cda:	4b6c      	ldr	r3, [pc, #432]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	4968      	ldr	r1, [pc, #416]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
 8002cee:	e025      	b.n	8002d3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf0:	4b66      	ldr	r3, [pc, #408]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a65      	ldr	r2, [pc, #404]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cf6:	f043 0308 	orr.w	r3, r3, #8
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b63      	ldr	r3, [pc, #396]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4960      	ldr	r1, [pc, #384]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d0e:	4b5f      	ldr	r3, [pc, #380]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	495b      	ldr	r1, [pc, #364]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fcdd 	bl	80036ec <RCC_SetFlashLatencyFromMSIRange>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e343      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d3c:	f000 fc4a 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b52      	ldr	r3, [pc, #328]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	4950      	ldr	r1, [pc, #320]	@ (8002e90 <HAL_RCC_OscConfig+0x274>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
 8002d58:	4a4e      	ldr	r2, [pc, #312]	@ (8002e94 <HAL_RCC_OscConfig+0x278>)
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d5c:	4b4e      	ldr	r3, [pc, #312]	@ (8002e98 <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fd85 	bl	8000870 <HAL_InitTick>
 8002d66:	4603      	mov	r3, r0
 8002d68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d052      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	e327      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d032      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d7c:	4b43      	ldr	r3, [pc, #268]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a42      	ldr	r2, [pc, #264]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d88:	f7fd fdc2 	bl	8000910 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d90:	f7fd fdbe 	bl	8000910 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e310      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002da2:	4b3a      	ldr	r3, [pc, #232]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dae:	4b37      	ldr	r3, [pc, #220]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a36      	ldr	r2, [pc, #216]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002db4:	f043 0308 	orr.w	r3, r3, #8
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b34      	ldr	r3, [pc, #208]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4931      	ldr	r1, [pc, #196]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	492c      	ldr	r1, [pc, #176]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
 8002de0:	e01a      	b.n	8002e18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002de2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a29      	ldr	r2, [pc, #164]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dee:	f7fd fd8f 	bl	8000910 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002df6:	f7fd fd8b 	bl	8000910 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e2dd      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e08:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x1da>
 8002e14:	e000      	b.n	8002e18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d074      	beq.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d005      	beq.n	8002e36 <HAL_RCC_OscConfig+0x21a>
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	d10e      	bne.n	8002e4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d10b      	bne.n	8002e4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d064      	beq.n	8002f0c <HAL_RCC_OscConfig+0x2f0>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d160      	bne.n	8002f0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e2ba      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x24a>
 8002e58:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	e026      	b.n	8002eb4 <HAL_RCC_OscConfig+0x298>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e6e:	d115      	bne.n	8002e9c <HAL_RCC_OscConfig+0x280>
 8002e70:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a05      	ldr	r2, [pc, #20]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a02      	ldr	r2, [pc, #8]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	e014      	b.n	8002eb4 <HAL_RCC_OscConfig+0x298>
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08004194 	.word	0x08004194
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000004 	.word	0x20000004
 8002e9c:	4ba0      	ldr	r3, [pc, #640]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a9f      	ldr	r2, [pc, #636]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b9d      	ldr	r3, [pc, #628]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a9c      	ldr	r2, [pc, #624]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fd fd28 	bl	8000910 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fd fd24 	bl	8000910 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	@ 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e276      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed6:	4b92      	ldr	r3, [pc, #584]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x2a8>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fd fd14 	bl	8000910 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fd fd10 	bl	8000910 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	@ 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e262      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002efe:	4b88      	ldr	r3, [pc, #544]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x2d0>
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d060      	beq.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_OscConfig+0x310>
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d119      	bne.n	8002f5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d116      	bne.n	8002f5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f2c:	4b7c      	ldr	r3, [pc, #496]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_OscConfig+0x328>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e23f      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b76      	ldr	r3, [pc, #472]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	4973      	ldr	r1, [pc, #460]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f58:	e040      	b.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d023      	beq.n	8002faa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f62:	4b6f      	ldr	r3, [pc, #444]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6e      	ldr	r2, [pc, #440]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fd fccf 	bl	8000910 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f76:	f7fd fccb 	bl	8000910 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e21d      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f88:	4b65      	ldr	r3, [pc, #404]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b62      	ldr	r3, [pc, #392]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	495f      	ldr	r1, [pc, #380]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
 8002fa8:	e018      	b.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002faa:	4b5d      	ldr	r3, [pc, #372]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a5c      	ldr	r2, [pc, #368]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fd fcab 	bl	8000910 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fd fca7 	bl	8000910 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e1f9      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fd0:	4b53      	ldr	r3, [pc, #332]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d03c      	beq.n	8003062 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01c      	beq.n	800302a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fd fc86 	bl	8000910 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003008:	f7fd fc82 	bl	8000910 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1d4      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800301a:	4b41      	ldr	r3, [pc, #260]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 800301c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ef      	beq.n	8003008 <HAL_RCC_OscConfig+0x3ec>
 8003028:	e01b      	b.n	8003062 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302a:	4b3d      	ldr	r3, [pc, #244]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 800302c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003030:	4a3b      	ldr	r2, [pc, #236]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003032:	f023 0301 	bic.w	r3, r3, #1
 8003036:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303a:	f7fd fc69 	bl	8000910 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003042:	f7fd fc65 	bl	8000910 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e1b7      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003054:	4b32      	ldr	r3, [pc, #200]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1ef      	bne.n	8003042 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80a6 	beq.w	80031bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003070:	2300      	movs	r3, #0
 8003072:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003074:	4b2a      	ldr	r3, [pc, #168]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10d      	bne.n	800309c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003080:	4b27      	ldr	r3, [pc, #156]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003084:	4a26      	ldr	r2, [pc, #152]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800308a:	6593      	str	r3, [r2, #88]	@ 0x58
 800308c:	4b24      	ldr	r3, [pc, #144]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003098:	2301      	movs	r3, #1
 800309a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309c:	4b21      	ldr	r3, [pc, #132]	@ (8003124 <HAL_RCC_OscConfig+0x508>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d118      	bne.n	80030da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <HAL_RCC_OscConfig+0x508>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003124 <HAL_RCC_OscConfig+0x508>)
 80030ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b4:	f7fd fc2c 	bl	8000910 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030bc:	f7fd fc28 	bl	8000910 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e17a      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <HAL_RCC_OscConfig+0x508>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d108      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4d8>
 80030e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030f2:	e029      	b.n	8003148 <HAL_RCC_OscConfig+0x52c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d115      	bne.n	8003128 <HAL_RCC_OscConfig+0x50c>
 80030fc:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003102:	4a07      	ldr	r2, [pc, #28]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800310c:	4b04      	ldr	r3, [pc, #16]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003112:	4a03      	ldr	r2, [pc, #12]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800311c:	e014      	b.n	8003148 <HAL_RCC_OscConfig+0x52c>
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	40007000 	.word	0x40007000
 8003128:	4b9c      	ldr	r3, [pc, #624]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312e:	4a9b      	ldr	r2, [pc, #620]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003138:	4b98      	ldr	r3, [pc, #608]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313e:	4a97      	ldr	r2, [pc, #604]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d016      	beq.n	800317e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fd fbde 	bl	8000910 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fd fbda 	bl	8000910 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e12a      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316e:	4b8b      	ldr	r3, [pc, #556]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ed      	beq.n	8003158 <HAL_RCC_OscConfig+0x53c>
 800317c:	e015      	b.n	80031aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fd fbc7 	bl	8000910 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fd fbc3 	bl	8000910 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e113      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800319c:	4b7f      	ldr	r3, [pc, #508]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ed      	bne.n	8003186 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031aa:	7ffb      	ldrb	r3, [r7, #31]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b0:	4b7a      	ldr	r3, [pc, #488]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	4a79      	ldr	r2, [pc, #484]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 80031b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80fe 	beq.w	80033c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	f040 80d0 	bne.w	8003370 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031d0:	4b72      	ldr	r3, [pc, #456]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0203 	and.w	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d130      	bne.n	8003246 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	3b01      	subs	r3, #1
 80031f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d127      	bne.n	8003246 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003200:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d11f      	bne.n	8003246 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003210:	2a07      	cmp	r2, #7
 8003212:	bf14      	ite	ne
 8003214:	2201      	movne	r2, #1
 8003216:	2200      	moveq	r2, #0
 8003218:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800321a:	4293      	cmp	r3, r2
 800321c:	d113      	bne.n	8003246 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	3b01      	subs	r3, #1
 800322c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d109      	bne.n	8003246 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	3b01      	subs	r3, #1
 8003240:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d06e      	beq.n	8003324 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b0c      	cmp	r3, #12
 800324a:	d069      	beq.n	8003320 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800324c:	4b53      	ldr	r3, [pc, #332]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003258:	4b50      	ldr	r3, [pc, #320]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0ad      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003268:	4b4c      	ldr	r3, [pc, #304]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a4b      	ldr	r2, [pc, #300]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 800326e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003274:	f7fd fb4c 	bl	8000910 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fd fb48 	bl	8000910 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e09a      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800328e:	4b43      	ldr	r3, [pc, #268]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329a:	4b40      	ldr	r3, [pc, #256]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	4b40      	ldr	r3, [pc, #256]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032aa:	3a01      	subs	r2, #1
 80032ac:	0112      	lsls	r2, r2, #4
 80032ae:	4311      	orrs	r1, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032b4:	0212      	lsls	r2, r2, #8
 80032b6:	4311      	orrs	r1, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032bc:	0852      	lsrs	r2, r2, #1
 80032be:	3a01      	subs	r2, #1
 80032c0:	0552      	lsls	r2, r2, #21
 80032c2:	4311      	orrs	r1, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80032c8:	0852      	lsrs	r2, r2, #1
 80032ca:	3a01      	subs	r2, #1
 80032cc:	0652      	lsls	r2, r2, #25
 80032ce:	4311      	orrs	r1, r2
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032d4:	0912      	lsrs	r2, r2, #4
 80032d6:	0452      	lsls	r2, r2, #17
 80032d8:	430a      	orrs	r2, r1
 80032da:	4930      	ldr	r1, [pc, #192]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032e0:	4b2e      	ldr	r3, [pc, #184]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a2d      	ldr	r2, [pc, #180]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 80032e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032ec:	4b2b      	ldr	r3, [pc, #172]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4a2a      	ldr	r2, [pc, #168]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 80032f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032f8:	f7fd fb0a 	bl	8000910 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fd fb06 	bl	8000910 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e058      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003312:	4b22      	ldr	r3, [pc, #136]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800331e:	e050      	b.n	80033c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e04f      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003324:	4b1d      	ldr	r3, [pc, #116]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d148      	bne.n	80033c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003330:	4b1a      	ldr	r3, [pc, #104]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a19      	ldr	r2, [pc, #100]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800333a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800333c:	4b17      	ldr	r3, [pc, #92]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a16      	ldr	r2, [pc, #88]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003346:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003348:	f7fd fae2 	bl	8000910 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fd fade 	bl	8000910 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e030      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x734>
 800336e:	e028      	b.n	80033c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2b0c      	cmp	r3, #12
 8003374:	d023      	beq.n	80033be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003376:	4b09      	ldr	r3, [pc, #36]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a08      	ldr	r2, [pc, #32]	@ (800339c <HAL_RCC_OscConfig+0x780>)
 800337c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fd fac5 	bl	8000910 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003388:	e00c      	b.n	80033a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338a:	f7fd fac1 	bl	8000910 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d905      	bls.n	80033a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e013      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
 800339c:	40021000 	.word	0x40021000
 80033a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a4:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <HAL_RCC_OscConfig+0x7b0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1ec      	bne.n	800338a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033b0:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <HAL_RCC_OscConfig+0x7b0>)
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	4905      	ldr	r1, [pc, #20]	@ (80033cc <HAL_RCC_OscConfig+0x7b0>)
 80033b6:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <HAL_RCC_OscConfig+0x7b4>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	60cb      	str	r3, [r1, #12]
 80033bc:	e001      	b.n	80033c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3720      	adds	r7, #32
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000
 80033d0:	feeefffc 	.word	0xfeeefffc

080033d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0e7      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4b75      	ldr	r3, [pc, #468]	@ (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d910      	bls.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b72      	ldr	r3, [pc, #456]	@ (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4970      	ldr	r1, [pc, #448]	@ (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b6e      	ldr	r3, [pc, #440]	@ (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0cf      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d010      	beq.n	8003446 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	4b66      	ldr	r3, [pc, #408]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003430:	429a      	cmp	r2, r3
 8003432:	d908      	bls.n	8003446 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b63      	ldr	r3, [pc, #396]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4960      	ldr	r1, [pc, #384]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d04c      	beq.n	80034ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b03      	cmp	r3, #3
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345a:	4b5a      	ldr	r3, [pc, #360]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d121      	bne.n	80034aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e0a6      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003472:	4b54      	ldr	r3, [pc, #336]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d115      	bne.n	80034aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e09a      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800348a:	4b4e      	ldr	r3, [pc, #312]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e08e      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349a:	4b4a      	ldr	r3, [pc, #296]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e086      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034aa:	4b46      	ldr	r3, [pc, #280]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4943      	ldr	r1, [pc, #268]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034bc:	f7fd fa28 	bl	8000910 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fd fa24 	bl	8000910 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e06e      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b3a      	ldr	r3, [pc, #232]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 020c 	and.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1eb      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d010      	beq.n	800351a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	4b31      	ldr	r3, [pc, #196]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003504:	429a      	cmp	r2, r3
 8003506:	d208      	bcs.n	800351a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003508:	4b2e      	ldr	r3, [pc, #184]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	492b      	ldr	r1, [pc, #172]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800351a:	4b29      	ldr	r3, [pc, #164]	@ (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d210      	bcs.n	800354a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003528:	4b25      	ldr	r3, [pc, #148]	@ (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 0207 	bic.w	r2, r3, #7
 8003530:	4923      	ldr	r1, [pc, #140]	@ (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003538:	4b21      	ldr	r3, [pc, #132]	@ (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d001      	beq.n	800354a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e036      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003556:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	4918      	ldr	r1, [pc, #96]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	4313      	orrs	r3, r2
 8003566:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d009      	beq.n	8003588 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003574:	4b13      	ldr	r3, [pc, #76]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4910      	ldr	r1, [pc, #64]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	4313      	orrs	r3, r2
 8003586:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003588:	f000 f824 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b0d      	ldr	r3, [pc, #52]	@ (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	490b      	ldr	r1, [pc, #44]	@ (80035c8 <HAL_RCC_ClockConfig+0x1f4>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
 80035a4:	4a09      	ldr	r2, [pc, #36]	@ (80035cc <HAL_RCC_ClockConfig+0x1f8>)
 80035a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035a8:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <HAL_RCC_ClockConfig+0x1fc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd f95f 	bl	8000870 <HAL_InitTick>
 80035b2:	4603      	mov	r3, r0
 80035b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80035b6:	7afb      	ldrb	r3, [r7, #11]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40022000 	.word	0x40022000
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08004194 	.word	0x08004194
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000004 	.word	0x20000004

080035d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	@ 0x24
 80035d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e2:	4b3e      	ldr	r3, [pc, #248]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ec:	4b3b      	ldr	r3, [pc, #236]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x34>
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d121      	bne.n	8003646 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d11e      	bne.n	8003646 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003608:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003614:	4b31      	ldr	r3, [pc, #196]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800361a:	0a1b      	lsrs	r3, r3, #8
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e005      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003624:	4b2d      	ldr	r3, [pc, #180]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003630:	4a2b      	ldr	r2, [pc, #172]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003638:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10d      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003644:	e00a      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d102      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800364c:	4b25      	ldr	r3, [pc, #148]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	e004      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d101      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003658:	4b23      	ldr	r3, [pc, #140]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800365a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d134      	bne.n	80036cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003662:	4b1e      	ldr	r3, [pc, #120]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d003      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0xa6>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d003      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0xac>
 8003678:	e005      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800367a:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800367c:	617b      	str	r3, [r7, #20]
      break;
 800367e:	e005      	b.n	800368c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003680:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003682:	617b      	str	r3, [r7, #20]
      break;
 8003684:	e002      	b.n	800368c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	617b      	str	r3, [r7, #20]
      break;
 800368a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800368c:	4b13      	ldr	r3, [pc, #76]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	3301      	adds	r3, #1
 8003698:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800369a:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	fb03 f202 	mul.w	r2, r3, r2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036b2:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	0e5b      	lsrs	r3, r3, #25
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	3301      	adds	r3, #1
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036cc:	69bb      	ldr	r3, [r7, #24]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3724      	adds	r7, #36	@ 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	080041a4 	.word	0x080041a4
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	007a1200 	.word	0x007a1200

080036ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036f8:	4b2a      	ldr	r3, [pc, #168]	@ (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003704:	f7ff fa26 	bl	8002b54 <HAL_PWREx_GetVoltageRange>
 8003708:	6178      	str	r0, [r7, #20]
 800370a:	e014      	b.n	8003736 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800370c:	4b25      	ldr	r3, [pc, #148]	@ (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003710:	4a24      	ldr	r2, [pc, #144]	@ (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003716:	6593      	str	r3, [r2, #88]	@ 0x58
 8003718:	4b22      	ldr	r3, [pc, #136]	@ (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003724:	f7ff fa16 	bl	8002b54 <HAL_PWREx_GetVoltageRange>
 8003728:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800372a:	4b1e      	ldr	r3, [pc, #120]	@ (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372e:	4a1d      	ldr	r2, [pc, #116]	@ (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003734:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800373c:	d10b      	bne.n	8003756 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b80      	cmp	r3, #128	@ 0x80
 8003742:	d919      	bls.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2ba0      	cmp	r3, #160	@ 0xa0
 8003748:	d902      	bls.n	8003750 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800374a:	2302      	movs	r3, #2
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	e013      	b.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003750:	2301      	movs	r3, #1
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	e010      	b.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b80      	cmp	r3, #128	@ 0x80
 800375a:	d902      	bls.n	8003762 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800375c:	2303      	movs	r3, #3
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	e00a      	b.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b80      	cmp	r3, #128	@ 0x80
 8003766:	d102      	bne.n	800376e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003768:	2302      	movs	r3, #2
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	e004      	b.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b70      	cmp	r3, #112	@ 0x70
 8003772:	d101      	bne.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003774:	2301      	movs	r3, #1
 8003776:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003778:	4b0b      	ldr	r3, [pc, #44]	@ (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 0207 	bic.w	r2, r3, #7
 8003780:	4909      	ldr	r1, [pc, #36]	@ (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003788:	4b07      	ldr	r3, [pc, #28]	@ (80037a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	429a      	cmp	r2, r3
 8003794:	d001      	beq.n	800379a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40022000 	.word	0x40022000

080037ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037b4:	2300      	movs	r3, #0
 80037b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037b8:	2300      	movs	r3, #0
 80037ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d041      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80037d0:	d02a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80037d6:	d824      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037dc:	d008      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037e2:	d81e      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ec:	d010      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037ee:	e018      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037f0:	4b86      	ldr	r3, [pc, #536]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a85      	ldr	r2, [pc, #532]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037fc:	e015      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fabb 	bl	8003d80 <RCCEx_PLLSAI1_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800380e:	e00c      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3320      	adds	r3, #32
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fba6 	bl	8003f68 <RCCEx_PLLSAI2_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003820:	e003      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	74fb      	strb	r3, [r7, #19]
      break;
 8003826:	e000      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003828:	bf00      	nop
    }

    if(ret == HAL_OK)
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10b      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003830:	4b76      	ldr	r3, [pc, #472]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003836:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800383e:	4973      	ldr	r1, [pc, #460]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003846:	e001      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d041      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800385c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003860:	d02a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003862:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003866:	d824      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003868:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800386c:	d008      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800386e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003872:	d81e      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800387c:	d010      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800387e:	e018      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003880:	4b62      	ldr	r3, [pc, #392]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a61      	ldr	r2, [pc, #388]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800388a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800388c:	e015      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3304      	adds	r3, #4
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fa73 	bl	8003d80 <RCCEx_PLLSAI1_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800389e:	e00c      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3320      	adds	r3, #32
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fb5e 	bl	8003f68 <RCCEx_PLLSAI2_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038b0:	e003      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	74fb      	strb	r3, [r7, #19]
      break;
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ba:	7cfb      	ldrb	r3, [r7, #19]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038c0:	4b52      	ldr	r3, [pc, #328]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ce:	494f      	ldr	r1, [pc, #316]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80038d6:	e001      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80a0 	beq.w	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038ee:	4b47      	ldr	r3, [pc, #284]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003904:	4b41      	ldr	r3, [pc, #260]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003908:	4a40      	ldr	r2, [pc, #256]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800390e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003910:	4b3e      	ldr	r3, [pc, #248]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391c:	2301      	movs	r3, #1
 800391e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003920:	4b3b      	ldr	r3, [pc, #236]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a3a      	ldr	r2, [pc, #232]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800392a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800392c:	f7fc fff0 	bl	8000910 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003932:	e009      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003934:	f7fc ffec 	bl	8000910 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	74fb      	strb	r3, [r7, #19]
        break;
 8003946:	e005      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003948:	4b31      	ldr	r3, [pc, #196]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ef      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d15c      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800395a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003960:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003964:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01f      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	429a      	cmp	r2, r3
 8003976:	d019      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003978:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003982:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003984:	4b21      	ldr	r3, [pc, #132]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398a:	4a20      	ldr	r2, [pc, #128]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003994:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039a4:	4a19      	ldr	r2, [pc, #100]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fc ffab 	bl	8000910 <HAL_GetTick>
 80039ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039bc:	e00b      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fc ffa7 	bl	8000910 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d902      	bls.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	74fb      	strb	r3, [r7, #19]
            break;
 80039d4:	e006      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ec      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ea:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039fa:	4904      	ldr	r1, [pc, #16]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a02:	e009      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	74bb      	strb	r3, [r7, #18]
 8003a08:	e006      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a18:	7c7b      	ldrb	r3, [r7, #17]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d105      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1e:	4b9e      	ldr	r3, [pc, #632]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a22:	4a9d      	ldr	r2, [pc, #628]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a36:	4b98      	ldr	r3, [pc, #608]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3c:	f023 0203 	bic.w	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a44:	4994      	ldr	r1, [pc, #592]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a58:	4b8f      	ldr	r3, [pc, #572]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5e:	f023 020c 	bic.w	r2, r3, #12
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a66:	498c      	ldr	r1, [pc, #560]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a7a:	4b87      	ldr	r3, [pc, #540]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a80:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	4983      	ldr	r1, [pc, #524]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a9c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	497b      	ldr	r1, [pc, #492]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003abe:	4b76      	ldr	r3, [pc, #472]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003acc:	4972      	ldr	r1, [pc, #456]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ae0:	4b6d      	ldr	r3, [pc, #436]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aee:	496a      	ldr	r1, [pc, #424]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b02:	4b65      	ldr	r3, [pc, #404]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b10:	4961      	ldr	r1, [pc, #388]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b24:	4b5c      	ldr	r3, [pc, #368]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b32:	4959      	ldr	r1, [pc, #356]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b46:	4b54      	ldr	r3, [pc, #336]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b54:	4950      	ldr	r1, [pc, #320]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b68:	4b4b      	ldr	r3, [pc, #300]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b76:	4948      	ldr	r1, [pc, #288]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b8a:	4b43      	ldr	r3, [pc, #268]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b98:	493f      	ldr	r1, [pc, #252]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d028      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bac:	4b3a      	ldr	r3, [pc, #232]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bba:	4937      	ldr	r1, [pc, #220]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bca:	d106      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bcc:	4b32      	ldr	r3, [pc, #200]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4a31      	ldr	r2, [pc, #196]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bd6:	60d3      	str	r3, [r2, #12]
 8003bd8:	e011      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003be2:	d10c      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3304      	adds	r3, #4
 8003be8:	2101      	movs	r1, #1
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f8c8 	bl	8003d80 <RCCEx_PLLSAI1_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d028      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c0a:	4b23      	ldr	r3, [pc, #140]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c10:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c18:	491f      	ldr	r1, [pc, #124]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c28:	d106      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c34:	60d3      	str	r3, [r2, #12]
 8003c36:	e011      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3304      	adds	r3, #4
 8003c46:	2101      	movs	r1, #1
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f899 	bl	8003d80 <RCCEx_PLLSAI1_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c58:	7cfb      	ldrb	r3, [r7, #19]
 8003c5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d02b      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c68:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c76:	4908      	ldr	r1, [pc, #32]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c86:	d109      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c88:	4b03      	ldr	r3, [pc, #12]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4a02      	ldr	r2, [pc, #8]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c92:	60d3      	str	r3, [r2, #12]
 8003c94:	e014      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2101      	movs	r1, #1
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 f867 	bl	8003d80 <RCCEx_PLLSAI1_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003cbc:	7cfb      	ldrb	r3, [r7, #19]
 8003cbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d02f      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cda:	4928      	ldr	r1, [pc, #160]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ce6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cea:	d10d      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f844 	bl	8003d80 <RCCEx_PLLSAI1_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d014      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d02:	7cfb      	ldrb	r3, [r7, #19]
 8003d04:	74bb      	strb	r3, [r7, #18]
 8003d06:	e011      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3320      	adds	r3, #32
 8003d16:	2102      	movs	r1, #2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 f925 	bl	8003f68 <RCCEx_PLLSAI2_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d22:	7cfb      	ldrb	r3, [r7, #19]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d28:	7cfb      	ldrb	r3, [r7, #19]
 8003d2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d38:	4b10      	ldr	r3, [pc, #64]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d46:	490d      	ldr	r1, [pc, #52]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d5a:	4b08      	ldr	r3, [pc, #32]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d6a:	4904      	ldr	r1, [pc, #16]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d72:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40021000 	.word	0x40021000

08003d80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d8e:	4b75      	ldr	r3, [pc, #468]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d018      	beq.n	8003dcc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d9a:	4b72      	ldr	r3, [pc, #456]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0203 	and.w	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d10d      	bne.n	8003dc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
       ||
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003db2:	4b6c      	ldr	r3, [pc, #432]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
       ||
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d047      	beq.n	8003e56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
 8003dca:	e044      	b.n	8003e56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d018      	beq.n	8003e06 <RCCEx_PLLSAI1_Config+0x86>
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d825      	bhi.n	8003e24 <RCCEx_PLLSAI1_Config+0xa4>
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d002      	beq.n	8003de2 <RCCEx_PLLSAI1_Config+0x62>
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d009      	beq.n	8003df4 <RCCEx_PLLSAI1_Config+0x74>
 8003de0:	e020      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003de2:	4b60      	ldr	r3, [pc, #384]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d11d      	bne.n	8003e2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df2:	e01a      	b.n	8003e2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003df4:	4b5b      	ldr	r3, [pc, #364]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d116      	bne.n	8003e2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e04:	e013      	b.n	8003e2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e06:	4b57      	ldr	r3, [pc, #348]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10f      	bne.n	8003e32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e12:	4b54      	ldr	r3, [pc, #336]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e22:	e006      	b.n	8003e32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
      break;
 8003e28:	e004      	b.n	8003e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e32:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10d      	bne.n	8003e56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6819      	ldr	r1, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	4944      	ldr	r1, [pc, #272]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d17d      	bne.n	8003f58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e5c:	4b41      	ldr	r3, [pc, #260]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a40      	ldr	r2, [pc, #256]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e68:	f7fc fd52 	bl	8000910 <HAL_GetTick>
 8003e6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e6e:	e009      	b.n	8003e84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e70:	f7fc fd4e 	bl	8000910 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d902      	bls.n	8003e84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	73fb      	strb	r3, [r7, #15]
        break;
 8003e82:	e005      	b.n	8003e90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e84:	4b37      	ldr	r3, [pc, #220]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1ef      	bne.n	8003e70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d160      	bne.n	8003f58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d111      	bne.n	8003ec0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e9c:	4b31      	ldr	r3, [pc, #196]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6892      	ldr	r2, [r2, #8]
 8003eac:	0211      	lsls	r1, r2, #8
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68d2      	ldr	r2, [r2, #12]
 8003eb2:	0912      	lsrs	r2, r2, #4
 8003eb4:	0452      	lsls	r2, r2, #17
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	492a      	ldr	r1, [pc, #168]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	610b      	str	r3, [r1, #16]
 8003ebe:	e027      	b.n	8003f10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d112      	bne.n	8003eec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ec6:	4b27      	ldr	r3, [pc, #156]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003ece:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6892      	ldr	r2, [r2, #8]
 8003ed6:	0211      	lsls	r1, r2, #8
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6912      	ldr	r2, [r2, #16]
 8003edc:	0852      	lsrs	r2, r2, #1
 8003ede:	3a01      	subs	r2, #1
 8003ee0:	0552      	lsls	r2, r2, #21
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	491f      	ldr	r1, [pc, #124]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	610b      	str	r3, [r1, #16]
 8003eea:	e011      	b.n	8003f10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eec:	4b1d      	ldr	r3, [pc, #116]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ef4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6892      	ldr	r2, [r2, #8]
 8003efc:	0211      	lsls	r1, r2, #8
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6952      	ldr	r2, [r2, #20]
 8003f02:	0852      	lsrs	r2, r2, #1
 8003f04:	3a01      	subs	r2, #1
 8003f06:	0652      	lsls	r2, r2, #25
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	4916      	ldr	r1, [pc, #88]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f10:	4b14      	ldr	r3, [pc, #80]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a13      	ldr	r2, [pc, #76]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7fc fcf8 	bl	8000910 <HAL_GetTick>
 8003f20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f22:	e009      	b.n	8003f38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f24:	f7fc fcf4 	bl	8000910 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d902      	bls.n	8003f38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	73fb      	strb	r3, [r7, #15]
          break;
 8003f36:	e005      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f38:	4b0a      	ldr	r3, [pc, #40]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ef      	beq.n	8003f24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f4a:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	4904      	ldr	r1, [pc, #16]	@ (8003f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000

08003f68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f76:	4b6a      	ldr	r3, [pc, #424]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d018      	beq.n	8003fb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f82:	4b67      	ldr	r3, [pc, #412]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0203 	and.w	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d10d      	bne.n	8003fae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
       ||
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f9a:	4b61      	ldr	r3, [pc, #388]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
       ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d047      	beq.n	800403e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
 8003fb2:	e044      	b.n	800403e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d018      	beq.n	8003fee <RCCEx_PLLSAI2_Config+0x86>
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d825      	bhi.n	800400c <RCCEx_PLLSAI2_Config+0xa4>
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d002      	beq.n	8003fca <RCCEx_PLLSAI2_Config+0x62>
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d009      	beq.n	8003fdc <RCCEx_PLLSAI2_Config+0x74>
 8003fc8:	e020      	b.n	800400c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fca:	4b55      	ldr	r3, [pc, #340]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d11d      	bne.n	8004012 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fda:	e01a      	b.n	8004012 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fdc:	4b50      	ldr	r3, [pc, #320]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d116      	bne.n	8004016 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fec:	e013      	b.n	8004016 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fee:	4b4c      	ldr	r3, [pc, #304]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10f      	bne.n	800401a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ffa:	4b49      	ldr	r3, [pc, #292]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800400a:	e006      	b.n	800401a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
      break;
 8004010:	e004      	b.n	800401c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004012:	bf00      	nop
 8004014:	e002      	b.n	800401c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004016:	bf00      	nop
 8004018:	e000      	b.n	800401c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800401a:	bf00      	nop
    }

    if(status == HAL_OK)
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10d      	bne.n	800403e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004022:	4b3f      	ldr	r3, [pc, #252]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6819      	ldr	r1, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	3b01      	subs	r3, #1
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	430b      	orrs	r3, r1
 8004038:	4939      	ldr	r1, [pc, #228]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 800403a:	4313      	orrs	r3, r2
 800403c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d167      	bne.n	8004114 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004044:	4b36      	ldr	r3, [pc, #216]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a35      	ldr	r2, [pc, #212]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 800404a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800404e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004050:	f7fc fc5e 	bl	8000910 <HAL_GetTick>
 8004054:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004056:	e009      	b.n	800406c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004058:	f7fc fc5a 	bl	8000910 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d902      	bls.n	800406c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	73fb      	strb	r3, [r7, #15]
        break;
 800406a:	e005      	b.n	8004078 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800406c:	4b2c      	ldr	r3, [pc, #176]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1ef      	bne.n	8004058 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d14a      	bne.n	8004114 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d111      	bne.n	80040a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004084:	4b26      	ldr	r3, [pc, #152]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800408c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6892      	ldr	r2, [r2, #8]
 8004094:	0211      	lsls	r1, r2, #8
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68d2      	ldr	r2, [r2, #12]
 800409a:	0912      	lsrs	r2, r2, #4
 800409c:	0452      	lsls	r2, r2, #17
 800409e:	430a      	orrs	r2, r1
 80040a0:	491f      	ldr	r1, [pc, #124]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	614b      	str	r3, [r1, #20]
 80040a6:	e011      	b.n	80040cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80040b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6892      	ldr	r2, [r2, #8]
 80040b8:	0211      	lsls	r1, r2, #8
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6912      	ldr	r2, [r2, #16]
 80040be:	0852      	lsrs	r2, r2, #1
 80040c0:	3a01      	subs	r2, #1
 80040c2:	0652      	lsls	r2, r2, #25
 80040c4:	430a      	orrs	r2, r1
 80040c6:	4916      	ldr	r1, [pc, #88]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040cc:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a13      	ldr	r2, [pc, #76]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fc fc1a 	bl	8000910 <HAL_GetTick>
 80040dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040de:	e009      	b.n	80040f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040e0:	f7fc fc16 	bl	8000910 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d902      	bls.n	80040f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	73fb      	strb	r3, [r7, #15]
          break;
 80040f2:	e005      	b.n	8004100 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ef      	beq.n	80040e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004106:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004108:	695a      	ldr	r2, [r3, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	4904      	ldr	r1, [pc, #16]	@ (8004120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004110:	4313      	orrs	r3, r2
 8004112:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000

08004124 <memset>:
 8004124:	4402      	add	r2, r0
 8004126:	4603      	mov	r3, r0
 8004128:	4293      	cmp	r3, r2
 800412a:	d100      	bne.n	800412e <memset+0xa>
 800412c:	4770      	bx	lr
 800412e:	f803 1b01 	strb.w	r1, [r3], #1
 8004132:	e7f9      	b.n	8004128 <memset+0x4>

08004134 <__libc_init_array>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4d0d      	ldr	r5, [pc, #52]	@ (800416c <__libc_init_array+0x38>)
 8004138:	4c0d      	ldr	r4, [pc, #52]	@ (8004170 <__libc_init_array+0x3c>)
 800413a:	1b64      	subs	r4, r4, r5
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	2600      	movs	r6, #0
 8004140:	42a6      	cmp	r6, r4
 8004142:	d109      	bne.n	8004158 <__libc_init_array+0x24>
 8004144:	4d0b      	ldr	r5, [pc, #44]	@ (8004174 <__libc_init_array+0x40>)
 8004146:	4c0c      	ldr	r4, [pc, #48]	@ (8004178 <__libc_init_array+0x44>)
 8004148:	f000 f818 	bl	800417c <_init>
 800414c:	1b64      	subs	r4, r4, r5
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	2600      	movs	r6, #0
 8004152:	42a6      	cmp	r6, r4
 8004154:	d105      	bne.n	8004162 <__libc_init_array+0x2e>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	f855 3b04 	ldr.w	r3, [r5], #4
 800415c:	4798      	blx	r3
 800415e:	3601      	adds	r6, #1
 8004160:	e7ee      	b.n	8004140 <__libc_init_array+0xc>
 8004162:	f855 3b04 	ldr.w	r3, [r5], #4
 8004166:	4798      	blx	r3
 8004168:	3601      	adds	r6, #1
 800416a:	e7f2      	b.n	8004152 <__libc_init_array+0x1e>
 800416c:	080041d4 	.word	0x080041d4
 8004170:	080041d4 	.word	0x080041d4
 8004174:	080041d4 	.word	0x080041d4
 8004178:	080041d8 	.word	0x080041d8

0800417c <_init>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	bf00      	nop
 8004180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004182:	bc08      	pop	{r3}
 8004184:	469e      	mov	lr, r3
 8004186:	4770      	bx	lr

08004188 <_fini>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	bf00      	nop
 800418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418e:	bc08      	pop	{r3}
 8004190:	469e      	mov	lr, r3
 8004192:	4770      	bx	lr
