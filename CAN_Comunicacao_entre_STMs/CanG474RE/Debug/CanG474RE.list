
CanG474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002868  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a40  08002a40  00003a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a60  08002a60  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a60  08002a60  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a60  08002a60  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a60  08002a60  00003a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a64  08002a64  00003a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  08002a74  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002a74  000040f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082d7  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001723  00000000  00000000  0000c313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0000da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000653  00000000  00000000  0000e2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023cf7  00000000  00000000  0000e913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a76  00000000  00000000  0003260a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4681  00000000  00000000  0003b080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f701  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e4  00000000  00000000  0011f744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  00121928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002a28 	.word	0x08002a28

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002a28 	.word	0x08002a28

08000218 <HAL_FDCAN_RxFifo0Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Interrupção de Recepção CAN1...
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
    if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE)
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d00b      	beq.n	8000244 <HAL_FDCAN_RxFifo0Callback+0x2c>
    {
        HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 800022c:	4b07      	ldr	r3, [pc, #28]	@ (800024c <HAL_FDCAN_RxFifo0Callback+0x34>)
 800022e:	4a08      	ldr	r2, [pc, #32]	@ (8000250 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000230:	2140      	movs	r1, #64	@ 0x40
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 fdee 	bl	8000e14 <HAL_FDCAN_GetRxMessage>
        intg++;
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	3301      	adds	r3, #1
 800023e:	b2da      	uxtb	r2, r3
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000242:	701a      	strb	r2, [r3, #0]
//        if (RxData[0] == 0x03 && RxData[1] == 0x04)
//        {
//            HAL_GPIO_TogglePin(GPIOA, ld1_Pin);
//        }
    }
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200000e0 	.word	0x200000e0
 8000250:	200000b0 	.word	0x200000b0
 8000254:	200000e8 	.word	0x200000e8

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025c:	f000 fa17 	bl	800068e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000260:	f000 f83a 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000264:	f000 f8fa 	bl	800045c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000268:	f000 f876 	bl	8000358 <MX_FDCAN1_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Informações a serem enviadas 2...
	  TxHeader.Identifier = 0x12;
 800026c:	4b17      	ldr	r3, [pc, #92]	@ (80002cc <main+0x74>)
 800026e:	2212      	movs	r2, #18
 8000270:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000272:	4b16      	ldr	r3, [pc, #88]	@ (80002cc <main+0x74>)
 8000274:	2200      	movs	r2, #0
 8000276:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000278:	4b14      	ldr	r3, [pc, #80]	@ (80002cc <main+0x74>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_3;
 800027e:	4b13      	ldr	r3, [pc, #76]	@ (80002cc <main+0x74>)
 8000280:	2203      	movs	r2, #3
 8000282:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000284:	4b11      	ldr	r3, [pc, #68]	@ (80002cc <main+0x74>)
 8000286:	2200      	movs	r2, #0
 8000288:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800028a:	4b10      	ldr	r3, [pc, #64]	@ (80002cc <main+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000290:	4b0e      	ldr	r3, [pc, #56]	@ (80002cc <main+0x74>)
 8000292:	2200      	movs	r2, #0
 8000294:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000296:	4b0d      	ldr	r3, [pc, #52]	@ (80002cc <main+0x74>)
 8000298:	2200      	movs	r2, #0
 800029a:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0;
 800029c:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <main+0x74>)
 800029e:	2200      	movs	r2, #0
 80002a0:	621a      	str	r2, [r3, #32]

	  TxData[0] = 0x08;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	@ (80002d0 <main+0x78>)
 80002a4:	2208      	movs	r2, #8
 80002a6:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 0x09;
 80002a8:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <main+0x78>)
 80002aa:	2209      	movs	r2, #9
 80002ac:	705a      	strb	r2, [r3, #1]
	  TxData[2] = 0x0A;
 80002ae:	4b08      	ldr	r3, [pc, #32]	@ (80002d0 <main+0x78>)
 80002b0:	220a      	movs	r2, #10
 80002b2:	709a      	strb	r2, [r3, #2]

	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 80002b4:	4a06      	ldr	r2, [pc, #24]	@ (80002d0 <main+0x78>)
 80002b6:	4905      	ldr	r1, [pc, #20]	@ (80002cc <main+0x74>)
 80002b8:	4806      	ldr	r0, [pc, #24]	@ (80002d4 <main+0x7c>)
 80002ba:	f000 fd67 	bl	8000d8c <HAL_FDCAN_AddMessageToTxFifoQ>
	  HAL_Delay(2500);
 80002be:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80002c2:	f000 fa55 	bl	8000770 <HAL_Delay>
	  TxHeader.Identifier = 0x12;
 80002c6:	bf00      	nop
 80002c8:	e7d0      	b.n	800026c <main+0x14>
 80002ca:	bf00      	nop
 80002cc:	2000008c 	.word	0x2000008c
 80002d0:	200000d8 	.word	0x200000d8
 80002d4:	20000028 	.word	0x20000028

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b094      	sub	sp, #80	@ 0x50
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	2238      	movs	r2, #56	@ 0x38
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fb72 	bl	80029d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002fe:	f001 fb6f 	bl	80019e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000302:	2302      	movs	r3, #2
 8000304:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800030a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030c:	2340      	movs	r3, #64	@ 0x40
 800030e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000310:	2300      	movs	r3, #0
 8000312:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	f107 0318 	add.w	r3, r7, #24
 8000318:	4618      	mov	r0, r3
 800031a:	f001 fc15 	bl	8001b48 <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000324:	f000 f8b2 	bl	800048c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800032c:	2301      	movs	r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f001 ff13 	bl	800216c <HAL_RCC_ClockConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800034c:	f000 f89e 	bl	800048c <Error_Handler>
  }
}
 8000350:	bf00      	nop
 8000352:	3750      	adds	r7, #80	@ 0x50
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800035e:	4b3d      	ldr	r3, [pc, #244]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 8000360:	4a3d      	ldr	r2, [pc, #244]	@ (8000458 <MX_FDCAN1_Init+0x100>)
 8000362:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000364:	4b3b      	ldr	r3, [pc, #236]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 8000366:	2200      	movs	r2, #0
 8000368:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800036a:	4b3a      	ldr	r3, [pc, #232]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000370:	4b38      	ldr	r3, [pc, #224]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000376:	4b37      	ldr	r3, [pc, #220]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 8000378:	2200      	movs	r2, #0
 800037a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800037c:	4b35      	ldr	r3, [pc, #212]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 800037e:	2200      	movs	r2, #0
 8000380:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000382:	4b34      	ldr	r3, [pc, #208]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 8000384:	2200      	movs	r2, #0
 8000386:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000388:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 800038a:	220a      	movs	r2, #10
 800038c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800038e:	4b31      	ldr	r3, [pc, #196]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 8000390:	2201      	movs	r2, #1
 8000392:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000394:	4b2f      	ldr	r3, [pc, #188]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 8000396:	220d      	movs	r2, #13
 8000398:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800039a:	4b2e      	ldr	r3, [pc, #184]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 800039c:	2202      	movs	r2, #2
 800039e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80003a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80003a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80003ac:	4b29      	ldr	r3, [pc, #164]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80003b2:	4b28      	ldr	r3, [pc, #160]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003be:	4b25      	ldr	r3, [pc, #148]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003c4:	4b23      	ldr	r3, [pc, #140]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80003ca:	4822      	ldr	r0, [pc, #136]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 80003cc:	f000 fb02 	bl	80009d4 <HAL_FDCAN_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80003d6:	f000 f859 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80003da:	481e      	ldr	r0, [pc, #120]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 80003dc:	f000 fafa 	bl	80009d4 <HAL_FDCAN_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_FDCAN1_Init+0x92>
      {
          Error_Handler();
 80003e6:	f000 f851 	bl	800048c <Error_Handler>
      }

      FDCAN_FilterTypeDef sFilterConfig = {0};
 80003ea:	463b      	mov	r3, r7
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
 80003f8:	615a      	str	r2, [r3, #20]
      sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80003fa:	2300      	movs	r3, #0
 80003fc:	603b      	str	r3, [r7, #0]
      sFilterConfig.FilterIndex = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
      sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000402:	2302      	movs	r3, #2
 8000404:	60bb      	str	r3, [r7, #8]
      sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000406:	2301      	movs	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
      sFilterConfig.FilterID1 = 0x000;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
      sFilterConfig.FilterID2 = 0x000;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]

      if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000412:	463b      	mov	r3, r7
 8000414:	4619      	mov	r1, r3
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 8000418:	f000 fc36 	bl	8000c88 <HAL_FDCAN_ConfigFilter>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_FDCAN1_Init+0xce>
      {
          Error_Handler();
 8000422:	f000 f833 	bl	800048c <Error_Handler>
      }

      if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000426:	2200      	movs	r2, #0
 8000428:	2101      	movs	r1, #1
 800042a:	480a      	ldr	r0, [pc, #40]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 800042c:	f000 fdfa 	bl	8001024 <HAL_FDCAN_ActivateNotification>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_FDCAN1_Init+0xe2>
      {
          Error_Handler();
 8000436:	f000 f829 	bl	800048c <Error_Handler>
      }

      if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800043a:	4806      	ldr	r0, [pc, #24]	@ (8000454 <MX_FDCAN1_Init+0xfc>)
 800043c:	f000 fc7e 	bl	8000d3c <HAL_FDCAN_Start>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_FDCAN1_Init+0xf2>
      {
          Error_Handler();
 8000446:	f000 f821 	bl	800048c <Error_Handler>
      }

  /* USER CODE END FDCAN1_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	3718      	adds	r7, #24
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000028 	.word	0x20000028
 8000458:	40006400 	.word	0x40006400

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b09      	ldr	r3, [pc, #36]	@ (8000488 <MX_GPIO_Init+0x2c>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000466:	4a08      	ldr	r2, [pc, #32]	@ (8000488 <MX_GPIO_Init+0x2c>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800046e:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_GPIO_Init+0x2c>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <Error_Handler+0x8>

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <HAL_MspInit+0x44>)
 80004a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004a2:	4a0e      	ldr	r2, [pc, #56]	@ (80004dc <HAL_MspInit+0x44>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80004aa:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <HAL_MspInit+0x44>)
 80004ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <HAL_MspInit+0x44>)
 80004b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ba:	4a08      	ldr	r2, [pc, #32]	@ (80004dc <HAL_MspInit+0x44>)
 80004bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80004c2:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <HAL_MspInit+0x44>)
 80004c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004ce:	f001 fb2b 	bl	8001b28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b09e      	sub	sp, #120	@ 0x78
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	2254      	movs	r2, #84	@ 0x54
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f002 fa65 	bl	80029d0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a24      	ldr	r2, [pc, #144]	@ (800059c <HAL_FDCAN_MspInit+0xbc>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d141      	bne.n	8000594 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000514:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000516:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800051a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4618      	mov	r0, r3
 8000522:	f002 f807 	bl	8002534 <HAL_RCCEx_PeriphCLKConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800052c:	f7ff ffae 	bl	800048c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000530:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <HAL_FDCAN_MspInit+0xc0>)
 8000532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000534:	4a1a      	ldr	r2, [pc, #104]	@ (80005a0 <HAL_FDCAN_MspInit+0xc0>)
 8000536:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800053a:	6593      	str	r3, [r2, #88]	@ 0x58
 800053c:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <HAL_FDCAN_MspInit+0xc0>)
 800053e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <HAL_FDCAN_MspInit+0xc0>)
 800054a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054c:	4a14      	ldr	r2, [pc, #80]	@ (80005a0 <HAL_FDCAN_MspInit+0xc0>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000554:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <HAL_FDCAN_MspInit+0xc0>)
 8000556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000560:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000564:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000566:	2302      	movs	r3, #2
 8000568:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2300      	movs	r3, #0
 8000570:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000572:	2309      	movs	r3, #9
 8000574:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800057a:	4619      	mov	r1, r3
 800057c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000580:	f001 f8ac 	bl	80016dc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	2015      	movs	r0, #21
 800058a:	f000 f9ee 	bl	800096a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800058e:	2015      	movs	r0, #21
 8000590:	f000 fa05 	bl	800099e <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000594:	bf00      	nop
 8000596:	3778      	adds	r7, #120	@ 0x78
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40006400 	.word	0x40006400
 80005a0:	40021000 	.word	0x40021000

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <NMI_Handler+0x4>

080005ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <HardFault_Handler+0x4>

080005b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <MemManage_Handler+0x4>

080005bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <BusFault_Handler+0x4>

080005c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <UsageFault_Handler+0x4>

080005cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fa:	f000 f89b 	bl	8000734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <FDCAN1_IT0_IRQHandler+0x10>)
 800060a:	f000 fdf1 	bl	80011f0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000028 	.word	0x20000028

08000618 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <SystemInit+0x20>)
 800061e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000622:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <SystemInit+0x20>)
 8000624:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000628:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800063e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000640:	f7ff ffea 	bl	8000618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000644:	480c      	ldr	r0, [pc, #48]	@ (8000678 <LoopForever+0x6>)
  ldr r1, =_edata
 8000646:	490d      	ldr	r1, [pc, #52]	@ (800067c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000648:	4a0d      	ldr	r2, [pc, #52]	@ (8000680 <LoopForever+0xe>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800064c:	e002      	b.n	8000654 <LoopCopyDataInit>

0800064e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000652:	3304      	adds	r3, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000658:	d3f9      	bcc.n	800064e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065a:	4a0a      	ldr	r2, [pc, #40]	@ (8000684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800065c:	4c0a      	ldr	r4, [pc, #40]	@ (8000688 <LoopForever+0x16>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000660:	e001      	b.n	8000666 <LoopFillZerobss>

08000662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000664:	3204      	adds	r2, #4

08000666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000668:	d3fb      	bcc.n	8000662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066a:	f002 f9b9 	bl	80029e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800066e:	f7ff fdf3 	bl	8000258 <main>

08000672 <LoopForever>:

LoopForever:
    b LoopForever
 8000672:	e7fe      	b.n	8000672 <LoopForever>
  ldr   r0, =_estack
 8000674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000680:	08002a68 	.word	0x08002a68
  ldr r2, =_sbss
 8000684:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000688:	200000f0 	.word	0x200000f0

0800068c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC1_2_IRQHandler>

0800068e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000694:	2300      	movs	r3, #0
 8000696:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f95b 	bl	8000954 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 f80e 	bl	80006c0 <HAL_InitTick>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	e001      	b.n	80006b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006b0:	f7ff fef2 	bl	8000498 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006b4:	79fb      	ldrb	r3, [r7, #7]

}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006cc:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <HAL_InitTick+0x68>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d022      	beq.n	800071a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <HAL_InitTick+0x6c>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <HAL_InitTick+0x68>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80006e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f966 	bl	80009ba <HAL_SYSTICK_Config>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10f      	bne.n	8000714 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b0f      	cmp	r3, #15
 80006f8:	d809      	bhi.n	800070e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fa:	2200      	movs	r2, #0
 80006fc:	6879      	ldr	r1, [r7, #4]
 80006fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000702:	f000 f932 	bl	800096a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000706:	4a0a      	ldr	r2, [pc, #40]	@ (8000730 <HAL_InitTick+0x70>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	e007      	b.n	800071e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	e004      	b.n	800071e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e001      	b.n	800071e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000008 	.word	0x20000008
 800072c:	20000000 	.word	0x20000000
 8000730:	20000004 	.word	0x20000004

08000734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <HAL_IncTick+0x1c>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <HAL_IncTick+0x20>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4413      	add	r3, r2
 8000742:	4a03      	ldr	r2, [pc, #12]	@ (8000750 <HAL_IncTick+0x1c>)
 8000744:	6013      	str	r3, [r2, #0]
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	200000ec 	.word	0x200000ec
 8000754:	20000008 	.word	0x20000008

08000758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTick;
 800075c:	4b03      	ldr	r3, [pc, #12]	@ (800076c <HAL_GetTick+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	200000ec 	.word	0x200000ec

08000770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000778:	f7ff ffee 	bl	8000758 <HAL_GetTick>
 800077c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000788:	d004      	beq.n	8000794 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <HAL_Delay+0x40>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	4413      	add	r3, r2
 8000792:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000794:	bf00      	nop
 8000796:	f7ff ffdf 	bl	8000758 <HAL_GetTick>
 800079a:	4602      	mov	r2, r0
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d8f7      	bhi.n	8000796 <HAL_Delay+0x26>
  {
  }
}
 80007a6:	bf00      	nop
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000008 	.word	0x20000008

080007b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e6:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	60d3      	str	r3, [r2, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000800:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <__NVIC_GetPriorityGrouping+0x18>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	f003 0307 	and.w	r3, r3, #7
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	2b00      	cmp	r3, #0
 8000828:	db0b      	blt.n	8000842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f003 021f 	and.w	r2, r3, #31
 8000830:	4907      	ldr	r1, [pc, #28]	@ (8000850 <__NVIC_EnableIRQ+0x38>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	095b      	lsrs	r3, r3, #5
 8000838:	2001      	movs	r0, #1
 800083a:	fa00 f202 	lsl.w	r2, r0, r2
 800083e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000e100 	.word	0xe000e100

08000854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	db0a      	blt.n	800087e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	490c      	ldr	r1, [pc, #48]	@ (80008a0 <__NVIC_SetPriority+0x4c>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	0112      	lsls	r2, r2, #4
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	440b      	add	r3, r1
 8000878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800087c:	e00a      	b.n	8000894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4908      	ldr	r1, [pc, #32]	@ (80008a4 <__NVIC_SetPriority+0x50>)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	f003 030f 	and.w	r3, r3, #15
 800088a:	3b04      	subs	r3, #4
 800088c:	0112      	lsls	r2, r2, #4
 800088e:	b2d2      	uxtb	r2, r2
 8000890:	440b      	add	r3, r1
 8000892:	761a      	strb	r2, [r3, #24]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000e100 	.word	0xe000e100
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b089      	sub	sp, #36	@ 0x24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	f1c3 0307 	rsb	r3, r3, #7
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	bf28      	it	cs
 80008c6:	2304      	movcs	r3, #4
 80008c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3304      	adds	r3, #4
 80008ce:	2b06      	cmp	r3, #6
 80008d0:	d902      	bls.n	80008d8 <NVIC_EncodePriority+0x30>
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3b03      	subs	r3, #3
 80008d6:	e000      	b.n	80008da <NVIC_EncodePriority+0x32>
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	f04f 32ff 	mov.w	r2, #4294967295
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43da      	mvns	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	401a      	ands	r2, r3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f0:	f04f 31ff 	mov.w	r1, #4294967295
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	43d9      	mvns	r1, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	4313      	orrs	r3, r2
         );
}
 8000902:	4618      	mov	r0, r3
 8000904:	3724      	adds	r7, #36	@ 0x24
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000920:	d301      	bcc.n	8000926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000922:	2301      	movs	r3, #1
 8000924:	e00f      	b.n	8000946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <SysTick_Config+0x40>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092e:	210f      	movs	r1, #15
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f7ff ff8e 	bl	8000854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <SysTick_Config+0x40>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093e:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <SysTick_Config+0x40>)
 8000940:	2207      	movs	r2, #7
 8000942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	e000e010 	.word	0xe000e010

08000954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ff29 	bl	80007b4 <__NVIC_SetPriorityGrouping>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000978:	f7ff ff40 	bl	80007fc <__NVIC_GetPriorityGrouping>
 800097c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	6978      	ldr	r0, [r7, #20]
 8000984:	f7ff ff90 	bl	80008a8 <NVIC_EncodePriority>
 8000988:	4602      	mov	r2, r0
 800098a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff5f 	bl	8000854 <__NVIC_SetPriority>
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff33 	bl	8000818 <__NVIC_EnableIRQ>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffa4 	bl	8000910 <SysTick_Config>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e147      	b.n	8000c76 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d106      	bne.n	8000a00 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fd70 	bl	80004e0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	699a      	ldr	r2, [r3, #24]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 0210 	bic.w	r2, r2, #16
 8000a0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a10:	f7ff fea2 	bl	8000758 <HAL_GetTick>
 8000a14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000a16:	e012      	b.n	8000a3e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000a18:	f7ff fe9e 	bl	8000758 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b0a      	cmp	r3, #10
 8000a24:	d90b      	bls.n	8000a3e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2a:	f043 0201 	orr.w	r2, r3, #1
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2203      	movs	r2, #3
 8000a36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e11b      	b.n	8000c76 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	2b08      	cmp	r3, #8
 8000a4a:	d0e5      	beq.n	8000a18 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	699a      	ldr	r2, [r3, #24]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f042 0201 	orr.w	r2, r2, #1
 8000a5a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a5c:	f7ff fe7c 	bl	8000758 <HAL_GetTick>
 8000a60:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000a62:	e012      	b.n	8000a8a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000a64:	f7ff fe78 	bl	8000758 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2b0a      	cmp	r3, #10
 8000a70:	d90b      	bls.n	8000a8a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a76:	f043 0201 	orr.w	r2, r3, #1
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2203      	movs	r2, #3
 8000a82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e0f5      	b.n	8000c76 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0e5      	beq.n	8000a64 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	699a      	ldr	r2, [r3, #24]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 0202 	orr.w	r2, r2, #2
 8000aa6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a74      	ldr	r2, [pc, #464]	@ (8000c80 <HAL_FDCAN_Init+0x2ac>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d103      	bne.n	8000aba <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000ab2:	4a74      	ldr	r2, [pc, #464]	@ (8000c84 <HAL_FDCAN_Init+0x2b0>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7c1b      	ldrb	r3, [r3, #16]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d108      	bne.n	8000ad4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	699a      	ldr	r2, [r3, #24]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ad0:	619a      	str	r2, [r3, #24]
 8000ad2:	e007      	b.n	8000ae4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	699a      	ldr	r2, [r3, #24]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ae2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7c5b      	ldrb	r3, [r3, #17]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d108      	bne.n	8000afe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	699a      	ldr	r2, [r3, #24]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000afa:	619a      	str	r2, [r3, #24]
 8000afc:	e007      	b.n	8000b0e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	699a      	ldr	r2, [r3, #24]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000b0c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7c9b      	ldrb	r3, [r3, #18]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d108      	bne.n	8000b28 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	699a      	ldr	r2, [r3, #24]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000b24:	619a      	str	r2, [r3, #24]
 8000b26:	e007      	b.n	8000b38 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	699a      	ldr	r2, [r3, #24]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000b36:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	699a      	ldr	r2, [r3, #24]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000b5c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	691a      	ldr	r2, [r3, #16]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 0210 	bic.w	r2, r2, #16
 8000b6c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d108      	bne.n	8000b88 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	699a      	ldr	r2, [r3, #24]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f042 0204 	orr.w	r2, r2, #4
 8000b84:	619a      	str	r2, [r3, #24]
 8000b86:	e02c      	b.n	8000be2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d028      	beq.n	8000be2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d01c      	beq.n	8000bd2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	699a      	ldr	r2, [r3, #24]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ba6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	691a      	ldr	r2, [r3, #16]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 0210 	orr.w	r2, r2, #16
 8000bb6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d110      	bne.n	8000be2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	699a      	ldr	r2, [r3, #24]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f042 0220 	orr.w	r2, r2, #32
 8000bce:	619a      	str	r2, [r3, #24]
 8000bd0:	e007      	b.n	8000be2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	699a      	ldr	r2, [r3, #24]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f042 0220 	orr.w	r2, r2, #32
 8000be0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000bf2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a1b      	ldr	r3, [r3, #32]
 8000bf8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000bfa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000c0a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000c0c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000c16:	d115      	bne.n	8000c44 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c1c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c22:	3b01      	subs	r3, #1
 8000c24:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c26:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000c30:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000c40:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c42:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 fc56 	bl	800150c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40006400 	.word	0x40006400
 8000c84:	40006500 	.word	0x40006500

08000c88 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000c98:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000c9a:	7dfb      	ldrb	r3, [r7, #23]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d002      	beq.n	8000ca6 <HAL_FDCAN_ConfigFilter+0x1e>
 8000ca0:	7dfb      	ldrb	r3, [r7, #23]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d13d      	bne.n	8000d22 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d119      	bne.n	8000ce2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000cba:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000cc2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e01d      	b.n	8000d1e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	075a      	lsls	r2, r3, #29
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	079a      	lsls	r2, r3, #30
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4413      	add	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	3304      	adds	r3, #4
 8000d16:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e006      	b.n	8000d30 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d26:	f043 0202 	orr.w	r2, r3, #2
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
  }
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	371c      	adds	r7, #28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d110      	bne.n	8000d72 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2202      	movs	r2, #2
 8000d54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	699a      	ldr	r2, [r3, #24]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0201 	bic.w	r2, r2, #1
 8000d66:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e006      	b.n	8000d80 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d76:	f043 0204 	orr.w	r2, r3, #4
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
  }
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d12c      	bne.n	8000dfe <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e023      	b.n	8000e0c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f000 fc02 	bl	80015e4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dec:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000df0:	2201      	movs	r2, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	409a      	lsls	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e006      	b.n	8000e0c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e02:	f043 0208 	orr.w	r2, r3, #8
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
  }
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b08b      	sub	sp, #44	@ 0x2c
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000e2c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000e2e:	7efb      	ldrb	r3, [r7, #27]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	f040 80e8 	bne.w	8001006 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	2b40      	cmp	r3, #64	@ 0x40
 8000e3a:	d137      	bne.n	8000eac <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d107      	bne.n	8000e5c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e0db      	b.n	8001014 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e64:	0e1b      	lsrs	r3, r3, #24
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d10a      	bne.n	8000e84 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e76:	0a5b      	lsrs	r3, r3, #9
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d101      	bne.n	8000e84 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	4413      	add	r3, r2
 8000e96:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	440b      	add	r3, r1
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eaa:	e036      	b.n	8000f1a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000eb4:	f003 030f 	and.w	r3, r3, #15
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d107      	bne.n	8000ecc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e0a3      	b.n	8001014 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000ed4:	0e1b      	lsrs	r3, r3, #24
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10a      	bne.n	8000ef4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ee6:	0a1b      	lsrs	r3, r3, #8
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d101      	bne.n	8000ef4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	4413      	add	r3, r2
 8000f06:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	440b      	add	r3, r1
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d107      	bne.n	8000f3e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	0c9b      	lsrs	r3, r3, #18
 8000f34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	e005      	b.n	8000f4a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	3304      	adds	r3, #4
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8000f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	f003 020f 	and.w	r2, r3, #15
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8000f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	0e1b      	lsrs	r3, r3, #24
 8000f9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	0fda      	lsrs	r2, r3, #31
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
 8000fbe:	e00a      	b.n	8000fd6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	6a3b      	ldr	r3, [r7, #32]
 8000fc4:	441a      	add	r2, r3
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	440b      	add	r3, r1
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	623b      	str	r3, [r7, #32]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	4a11      	ldr	r2, [pc, #68]	@ (8001020 <HAL_FDCAN_GetRxMessage+0x20c>)
 8000fdc:	5cd3      	ldrb	r3, [r2, r3]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d3ec      	bcc.n	8000fc0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b40      	cmp	r3, #64	@ 0x40
 8000fea:	d105      	bne.n	8000ff8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8000ff6:	e004      	b.n	8001002 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	69fa      	ldr	r2, [r7, #28]
 8000ffe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e006      	b.n	8001014 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100a:	f043 0208 	orr.w	r2, r3, #8
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
  }
}
 8001014:	4618      	mov	r0, r3
 8001016:	372c      	adds	r7, #44	@ 0x2c
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	08002a50 	.word	0x08002a50

08001024 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001036:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d003      	beq.n	8001046 <HAL_FDCAN_ActivateNotification+0x22>
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	2b02      	cmp	r3, #2
 8001042:	f040 80c8 	bne.w	80011d6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d03b      	beq.n	80010da <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d031      	beq.n	80010da <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	2b00      	cmp	r3, #0
 8001088:	d027      	beq.n	80010da <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d01d      	beq.n	80010da <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d013      	beq.n	80010da <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d009      	beq.n	80010da <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00c      	beq.n	80010ea <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d107      	bne.n	80010ea <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 0201 	orr.w	r2, r2, #1
 80010e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d004      	beq.n	80010fe <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d13b      	bne.n	8001176 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d131      	bne.n	8001176 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	2b00      	cmp	r3, #0
 8001124:	d127      	bne.n	8001176 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	d11d      	bne.n	8001176 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	2b00      	cmp	r3, #0
 800114c:	d113      	bne.n	8001176 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00c      	beq.n	8001186 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f042 0202 	orr.w	r2, r2, #2
 8001184:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800118c:	2b00      	cmp	r3, #0
 800118e:	d009      	beq.n	80011a4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	430a      	orrs	r2, r1
 80011a0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	430a      	orrs	r2, r1
 80011be:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e006      	b.n	80011e4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	f043 0202 	orr.w	r2, r3, #2
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
  }
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	@ 0x30
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011fe:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800120a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800120c:	4013      	ands	r3, r2
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001222:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001224:	4013      	ands	r3, r2
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800122e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800123a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800123c:	4013      	ands	r3, r2
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001246:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800124a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001252:	6a3a      	ldr	r2, [r7, #32]
 8001254:	4013      	ands	r3, r2
 8001256:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800125e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001262:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	4013      	ands	r3, r2
 800126e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001276:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800127e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00b      	beq.n	80012a2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2240      	movs	r2, #64	@ 0x40
 800129a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f916 	bl	80014ce <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d019      	beq.n	80012e0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d014      	beq.n	80012e0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012be:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80012d8:	6939      	ldr	r1, [r7, #16]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f8d8 	bl	8001490 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80012e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012ec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80012ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f8a2 	bl	800143a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80012f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001302:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001304:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7fe ff86 	bl	8000218 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001318:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800131a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f897 	bl	8001450 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800133e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f890 	bl	8001466 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134c:	2b00      	cmp	r3, #0
 800134e:	d018      	beq.n	8001382 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001356:	2b00      	cmp	r3, #0
 8001358:	d013      	beq.n	8001382 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001362:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2280      	movs	r2, #128	@ 0x80
 8001378:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800137a:	68f9      	ldr	r1, [r7, #12]
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f87c 	bl	800147a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00c      	beq.n	80013a6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800139e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f880 	bl	80014a6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00c      	beq.n	80013ca <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f878 	bl	80014ba <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00f      	beq.n	80013f4 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00a      	beq.n	80013f4 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001402:	69f9      	ldr	r1, [r7, #28]
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f876 	bl	80014f6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d009      	beq.n	8001424 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6a3a      	ldr	r2, [r7, #32]
 8001416:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f858 	bl	80014e2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001432:	bf00      	nop
 8001434:	3730      	adds	r7, #48	@ 0x30
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001514:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001516:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2f      	ldr	r2, [pc, #188]	@ (80015dc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d103      	bne.n	800152a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001528:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a2c      	ldr	r2, [pc, #176]	@ (80015e0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d103      	bne.n	800153c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800153a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800154a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001552:	041a      	lsls	r2, r3, #16
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001570:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001578:	061a      	lsls	r2, r3, #24
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	e005      	b.n	80015be <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3304      	adds	r3, #4
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d3f3      	bcc.n	80015b2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	4000a400 	.word	0x4000a400
 80015dc:	40006800 	.word	0x40006800
 80015e0:	40006c00 	.word	0x40006c00

080015e4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	@ 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10a      	bne.n	8001610 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001602:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800160a:	4313      	orrs	r3, r2
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	e00a      	b.n	8001626 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001618:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800161e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001620:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001624:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001630:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001636:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800163c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	4613      	mov	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	3304      	adds	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	3304      	adds	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e020      	b.n	80016ba <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3303      	adds	r3, #3
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3302      	adds	r3, #2
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	440b      	add	r3, r1
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001690:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	440b      	add	r3, r1
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800169e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	440a      	add	r2, r1
 80016a6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80016a8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	3304      	adds	r3, #4
 80016b2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3304      	adds	r3, #4
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	4a06      	ldr	r2, [pc, #24]	@ (80016d8 <FDCAN_CopyMessageToRAM+0xf4>)
 80016c0:	5cd3      	ldrb	r3, [r2, r3]
 80016c2:	461a      	mov	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d3d6      	bcc.n	8001678 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	3724      	adds	r7, #36	@ 0x24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	08002a50 	.word	0x08002a50

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016ea:	e15a      	b.n	80019a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 814c 	beq.w	800199c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d005      	beq.n	800171c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001718:	2b02      	cmp	r3, #2
 800171a:	d130      	bne.n	800177e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001752:	2201      	movs	r2, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	f003 0201 	and.w	r2, r3, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b03      	cmp	r3, #3
 8001788:	d017      	beq.n	80017ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d123      	bne.n	800180e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	6939      	ldr	r1, [r7, #16]
 800180a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0203 	and.w	r2, r3, #3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 80a6 	beq.w	800199c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001850:	4b5b      	ldr	r3, [pc, #364]	@ (80019c0 <HAL_GPIO_Init+0x2e4>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001854:	4a5a      	ldr	r2, [pc, #360]	@ (80019c0 <HAL_GPIO_Init+0x2e4>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6613      	str	r3, [r2, #96]	@ 0x60
 800185c:	4b58      	ldr	r3, [pc, #352]	@ (80019c0 <HAL_GPIO_Init+0x2e4>)
 800185e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001868:	4a56      	ldr	r2, [pc, #344]	@ (80019c4 <HAL_GPIO_Init+0x2e8>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001892:	d01f      	beq.n	80018d4 <HAL_GPIO_Init+0x1f8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a4c      	ldr	r2, [pc, #304]	@ (80019c8 <HAL_GPIO_Init+0x2ec>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d019      	beq.n	80018d0 <HAL_GPIO_Init+0x1f4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a4b      	ldr	r2, [pc, #300]	@ (80019cc <HAL_GPIO_Init+0x2f0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d013      	beq.n	80018cc <HAL_GPIO_Init+0x1f0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a4a      	ldr	r2, [pc, #296]	@ (80019d0 <HAL_GPIO_Init+0x2f4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00d      	beq.n	80018c8 <HAL_GPIO_Init+0x1ec>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a49      	ldr	r2, [pc, #292]	@ (80019d4 <HAL_GPIO_Init+0x2f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x1e8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a48      	ldr	r2, [pc, #288]	@ (80019d8 <HAL_GPIO_Init+0x2fc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_GPIO_Init+0x1e4>
 80018bc:	2305      	movs	r3, #5
 80018be:	e00a      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018c0:	2306      	movs	r3, #6
 80018c2:	e008      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018c4:	2304      	movs	r3, #4
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e004      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018d4:	2300      	movs	r3, #0
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4093      	lsls	r3, r2
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e6:	4937      	ldr	r1, [pc, #220]	@ (80019c4 <HAL_GPIO_Init+0x2e8>)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f4:	4b39      	ldr	r3, [pc, #228]	@ (80019dc <HAL_GPIO_Init+0x300>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001918:	4a30      	ldr	r2, [pc, #192]	@ (80019dc <HAL_GPIO_Init+0x300>)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800191e:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <HAL_GPIO_Init+0x300>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001942:	4a26      	ldr	r2, [pc, #152]	@ (80019dc <HAL_GPIO_Init+0x300>)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001948:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <HAL_GPIO_Init+0x300>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800196c:	4a1b      	ldr	r2, [pc, #108]	@ (80019dc <HAL_GPIO_Init+0x300>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001972:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <HAL_GPIO_Init+0x300>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001996:	4a11      	ldr	r2, [pc, #68]	@ (80019dc <HAL_GPIO_Init+0x300>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f47f ae9d 	bne.w	80016ec <HAL_GPIO_Init+0x10>
  }
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	48000400 	.word	0x48000400
 80019cc:	48000800 	.word	0x48000800
 80019d0:	48000c00 	.word	0x48000c00
 80019d4:	48001000 	.word	0x48001000
 80019d8:	48001400 	.word	0x48001400
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d141      	bne.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ee:	4b4b      	ldr	r3, [pc, #300]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019fa:	d131      	bne.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019fc:	4b47      	ldr	r3, [pc, #284]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a02:	4a46      	ldr	r2, [pc, #280]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0c:	4b43      	ldr	r3, [pc, #268]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a14:	4a41      	ldr	r2, [pc, #260]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a1c:	4b40      	ldr	r3, [pc, #256]	@ (8001b20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2232      	movs	r2, #50	@ 0x32
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4a3f      	ldr	r2, [pc, #252]	@ (8001b24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	0c9b      	lsrs	r3, r3, #18
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a32:	e002      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a3a:	4b38      	ldr	r3, [pc, #224]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a46:	d102      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f2      	bne.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a4e:	4b33      	ldr	r3, [pc, #204]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a5a:	d158      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e057      	b.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a60:	4b2e      	ldr	r3, [pc, #184]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a66:	4a2d      	ldr	r2, [pc, #180]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a70:	e04d      	b.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a78:	d141      	bne.n	8001afe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7a:	4b28      	ldr	r3, [pc, #160]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a86:	d131      	bne.n	8001aec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a88:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a8e:	4a23      	ldr	r2, [pc, #140]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a98:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2232      	movs	r2, #50	@ 0x32
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	0c9b      	lsrs	r3, r3, #18
 8001aba:	3301      	adds	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001abe:	e002      	b.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad2:	d102      	bne.n	8001ada <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f2      	bne.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ae6:	d112      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e011      	b.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001af2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001afc:	e007      	b.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001afe:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b06:	4a05      	ldr	r2, [pc, #20]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	20000000 	.word	0x20000000
 8001b24:	431bde83 	.word	0x431bde83

08001b28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b36:	6093      	str	r3, [r2, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40007000 	.word	0x40007000

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e2fe      	b.n	8002158 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d075      	beq.n	8001c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b66:	4b97      	ldr	r3, [pc, #604]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b70:	4b94      	ldr	r3, [pc, #592]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3e>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d002      	beq.n	8001b8c <HAL_RCC_OscConfig+0x44>
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	4b8d      	ldr	r3, [pc, #564]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d05b      	beq.n	8001c50 <HAL_RCC_OscConfig+0x108>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d157      	bne.n	8001c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e2d9      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bac:	d106      	bne.n	8001bbc <HAL_RCC_OscConfig+0x74>
 8001bae:	4b85      	ldr	r3, [pc, #532]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a84      	ldr	r2, [pc, #528]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e01d      	b.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x98>
 8001bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a7e      	ldr	r2, [pc, #504]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a7b      	ldr	r2, [pc, #492]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001be0:	4b78      	ldr	r3, [pc, #480]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a77      	ldr	r2, [pc, #476]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b75      	ldr	r3, [pc, #468]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a74      	ldr	r2, [pc, #464]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7fe fdaa 	bl	8000758 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c08:	f7fe fda6 	bl	8000758 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	@ 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e29e      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0xc0>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7fe fd96 	bl	8000758 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7fe fd92 	bl	8000758 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	@ 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e28a      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c42:	4b60      	ldr	r3, [pc, #384]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0xe8>
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d075      	beq.n	8001d4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c5e:	4b59      	ldr	r3, [pc, #356]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c68:	4b56      	ldr	r3, [pc, #344]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b0c      	cmp	r3, #12
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_OscConfig+0x136>
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_OscConfig+0x13c>
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d11f      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c84:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_OscConfig+0x154>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e25d      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b49      	ldr	r3, [pc, #292]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	4946      	ldr	r1, [pc, #280]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cb0:	4b45      	ldr	r3, [pc, #276]	@ (8001dc8 <HAL_RCC_OscConfig+0x280>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fd03 	bl	80006c0 <HAL_InitTick>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d043      	beq.n	8001d48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e249      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d023      	beq.n	8001d14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a3c      	ldr	r2, [pc, #240]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7fe fd3e 	bl	8000758 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7fe fd3a 	bl	8000758 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e232      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf2:	4b34      	ldr	r3, [pc, #208]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfe:	4b31      	ldr	r3, [pc, #196]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	061b      	lsls	r3, r3, #24
 8001d0c:	492d      	ldr	r1, [pc, #180]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
 8001d12:	e01a      	b.n	8001d4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d14:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a2a      	ldr	r2, [pc, #168]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7fe fd1a 	bl	8000758 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d28:	f7fe fd16 	bl	8000758 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e20e      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d3a:	4b22      	ldr	r3, [pc, #136]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1e0>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d041      	beq.n	8001dda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5e:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d64:	4a17      	ldr	r2, [pc, #92]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6e:	f7fe fcf3 	bl	8000758 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d76:	f7fe fcef 	bl	8000758 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1e7      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d88:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0ef      	beq.n	8001d76 <HAL_RCC_OscConfig+0x22e>
 8001d96:	e020      	b.n	8001dda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d9e:	4a09      	ldr	r2, [pc, #36]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7fe fcd6 	bl	8000758 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dae:	e00d      	b.n	8001dcc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db0:	f7fe fcd2 	bl	8000758 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d906      	bls.n	8001dcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1ca      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1ea      	bne.n	8001db0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80a6 	beq.w	8001f34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dec:	4b84      	ldr	r3, [pc, #528]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_OscConfig+0x2b4>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x2b6>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00d      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	4b7f      	ldr	r3, [pc, #508]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e06:	4a7e      	ldr	r2, [pc, #504]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e1e:	4b79      	ldr	r3, [pc, #484]	@ (8002004 <HAL_RCC_OscConfig+0x4bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e2a:	4b76      	ldr	r3, [pc, #472]	@ (8002004 <HAL_RCC_OscConfig+0x4bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a75      	ldr	r2, [pc, #468]	@ (8002004 <HAL_RCC_OscConfig+0x4bc>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e36:	f7fe fc8f 	bl	8000758 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3e:	f7fe fc8b 	bl	8000758 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e183      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e50:	4b6c      	ldr	r3, [pc, #432]	@ (8002004 <HAL_RCC_OscConfig+0x4bc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d108      	bne.n	8001e76 <HAL_RCC_OscConfig+0x32e>
 8001e64:	4b66      	ldr	r3, [pc, #408]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6a:	4a65      	ldr	r2, [pc, #404]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e74:	e024      	b.n	8001ec0 <HAL_RCC_OscConfig+0x378>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d110      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x358>
 8001e7e:	4b60      	ldr	r3, [pc, #384]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e84:	4a5e      	ldr	r2, [pc, #376]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e8e:	4b5c      	ldr	r3, [pc, #368]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e94:	4a5a      	ldr	r2, [pc, #360]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e9e:	e00f      	b.n	8001ec0 <HAL_RCC_OscConfig+0x378>
 8001ea0:	4b57      	ldr	r3, [pc, #348]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea6:	4a56      	ldr	r2, [pc, #344]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eb0:	4b53      	ldr	r3, [pc, #332]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb6:	4a52      	ldr	r2, [pc, #328]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d016      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7fe fc46 	bl	8000758 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7fe fc42 	bl	8000758 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e138      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee6:	4b46      	ldr	r3, [pc, #280]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ed      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x388>
 8001ef4:	e015      	b.n	8001f22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7fe fc2f 	bl	8000758 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe fc2b 	bl	8000758 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e121      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f14:	4b3a      	ldr	r3, [pc, #232]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1ed      	bne.n	8001efe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f22:	7ffb      	ldrb	r3, [r7, #31]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f28:	4b35      	ldr	r3, [pc, #212]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	4a34      	ldr	r2, [pc, #208]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d03c      	beq.n	8001fba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f48:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7fe fbfe 	bl	8000758 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f60:	f7fe fbfa 	bl	8000758 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e0f2      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f72:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ef      	beq.n	8001f60 <HAL_RCC_OscConfig+0x418>
 8001f80:	e01b      	b.n	8001fba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f82:	4b1f      	ldr	r3, [pc, #124]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f88:	4a1d      	ldr	r2, [pc, #116]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f92:	f7fe fbe1 	bl	8000758 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f9a:	f7fe fbdd 	bl	8000758 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0d5      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fac:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ef      	bne.n	8001f9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80c9 	beq.w	8002156 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b0c      	cmp	r3, #12
 8001fce:	f000 8083 	beq.w	80020d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d15e      	bne.n	8002098 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a08      	ldr	r2, [pc, #32]	@ (8002000 <HAL_RCC_OscConfig+0x4b8>)
 8001fe0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fbb7 	bl	8000758 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fec:	e00c      	b.n	8002008 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7fe fbb3 	bl	8000758 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d905      	bls.n	8002008 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0ab      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002008:	4b55      	ldr	r3, [pc, #340]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ec      	bne.n	8001fee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002014:	4b52      	ldr	r3, [pc, #328]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	4b52      	ldr	r3, [pc, #328]	@ (8002164 <HAL_RCC_OscConfig+0x61c>)
 800201a:	4013      	ands	r3, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6a11      	ldr	r1, [r2, #32]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002024:	3a01      	subs	r2, #1
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800202e:	0212      	lsls	r2, r2, #8
 8002030:	4311      	orrs	r1, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002036:	0852      	lsrs	r2, r2, #1
 8002038:	3a01      	subs	r2, #1
 800203a:	0552      	lsls	r2, r2, #21
 800203c:	4311      	orrs	r1, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002042:	0852      	lsrs	r2, r2, #1
 8002044:	3a01      	subs	r2, #1
 8002046:	0652      	lsls	r2, r2, #25
 8002048:	4311      	orrs	r1, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800204e:	06d2      	lsls	r2, r2, #27
 8002050:	430a      	orrs	r2, r1
 8002052:	4943      	ldr	r1, [pc, #268]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 8002054:	4313      	orrs	r3, r2
 8002056:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002058:	4b41      	ldr	r3, [pc, #260]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a40      	ldr	r2, [pc, #256]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 800205e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002062:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002064:	4b3e      	ldr	r3, [pc, #248]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a3d      	ldr	r2, [pc, #244]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 800206a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800206e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe fb72 	bl	8000758 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002078:	f7fe fb6e 	bl	8000758 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e066      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	4b35      	ldr	r3, [pc, #212]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x530>
 8002096:	e05e      	b.n	8002156 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002098:	4b31      	ldr	r3, [pc, #196]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a30      	ldr	r2, [pc, #192]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 800209e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe fb58 	bl	8000758 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7fe fb54 	bl	8000758 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e04c      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020be:	4b28      	ldr	r3, [pc, #160]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020ca:	4b25      	ldr	r3, [pc, #148]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	4924      	ldr	r1, [pc, #144]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 80020d0:	4b25      	ldr	r3, [pc, #148]	@ (8002168 <HAL_RCC_OscConfig+0x620>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	60cb      	str	r3, [r1, #12]
 80020d6:	e03e      	b.n	8002156 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e039      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <HAL_RCC_OscConfig+0x618>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d12c      	bne.n	8002152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	3b01      	subs	r3, #1
 8002104:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d123      	bne.n	8002152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d11b      	bne.n	8002152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d113      	bne.n	8002152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	085b      	lsrs	r3, r3, #1
 8002136:	3b01      	subs	r3, #1
 8002138:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d109      	bne.n	8002152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	3b01      	subs	r3, #1
 800214c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3720      	adds	r7, #32
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	019f800c 	.word	0x019f800c
 8002168:	feeefffc 	.word	0xfeeefffc

0800216c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e11e      	b.n	80023c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b91      	ldr	r3, [pc, #580]	@ (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b8e      	ldr	r3, [pc, #568]	@ (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 020f 	bic.w	r2, r3, #15
 800219a:	498c      	ldr	r1, [pc, #560]	@ (80023cc <HAL_RCC_ClockConfig+0x260>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b8a      	ldr	r3, [pc, #552]	@ (80023cc <HAL_RCC_ClockConfig+0x260>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e106      	b.n	80023c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d073      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d129      	bne.n	800221c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c8:	4b81      	ldr	r3, [pc, #516]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0f4      	b.n	80023c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021d8:	f000 f966 	bl	80024a8 <RCC_GetSysClockFreqFromPLLSource>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4a7c      	ldr	r2, [pc, #496]	@ (80023d4 <HAL_RCC_ClockConfig+0x268>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d93f      	bls.n	8002266 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021e6:	4b7a      	ldr	r3, [pc, #488]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d033      	beq.n	8002266 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d12f      	bne.n	8002266 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002206:	4b72      	ldr	r3, [pc, #456]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800220e:	4a70      	ldr	r2, [pc, #448]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002214:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002216:	2380      	movs	r3, #128	@ 0x80
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e024      	b.n	8002266 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d107      	bne.n	8002234 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002224:	4b6a      	ldr	r3, [pc, #424]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0c6      	b.n	80023c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002234:	4b66      	ldr	r3, [pc, #408]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0be      	b.n	80023c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002244:	f000 f8ce 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 8002248:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4a61      	ldr	r2, [pc, #388]	@ (80023d4 <HAL_RCC_ClockConfig+0x268>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d909      	bls.n	8002266 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002252:	4b5f      	ldr	r3, [pc, #380]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800225a:	4a5d      	ldr	r2, [pc, #372]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 800225c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002260:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b5a      	ldr	r3, [pc, #360]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4957      	ldr	r1, [pc, #348]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002274:	4313      	orrs	r3, r2
 8002276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002278:	f7fe fa6e 	bl	8000758 <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7fe fa6a 	bl	8000758 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e095      	b.n	80023c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b4e      	ldr	r3, [pc, #312]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d023      	beq.n	80022fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c0:	4b43      	ldr	r3, [pc, #268]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4a42      	ldr	r2, [pc, #264]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 80022c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022d8:	4b3d      	ldr	r3, [pc, #244]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80022e0:	4a3b      	ldr	r2, [pc, #236]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 80022e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b39      	ldr	r3, [pc, #228]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4936      	ldr	r1, [pc, #216]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
 80022fa:	e008      	b.n	800230e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b80      	cmp	r3, #128	@ 0x80
 8002300:	d105      	bne.n	800230e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002302:	4b33      	ldr	r3, [pc, #204]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4a32      	ldr	r2, [pc, #200]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002308:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800230c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800230e:	4b2f      	ldr	r3, [pc, #188]	@ (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d21d      	bcs.n	8002358 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231c:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_RCC_ClockConfig+0x260>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 020f 	bic.w	r2, r3, #15
 8002324:	4929      	ldr	r1, [pc, #164]	@ (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800232c:	f7fe fa14 	bl	8000758 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7fe fa10 	bl	8000758 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e03b      	b.n	80023c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <HAL_RCC_ClockConfig+0x260>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d1ed      	bne.n	8002334 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002364:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4917      	ldr	r1, [pc, #92]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002382:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	490f      	ldr	r1, [pc, #60]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002396:	f000 f825 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 800239a:	4602      	mov	r2, r0
 800239c:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <HAL_RCC_ClockConfig+0x264>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	490c      	ldr	r1, [pc, #48]	@ (80023d8 <HAL_RCC_ClockConfig+0x26c>)
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <HAL_RCC_ClockConfig+0x270>)
 80023b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023b6:	4b0a      	ldr	r3, [pc, #40]	@ (80023e0 <HAL_RCC_ClockConfig+0x274>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f980 	bl	80006c0 <HAL_InitTick>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40022000 	.word	0x40022000
 80023d0:	40021000 	.word	0x40021000
 80023d4:	04c4b400 	.word	0x04c4b400
 80023d8:	08002a40 	.word	0x08002a40
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000004 	.word	0x20000004

080023e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023ea:	4b2c      	ldr	r3, [pc, #176]	@ (800249c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d102      	bne.n	80023fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023f6:	4b2a      	ldr	r3, [pc, #168]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	e047      	b.n	800248c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023fc:	4b27      	ldr	r3, [pc, #156]	@ (800249c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d102      	bne.n	800240e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002408:	4b26      	ldr	r3, [pc, #152]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	e03e      	b.n	800248c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800240e:	4b23      	ldr	r3, [pc, #140]	@ (800249c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d136      	bne.n	8002488 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800241a:	4b20      	ldr	r3, [pc, #128]	@ (800249c <HAL_RCC_GetSysClockFreq+0xb8>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002424:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3301      	adds	r3, #1
 8002430:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d10c      	bne.n	8002452 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002438:	4a1a      	ldr	r2, [pc, #104]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	4a16      	ldr	r2, [pc, #88]	@ (800249c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002442:	68d2      	ldr	r2, [r2, #12]
 8002444:	0a12      	lsrs	r2, r2, #8
 8002446:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	617b      	str	r3, [r7, #20]
      break;
 8002450:	e00c      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002452:	4a13      	ldr	r2, [pc, #76]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	4a10      	ldr	r2, [pc, #64]	@ (800249c <HAL_RCC_GetSysClockFreq+0xb8>)
 800245c:	68d2      	ldr	r2, [r2, #12]
 800245e:	0a12      	lsrs	r2, r2, #8
 8002460:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
      break;
 800246a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800246c:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <HAL_RCC_GetSysClockFreq+0xb8>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0e5b      	lsrs	r3, r3, #25
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	3301      	adds	r3, #1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	e001      	b.n	800248c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800248c:	693b      	ldr	r3, [r7, #16]
}
 800248e:	4618      	mov	r0, r3
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
 80024a0:	00f42400 	.word	0x00f42400
 80024a4:	016e3600 	.word	0x016e3600

080024a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002528 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	3301      	adds	r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d10c      	bne.n	80024e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024cc:	4a17      	ldr	r2, [pc, #92]	@ (800252c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	4a14      	ldr	r2, [pc, #80]	@ (8002528 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024d6:	68d2      	ldr	r2, [r2, #12]
 80024d8:	0a12      	lsrs	r2, r2, #8
 80024da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	617b      	str	r3, [r7, #20]
    break;
 80024e4:	e00c      	b.n	8002500 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024e6:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002528 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024f0:	68d2      	ldr	r2, [r2, #12]
 80024f2:	0a12      	lsrs	r2, r2, #8
 80024f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]
    break;
 80024fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002500:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	0e5b      	lsrs	r3, r3, #25
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	3301      	adds	r3, #1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	fbb2 f3f3 	udiv	r3, r2, r3
 8002518:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800251a:	687b      	ldr	r3, [r7, #4]
}
 800251c:	4618      	mov	r0, r3
 800251e:	371c      	adds	r7, #28
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40021000 	.word	0x40021000
 800252c:	016e3600 	.word	0x016e3600
 8002530:	00f42400 	.word	0x00f42400

08002534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800253c:	2300      	movs	r3, #0
 800253e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002540:	2300      	movs	r3, #0
 8002542:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8098 	beq.w	8002682 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b43      	ldr	r3, [pc, #268]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b40      	ldr	r3, [pc, #256]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	4a3f      	ldr	r2, [pc, #252]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256c:	6593      	str	r3, [r2, #88]	@ 0x58
 800256e:	4b3d      	ldr	r3, [pc, #244]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800257e:	4b3a      	ldr	r3, [pc, #232]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a39      	ldr	r2, [pc, #228]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002588:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800258a:	f7fe f8e5 	bl	8000758 <HAL_GetTick>
 800258e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002590:	e009      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002592:	f7fe f8e1 	bl	8000758 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d902      	bls.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	74fb      	strb	r3, [r7, #19]
        break;
 80025a4:	e005      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025a6:	4b30      	ldr	r3, [pc, #192]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ef      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d159      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01e      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d019      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025d4:	4b23      	ldr	r3, [pc, #140]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025e0:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002600:	4a18      	ldr	r2, [pc, #96]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe f8a1 	bl	8000758 <HAL_GetTick>
 8002616:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002618:	e00b      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fe f89d 	bl	8000758 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d902      	bls.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	74fb      	strb	r3, [r7, #19]
            break;
 8002630:	e006      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002632:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ec      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002646:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002654:	4903      	ldr	r1, [pc, #12]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800265c:	e008      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	74bb      	strb	r3, [r7, #18]
 8002662:	e005      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002664:	40021000 	.word	0x40021000
 8002668:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002670:	7c7b      	ldrb	r3, [r7, #17]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d105      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4ba7      	ldr	r3, [pc, #668]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267a:	4aa6      	ldr	r2, [pc, #664]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002680:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800268e:	4ba1      	ldr	r3, [pc, #644]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002694:	f023 0203 	bic.w	r2, r3, #3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	499d      	ldr	r1, [pc, #628]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026b0:	4b98      	ldr	r3, [pc, #608]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b6:	f023 020c 	bic.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4995      	ldr	r1, [pc, #596]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026d2:	4b90      	ldr	r3, [pc, #576]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	498c      	ldr	r1, [pc, #560]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026f4:	4b87      	ldr	r3, [pc, #540]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	4984      	ldr	r1, [pc, #528]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002716:	4b7f      	ldr	r3, [pc, #508]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	497b      	ldr	r1, [pc, #492]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002738:	4b76      	ldr	r3, [pc, #472]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	4973      	ldr	r1, [pc, #460]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800275a:	4b6e      	ldr	r3, [pc, #440]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002760:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	496a      	ldr	r1, [pc, #424]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800277c:	4b65      	ldr	r3, [pc, #404]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002782:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4962      	ldr	r1, [pc, #392]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800279e:	4b5d      	ldr	r3, [pc, #372]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	4959      	ldr	r1, [pc, #356]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027c0:	4b54      	ldr	r3, [pc, #336]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027c6:	f023 0203 	bic.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	4951      	ldr	r1, [pc, #324]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	4948      	ldr	r1, [pc, #288]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d015      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002804:	4b43      	ldr	r3, [pc, #268]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	4940      	ldr	r1, [pc, #256]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002822:	d105      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002824:	4b3b      	ldr	r3, [pc, #236]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a3a      	ldr	r2, [pc, #232]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800282e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002838:	2b00      	cmp	r3, #0
 800283a:	d015      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800283c:	4b35      	ldr	r3, [pc, #212]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002842:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284a:	4932      	ldr	r1, [pc, #200]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002856:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800285a:	d105      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800285c:	4b2d      	ldr	r3, [pc, #180]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4a2c      	ldr	r2, [pc, #176]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002866:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d015      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002874:	4b27      	ldr	r3, [pc, #156]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002882:	4924      	ldr	r1, [pc, #144]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002892:	d105      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002894:	4b1f      	ldr	r3, [pc, #124]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4a1e      	ldr	r2, [pc, #120]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800289e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d015      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ac:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ba:	4916      	ldr	r1, [pc, #88]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ca:	d105      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028cc:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a10      	ldr	r2, [pc, #64]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d019      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	4908      	ldr	r1, [pc, #32]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002902:	d109      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002904:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a02      	ldr	r2, [pc, #8]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800290e:	60d3      	str	r3, [r2, #12]
 8002910:	e002      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002924:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	4926      	ldr	r1, [pc, #152]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002942:	d105      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002944:	4b21      	ldr	r3, [pc, #132]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a20      	ldr	r2, [pc, #128]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800294a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d015      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002962:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296a:	4918      	ldr	r1, [pc, #96]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800297a:	d105      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800297c:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a12      	ldr	r2, [pc, #72]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002986:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d015      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002994:	4b0d      	ldr	r3, [pc, #52]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002996:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800299a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a2:	490a      	ldr	r1, [pc, #40]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029b2:	d105      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b4:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000

080029d0 <memset>:
 80029d0:	4402      	add	r2, r0
 80029d2:	4603      	mov	r3, r0
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d100      	bne.n	80029da <memset+0xa>
 80029d8:	4770      	bx	lr
 80029da:	f803 1b01 	strb.w	r1, [r3], #1
 80029de:	e7f9      	b.n	80029d4 <memset+0x4>

080029e0 <__libc_init_array>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	4d0d      	ldr	r5, [pc, #52]	@ (8002a18 <__libc_init_array+0x38>)
 80029e4:	4c0d      	ldr	r4, [pc, #52]	@ (8002a1c <__libc_init_array+0x3c>)
 80029e6:	1b64      	subs	r4, r4, r5
 80029e8:	10a4      	asrs	r4, r4, #2
 80029ea:	2600      	movs	r6, #0
 80029ec:	42a6      	cmp	r6, r4
 80029ee:	d109      	bne.n	8002a04 <__libc_init_array+0x24>
 80029f0:	4d0b      	ldr	r5, [pc, #44]	@ (8002a20 <__libc_init_array+0x40>)
 80029f2:	4c0c      	ldr	r4, [pc, #48]	@ (8002a24 <__libc_init_array+0x44>)
 80029f4:	f000 f818 	bl	8002a28 <_init>
 80029f8:	1b64      	subs	r4, r4, r5
 80029fa:	10a4      	asrs	r4, r4, #2
 80029fc:	2600      	movs	r6, #0
 80029fe:	42a6      	cmp	r6, r4
 8002a00:	d105      	bne.n	8002a0e <__libc_init_array+0x2e>
 8002a02:	bd70      	pop	{r4, r5, r6, pc}
 8002a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a08:	4798      	blx	r3
 8002a0a:	3601      	adds	r6, #1
 8002a0c:	e7ee      	b.n	80029ec <__libc_init_array+0xc>
 8002a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a12:	4798      	blx	r3
 8002a14:	3601      	adds	r6, #1
 8002a16:	e7f2      	b.n	80029fe <__libc_init_array+0x1e>
 8002a18:	08002a60 	.word	0x08002a60
 8002a1c:	08002a60 	.word	0x08002a60
 8002a20:	08002a60 	.word	0x08002a60
 8002a24:	08002a64 	.word	0x08002a64

08002a28 <_init>:
 8002a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2a:	bf00      	nop
 8002a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a2e:	bc08      	pop	{r3}
 8002a30:	469e      	mov	lr, r3
 8002a32:	4770      	bx	lr

08002a34 <_fini>:
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	bf00      	nop
 8002a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a3a:	bc08      	pop	{r3}
 8002a3c:	469e      	mov	lr, r3
 8002a3e:	4770      	bx	lr
