
RtosEx02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dc0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08006f50  08006f50  00007f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800704c  0800704c  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  0800704c  0800704c  0000804c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007054  08007054  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007054  08007054  00008054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007058  08007058  00008058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800705c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be4  20000060  080070bc  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c44  080070bc  00009c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa6b  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003559  00000000  00000000  00023afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  00027058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001164  00000000  00000000  000286b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032d3  00000000  00000000  00029814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fde  00000000  00000000  0002cae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc5a1  00000000  00000000  00045ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000616c  00000000  00000000  001420ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00148218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f38 	.word	0x08006f38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006f38 	.word	0x08006f38

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fa7a 	bl	80009bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f832 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8a6 	bl	800061c <MX_GPIO_Init>
  MX_UART4_Init();
 80004d0:	f000 f874 	bl	80005bc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004d4:	f003 f946 	bl	8003764 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemafaroBin */
  SemafaroBinHandle = osSemaphoreNew(1, 1, &SemafaroBin_attributes);
 80004d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000510 <main+0x50>)
 80004da:	2101      	movs	r1, #1
 80004dc:	2001      	movs	r0, #1
 80004de:	f003 fa38 	bl	8003952 <osSemaphoreNew>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000514 <main+0x54>)
 80004e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tarefa1 */
  tarefa1Handle = osThreadNew(tarefa1_fun, NULL, &tarefa1_attributes);
 80004e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000518 <main+0x58>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	480b      	ldr	r0, [pc, #44]	@ (800051c <main+0x5c>)
 80004ee:	f003 f983 	bl	80037f8 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <main+0x60>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* creation of tarefa2 */
  tarefa2Handle = osThreadNew(tarefa2_fun, NULL, &tarefa2_attributes);
 80004f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <main+0x64>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	480a      	ldr	r0, [pc, #40]	@ (8000528 <main+0x68>)
 80004fe:	f003 f97b 	bl	80037f8 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a09      	ldr	r2, [pc, #36]	@ (800052c <main+0x6c>)
 8000506:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000508:	f003 f950 	bl	80037ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <main+0x4c>
 8000510:	08006ff4 	.word	0x08006ff4
 8000514:	20000110 	.word	0x20000110
 8000518:	08006fac 	.word	0x08006fac
 800051c:	0800064d 	.word	0x0800064d
 8000520:	20000108 	.word	0x20000108
 8000524:	08006fd0 	.word	0x08006fd0
 8000528:	08000699 	.word	0x08000699
 800052c:	2000010c 	.word	0x2000010c

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	@ 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	@ 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f006 fc12 	bl	8006d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000556:	f000 fd0b 	bl	8000f70 <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 f8d2 	bl	8000708 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800056c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2310      	movs	r3, #16
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000572:	2300      	movs	r3, #0
 8000574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fd4e 	bl	800101c <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000586:	f000 f8bf 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800058e:	2301      	movs	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059e:	463b      	mov	r3, r7
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 f916 	bl	80017d4 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ae:	f000 f8ab 	bl	8000708 <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3758      	adds	r7, #88	@ 0x58
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80005c0:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <MX_UART4_Init+0x58>)
 80005c2:	4a15      	ldr	r2, [pc, #84]	@ (8000618 <MX_UART4_Init+0x5c>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <MX_UART4_Init+0x58>)
 80005c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80005cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_UART4_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_UART4_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <MX_UART4_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_UART4_Init+0x58>)
 80005e2:	2208      	movs	r2, #8
 80005e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <MX_UART4_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_UART4_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <MX_UART4_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_UART4_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_UART4_Init+0x58>)
 8000600:	f002 fac0 	bl	8002b84 <HAL_UART_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800060a:	f000 f87d 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000080 	.word	0x20000080
 8000618:	40004c00 	.word	0x40004c00

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_GPIO_Init+0x2c>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <MX_GPIO_Init+0x2c>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_GPIO_Init+0x2c>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <tarefa1_fun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_tarefa1_fun */
void tarefa1_fun(void *argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart4, "tarefa1\r\n", 9, 100);
 8000654:	2364      	movs	r3, #100	@ 0x64
 8000656:	2209      	movs	r2, #9
 8000658:	490b      	ldr	r1, [pc, #44]	@ (8000688 <tarefa1_fun+0x3c>)
 800065a:	480c      	ldr	r0, [pc, #48]	@ (800068c <tarefa1_fun+0x40>)
 800065c:	f002 fae0 	bl	8002c20 <HAL_UART_Transmit>
	  if(cont > 10){
 8000660:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <tarefa1_fun+0x44>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d904      	bls.n	8000672 <tarefa1_fun+0x26>
		  osSemaphoreRelease(SemafaroBinHandle);
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <tarefa1_fun+0x48>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f003 fa4b 	bl	8003b08 <osSemaphoreRelease>
	  }
	  cont++;
 8000672:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <tarefa1_fun+0x44>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <tarefa1_fun+0x44>)
 800067c:	701a      	strb	r2, [r3, #0]
	  osDelay(1000);
 800067e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000682:	f003 f94b 	bl	800391c <osDelay>
	  HAL_UART_Transmit(&huart4, "tarefa1\r\n", 9, 100);
 8000686:	e7e5      	b.n	8000654 <tarefa1_fun+0x8>
 8000688:	08006f6c 	.word	0x08006f6c
 800068c:	20000080 	.word	0x20000080
 8000690:	2000007c 	.word	0x2000007c
 8000694:	20000110 	.word	0x20000110

08000698 <tarefa2_fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarefa2_fun */
void tarefa2_fun(void *argument)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarefa2_fun */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart4, "tarefa2\r\n", 9, 100);
 80006a0:	2364      	movs	r3, #100	@ 0x64
 80006a2:	2209      	movs	r2, #9
 80006a4:	490b      	ldr	r1, [pc, #44]	@ (80006d4 <tarefa2_fun+0x3c>)
 80006a6:	480c      	ldr	r0, [pc, #48]	@ (80006d8 <tarefa2_fun+0x40>)
 80006a8:	f002 faba 	bl	8002c20 <HAL_UART_Transmit>
	  osSemaphoreAcquire(SemafaroBinHandle, osWaitForever);
 80006ac:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <tarefa2_fun+0x44>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f04f 31ff 	mov.w	r1, #4294967295
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 f9d5 	bl	8003a64 <osSemaphoreAcquire>
	  HAL_UART_Transmit(&huart4, "continuat2\r\n", 12, 100);
 80006ba:	2364      	movs	r3, #100	@ 0x64
 80006bc:	220c      	movs	r2, #12
 80006be:	4908      	ldr	r1, [pc, #32]	@ (80006e0 <tarefa2_fun+0x48>)
 80006c0:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <tarefa2_fun+0x40>)
 80006c2:	f002 faad 	bl	8002c20 <HAL_UART_Transmit>
	  osDelay(1000);
 80006c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ca:	f003 f927 	bl	800391c <osDelay>
	  HAL_UART_Transmit(&huart4, "tarefa2\r\n", 9, 100);
 80006ce:	bf00      	nop
 80006d0:	e7e6      	b.n	80006a0 <tarefa2_fun+0x8>
 80006d2:	bf00      	nop
 80006d4:	08006f78 	.word	0x08006f78
 80006d8:	20000080 	.word	0x20000080
 80006dc:	20000110 	.word	0x20000110
 80006e0:	08006f84 	.word	0x08006f84

080006e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a04      	ldr	r2, [pc, #16]	@ (8000704 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d101      	bne.n	80006fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006f6:	f000 f981 	bl	80009fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40012c00 	.word	0x40012c00

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <Error_Handler+0x8>

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <HAL_MspInit+0x4c>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800071e:	4a10      	ldr	r2, [pc, #64]	@ (8000760 <HAL_MspInit+0x4c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6613      	str	r3, [r2, #96]	@ 0x60
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <HAL_MspInit+0x4c>)
 8000728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <HAL_MspInit+0x4c>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000736:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <HAL_MspInit+0x4c>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073c:	6593      	str	r3, [r2, #88]	@ 0x58
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <HAL_MspInit+0x4c>)
 8000740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	210f      	movs	r1, #15
 800074e:	f06f 0001 	mvn.w	r0, #1
 8000752:	f000 fa2b 	bl	8000bac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b0ac      	sub	sp, #176	@ 0xb0
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2288      	movs	r2, #136	@ 0x88
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f006 faef 	bl	8006d68 <memset>
  if(huart->Instance==UART4)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a21      	ldr	r2, [pc, #132]	@ (8000814 <HAL_UART_MspInit+0xb0>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d13b      	bne.n	800080c <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000794:	2308      	movs	r3, #8
 8000796:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000798:	2300      	movs	r3, #0
 800079a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fa6d 	bl	8001c80 <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007ac:	f7ff ffac 	bl	8000708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <HAL_UART_MspInit+0xb4>)
 80007b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b4:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <HAL_UART_MspInit+0xb4>)
 80007b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <HAL_UART_MspInit+0xb4>)
 80007be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <HAL_UART_MspInit+0xb4>)
 80007ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007cc:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <HAL_UART_MspInit+0xb4>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <HAL_UART_MspInit+0xb4>)
 80007d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007e0:	2303      	movs	r3, #3
 80007e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80007f8:	2308      	movs	r3, #8
 80007fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000808:	f000 f9fa 	bl	8000c00 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800080c:	bf00      	nop
 800080e:	37b0      	adds	r7, #176	@ 0xb0
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40004c00 	.word	0x40004c00
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	@ 0x30
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000824:	2300      	movs	r3, #0
 8000826:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800082a:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <HAL_InitTick+0xc8>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082e:	4a2d      	ldr	r2, [pc, #180]	@ (80008e4 <HAL_InitTick+0xc8>)
 8000830:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000834:	6613      	str	r3, [r2, #96]	@ 0x60
 8000836:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <HAL_InitTick+0xc8>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000842:	f107 020c 	add.w	r2, r7, #12
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f001 f985 	bl	8001b5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000852:	f001 f96d 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8000856:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800085a:	4a23      	ldr	r2, [pc, #140]	@ (80008e8 <HAL_InitTick+0xcc>)
 800085c:	fba2 2303 	umull	r2, r3, r2, r3
 8000860:	0c9b      	lsrs	r3, r3, #18
 8000862:	3b01      	subs	r3, #1
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <HAL_InitTick+0xd0>)
 8000868:	4a21      	ldr	r2, [pc, #132]	@ (80008f0 <HAL_InitTick+0xd4>)
 800086a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <HAL_InitTick+0xd0>)
 800086e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000872:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000874:	4a1d      	ldr	r2, [pc, #116]	@ (80008ec <HAL_InitTick+0xd0>)
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <HAL_InitTick+0xd0>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <HAL_InitTick+0xd0>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <HAL_InitTick+0xd0>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800088c:	4817      	ldr	r0, [pc, #92]	@ (80008ec <HAL_InitTick+0xd0>)
 800088e:	f001 feb3 	bl	80025f8 <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000898:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800089c:	2b00      	cmp	r3, #0
 800089e:	d11b      	bne.n	80008d8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008a0:	4812      	ldr	r0, [pc, #72]	@ (80008ec <HAL_InitTick+0xd0>)
 80008a2:	f001 ff0b 	bl	80026bc <HAL_TIM_Base_Start_IT>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80008ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d111      	bne.n	80008d8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008b4:	2019      	movs	r0, #25
 80008b6:	f000 f995 	bl	8000be4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d808      	bhi.n	80008d2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	2019      	movs	r0, #25
 80008c6:	f000 f971 	bl	8000bac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <HAL_InitTick+0xd8>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	e002      	b.n	80008d8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3730      	adds	r7, #48	@ 0x30
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	431bde83 	.word	0x431bde83
 80008ec:	20000114 	.word	0x20000114
 80008f0:	40012c00 	.word	0x40012c00
 80008f4:	20000004 	.word	0x20000004

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <NMI_Handler+0x4>

08000900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <UsageFault_Handler+0x4>

08000920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000936:	f001 ff31 	bl	800279c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000114 	.word	0x20000114

08000944 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <SystemInit+0x20>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800094e:	4a05      	ldr	r2, [pc, #20]	@ (8000964 <SystemInit+0x20>)
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800096c:	f7ff ffea 	bl	8000944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000972:	490d      	ldr	r1, [pc, #52]	@ (80009a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000974:	4a0d      	ldr	r2, [pc, #52]	@ (80009ac <LoopForever+0xe>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000988:	4c0a      	ldr	r4, [pc, #40]	@ (80009b4 <LoopForever+0x16>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000996:	f006 fa45 	bl	8006e24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800099a:	f7ff fd91 	bl	80004c0 <main>

0800099e <LoopForever>:

LoopForever:
    b LoopForever
 800099e:	e7fe      	b.n	800099e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009ac:	0800705c 	.word	0x0800705c
  ldr r2, =_sbss
 80009b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009b4:	20001c44 	.word	0x20001c44

080009b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC1_2_IRQHandler>
	...

080009bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c6:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <HAL_Init+0x3c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <HAL_Init+0x3c>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d2:	2003      	movs	r0, #3
 80009d4:	f000 f8df 	bl	8000b96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d8:	200f      	movs	r0, #15
 80009da:	f7ff ff1f 	bl	800081c <HAL_InitTick>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	e001      	b.n	80009ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ea:	f7ff fe93 	bl	8000714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ee:	79fb      	ldrb	r3, [r7, #7]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000160 	.word	0x20000160

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000160 	.word	0x20000160

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4907      	ldr	r1, [pc, #28]	@ (8000ad8 <__NVIC_EnableIRQ+0x38>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	@ (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	@ (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	@ 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	@ 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff4c 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbe:	f7ff ff61 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000bc2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	6978      	ldr	r0, [r7, #20]
 8000bca:	f7ff ffb1 	bl	8000b30 <NVIC_EncodePriority>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff80 	bl	8000adc <__NVIC_SetPriority>
}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff54 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0e:	e17f      	b.n	8000f10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	2101      	movs	r1, #1
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8171 	beq.w	8000f0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d005      	beq.n	8000c40 <HAL_GPIO_Init+0x40>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d130      	bne.n	8000ca2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c76:	2201      	movs	r2, #1
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	f003 0201 	and.w	r2, r3, #1
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d118      	bne.n	8000ce0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	08db      	lsrs	r3, r3, #3
 8000cca:	f003 0201 	and.w	r2, r3, #1
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d017      	beq.n	8000d1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d123      	bne.n	8000d70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	691a      	ldr	r2, [r3, #16]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	08da      	lsrs	r2, r3, #3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3208      	adds	r2, #8
 8000d6a:	6939      	ldr	r1, [r7, #16]
 8000d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0203 	and.w	r2, r3, #3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f000 80ac 	beq.w	8000f0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	4b5f      	ldr	r3, [pc, #380]	@ (8000f30 <HAL_GPIO_Init+0x330>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db6:	4a5e      	ldr	r2, [pc, #376]	@ (8000f30 <HAL_GPIO_Init+0x330>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8000f30 <HAL_GPIO_Init+0x330>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dca:	4a5a      	ldr	r2, [pc, #360]	@ (8000f34 <HAL_GPIO_Init+0x334>)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000df4:	d025      	beq.n	8000e42 <HAL_GPIO_Init+0x242>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4f      	ldr	r2, [pc, #316]	@ (8000f38 <HAL_GPIO_Init+0x338>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d01f      	beq.n	8000e3e <HAL_GPIO_Init+0x23e>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4e      	ldr	r2, [pc, #312]	@ (8000f3c <HAL_GPIO_Init+0x33c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d019      	beq.n	8000e3a <HAL_GPIO_Init+0x23a>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4d      	ldr	r2, [pc, #308]	@ (8000f40 <HAL_GPIO_Init+0x340>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d013      	beq.n	8000e36 <HAL_GPIO_Init+0x236>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4c      	ldr	r2, [pc, #304]	@ (8000f44 <HAL_GPIO_Init+0x344>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d00d      	beq.n	8000e32 <HAL_GPIO_Init+0x232>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4b      	ldr	r2, [pc, #300]	@ (8000f48 <HAL_GPIO_Init+0x348>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d007      	beq.n	8000e2e <HAL_GPIO_Init+0x22e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4a      	ldr	r2, [pc, #296]	@ (8000f4c <HAL_GPIO_Init+0x34c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_GPIO_Init+0x22a>
 8000e26:	2306      	movs	r3, #6
 8000e28:	e00c      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	e00a      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e2e:	2305      	movs	r3, #5
 8000e30:	e008      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e32:	2304      	movs	r3, #4
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e36:	2303      	movs	r3, #3
 8000e38:	e004      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e002      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <HAL_GPIO_Init+0x244>
 8000e42:	2300      	movs	r3, #0
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	f002 0203 	and.w	r2, r2, #3
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	4093      	lsls	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e54:	4937      	ldr	r1, [pc, #220]	@ (8000f34 <HAL_GPIO_Init+0x334>)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e62:	4b3b      	ldr	r3, [pc, #236]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e86:	4a32      	ldr	r2, [pc, #200]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e8c:	4b30      	ldr	r3, [pc, #192]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eb0:	4a27      	ldr	r2, [pc, #156]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eda:	4a1d      	ldr	r2, [pc, #116]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f04:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f47f ae78 	bne.w	8000c10 <HAL_GPIO_Init+0x10>
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010000 	.word	0x40010000
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	48000800 	.word	0x48000800
 8000f40:	48000c00 	.word	0x48000c00
 8000f44:	48001000 	.word	0x48001000
 8000f48:	48001400 	.word	0x48001400
 8000f4c:	48001800 	.word	0x48001800
 8000f50:	40010400 	.word	0x40010400

08000f54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <HAL_PWREx_GetVoltageRange+0x18>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40007000 	.word	0x40007000

08000f70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f7e:	d130      	bne.n	8000fe2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f80:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f8c:	d038      	beq.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8e:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f96:	4a1e      	ldr	r2, [pc, #120]	@ (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001014 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2232      	movs	r2, #50	@ 0x32
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000faa:	fba2 2303 	umull	r2, r3, r2, r3
 8000fae:	0c9b      	lsrs	r3, r3, #18
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fb4:	e002      	b.n	8000fbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fc8:	d102      	bne.n	8000fd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f2      	bne.n	8000fb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fdc:	d110      	bne.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e00f      	b.n	8001002 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fee:	d007      	beq.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ff8:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ffe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40007000 	.word	0x40007000
 8001014:	20000000 	.word	0x20000000
 8001018:	431bde83 	.word	0x431bde83

0800101c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e3ca      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800102e:	4b97      	ldr	r3, [pc, #604]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001038:	4b94      	ldr	r3, [pc, #592]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 80e4 	beq.w	8001218 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <HAL_RCC_OscConfig+0x4a>
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	2b0c      	cmp	r3, #12
 800105a:	f040 808b 	bne.w	8001174 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b01      	cmp	r3, #1
 8001062:	f040 8087 	bne.w	8001174 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001066:	4b89      	ldr	r3, [pc, #548]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <HAL_RCC_OscConfig+0x62>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e3a2      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a1a      	ldr	r2, [r3, #32]
 8001082:	4b82      	ldr	r3, [pc, #520]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <HAL_RCC_OscConfig+0x7c>
 800108e:	4b7f      	ldr	r3, [pc, #508]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001096:	e005      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
 8001098:	4b7c      	ldr	r3, [pc, #496]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 800109a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d223      	bcs.n	80010f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fd87 	bl	8001bc0 <RCC_SetFlashLatencyFromMSIRange>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e383      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010bc:	4b73      	ldr	r3, [pc, #460]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a72      	ldr	r2, [pc, #456]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b70      	ldr	r3, [pc, #448]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	496d      	ldr	r1, [pc, #436]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010da:	4b6c      	ldr	r3, [pc, #432]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	4968      	ldr	r1, [pc, #416]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	604b      	str	r3, [r1, #4]
 80010ee:	e025      	b.n	800113c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010f0:	4b66      	ldr	r3, [pc, #408]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a65      	ldr	r2, [pc, #404]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b63      	ldr	r3, [pc, #396]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4960      	ldr	r1, [pc, #384]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 800110a:	4313      	orrs	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800110e:	4b5f      	ldr	r3, [pc, #380]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	495b      	ldr	r1, [pc, #364]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 800111e:	4313      	orrs	r3, r2
 8001120:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d109      	bne.n	800113c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fd47 	bl	8001bc0 <RCC_SetFlashLatencyFromMSIRange>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e343      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800113c:	f000 fc4a 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8001140:	4602      	mov	r2, r0
 8001142:	4b52      	ldr	r3, [pc, #328]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	4950      	ldr	r1, [pc, #320]	@ (8001290 <HAL_RCC_OscConfig+0x274>)
 800114e:	5ccb      	ldrb	r3, [r1, r3]
 8001150:	f003 031f 	and.w	r3, r3, #31
 8001154:	fa22 f303 	lsr.w	r3, r2, r3
 8001158:	4a4e      	ldr	r2, [pc, #312]	@ (8001294 <HAL_RCC_OscConfig+0x278>)
 800115a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800115c:	4b4e      	ldr	r3, [pc, #312]	@ (8001298 <HAL_RCC_OscConfig+0x27c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fb5b 	bl	800081c <HAL_InitTick>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d052      	beq.n	8001216 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	e327      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d032      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800117c:	4b43      	ldr	r3, [pc, #268]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a42      	ldr	r2, [pc, #264]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001188:	f7ff fc4c 	bl	8000a24 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001190:	f7ff fc48 	bl	8000a24 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e310      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011a2:	4b3a      	ldr	r3, [pc, #232]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ae:	4b37      	ldr	r3, [pc, #220]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a36      	ldr	r2, [pc, #216]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b34      	ldr	r3, [pc, #208]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	4931      	ldr	r1, [pc, #196]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011cc:	4b2f      	ldr	r3, [pc, #188]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	492c      	ldr	r1, [pc, #176]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
 80011e0:	e01a      	b.n	8001218 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011e2:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a29      	ldr	r2, [pc, #164]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ee:	f7ff fc19 	bl	8000a24 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011f6:	f7ff fc15 	bl	8000a24 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e2dd      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001208:	4b20      	ldr	r3, [pc, #128]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f0      	bne.n	80011f6 <HAL_RCC_OscConfig+0x1da>
 8001214:	e000      	b.n	8001218 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001216:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d074      	beq.n	800130e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b08      	cmp	r3, #8
 8001228:	d005      	beq.n	8001236 <HAL_RCC_OscConfig+0x21a>
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	d10e      	bne.n	800124e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d10b      	bne.n	800124e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d064      	beq.n	800130c <HAL_RCC_OscConfig+0x2f0>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d160      	bne.n	800130c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e2ba      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x24a>
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0b      	ldr	r2, [pc, #44]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 800125e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e026      	b.n	80012b4 <HAL_RCC_OscConfig+0x298>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800126e:	d115      	bne.n	800129c <HAL_RCC_OscConfig+0x280>
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a05      	ldr	r2, [pc, #20]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 8001276:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a02      	ldr	r2, [pc, #8]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e014      	b.n	80012b4 <HAL_RCC_OscConfig+0x298>
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	08007004 	.word	0x08007004
 8001294:	20000000 	.word	0x20000000
 8001298:	20000004 	.word	0x20000004
 800129c:	4ba0      	ldr	r3, [pc, #640]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a9f      	ldr	r2, [pc, #636]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b9d      	ldr	r3, [pc, #628]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a9c      	ldr	r2, [pc, #624]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fbb2 	bl	8000a24 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fbae 	bl	8000a24 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	@ 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e276      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d6:	4b92      	ldr	r3, [pc, #584]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0x2a8>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fb9e 	bl	8000a24 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fb9a 	bl	8000a24 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	@ 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e262      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012fe:	4b88      	ldr	r3, [pc, #544]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x2d0>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d060      	beq.n	80013dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2b04      	cmp	r3, #4
 800131e:	d005      	beq.n	800132c <HAL_RCC_OscConfig+0x310>
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d119      	bne.n	800135a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d116      	bne.n	800135a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800132c:	4b7c      	ldr	r3, [pc, #496]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_RCC_OscConfig+0x328>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e23f      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4b76      	ldr	r3, [pc, #472]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	061b      	lsls	r3, r3, #24
 8001352:	4973      	ldr	r1, [pc, #460]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001358:	e040      	b.n	80013dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001362:	4b6f      	ldr	r3, [pc, #444]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a6e      	ldr	r2, [pc, #440]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136e:	f7ff fb59 	bl	8000a24 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001376:	f7ff fb55 	bl	8000a24 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e21d      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001388:	4b65      	ldr	r3, [pc, #404]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001394:	4b62      	ldr	r3, [pc, #392]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	495f      	ldr	r1, [pc, #380]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
 80013a8:	e018      	b.n	80013dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a5c      	ldr	r2, [pc, #368]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80013b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fb35 	bl	8000a24 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fb31 	bl	8000a24 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e1f9      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d0:	4b53      	ldr	r3, [pc, #332]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d03c      	beq.n	8001462 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01c      	beq.n	800142a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80013f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013f6:	4a4a      	ldr	r2, [pc, #296]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001400:	f7ff fb10 	bl	8000a24 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fb0c 	bl	8000a24 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e1d4      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800141a:	4b41      	ldr	r3, [pc, #260]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 800141c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0ef      	beq.n	8001408 <HAL_RCC_OscConfig+0x3ec>
 8001428:	e01b      	b.n	8001462 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142a:	4b3d      	ldr	r3, [pc, #244]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 800142c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001430:	4a3b      	ldr	r2, [pc, #236]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143a:	f7ff faf3 	bl	8000a24 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001442:	f7ff faef 	bl	8000a24 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1b7      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001454:	4b32      	ldr	r3, [pc, #200]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1ef      	bne.n	8001442 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80a6 	beq.w	80015bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001474:	4b2a      	ldr	r3, [pc, #168]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10d      	bne.n	800149c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001480:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001484:	4a26      	ldr	r2, [pc, #152]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148a:	6593      	str	r3, [r2, #88]	@ 0x58
 800148c:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001498:	2301      	movs	r3, #1
 800149a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800149c:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <HAL_RCC_OscConfig+0x508>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d118      	bne.n	80014da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <HAL_RCC_OscConfig+0x508>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001524 <HAL_RCC_OscConfig+0x508>)
 80014ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b4:	f7ff fab6 	bl	8000a24 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014bc:	f7ff fab2 	bl	8000a24 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e17a      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <HAL_RCC_OscConfig+0x508>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d108      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4d8>
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80014e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014f2:	e029      	b.n	8001548 <HAL_RCC_OscConfig+0x52c>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b05      	cmp	r3, #5
 80014fa:	d115      	bne.n	8001528 <HAL_RCC_OscConfig+0x50c>
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001502:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800150c:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001512:	4a03      	ldr	r2, [pc, #12]	@ (8001520 <HAL_RCC_OscConfig+0x504>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800151c:	e014      	b.n	8001548 <HAL_RCC_OscConfig+0x52c>
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	40007000 	.word	0x40007000
 8001528:	4b9c      	ldr	r3, [pc, #624]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800152e:	4a9b      	ldr	r2, [pc, #620]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001538:	4b98      	ldr	r3, [pc, #608]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800153e:	4a97      	ldr	r2, [pc, #604]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d016      	beq.n	800157e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fa68 	bl	8000a24 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001556:	e00a      	b.n	800156e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001558:	f7ff fa64 	bl	8000a24 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e12a      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800156e:	4b8b      	ldr	r3, [pc, #556]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ed      	beq.n	8001558 <HAL_RCC_OscConfig+0x53c>
 800157c:	e015      	b.n	80015aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157e:	f7ff fa51 	bl	8000a24 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fa4d 	bl	8000a24 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e113      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800159c:	4b7f      	ldr	r3, [pc, #508]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ed      	bne.n	8001586 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d105      	bne.n	80015bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b0:	4b7a      	ldr	r3, [pc, #488]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b4:	4a79      	ldr	r2, [pc, #484]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 80015b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80fe 	beq.w	80017c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	f040 80d0 	bne.w	8001770 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015d0:	4b72      	ldr	r3, [pc, #456]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0203 	and.w	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d130      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	3b01      	subs	r3, #1
 80015f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d127      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001600:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d11f      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001610:	2a07      	cmp	r2, #7
 8001612:	bf14      	ite	ne
 8001614:	2201      	movne	r2, #1
 8001616:	2200      	moveq	r2, #0
 8001618:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800161a:	4293      	cmp	r3, r2
 800161c:	d113      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d109      	bne.n	8001646 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	085b      	lsrs	r3, r3, #1
 800163e:	3b01      	subs	r3, #1
 8001640:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d06e      	beq.n	8001724 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b0c      	cmp	r3, #12
 800164a:	d069      	beq.n	8001720 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800164c:	4b53      	ldr	r3, [pc, #332]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001658:	4b50      	ldr	r3, [pc, #320]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0ad      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001668:	4b4c      	ldr	r3, [pc, #304]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a4b      	ldr	r2, [pc, #300]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 800166e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001674:	f7ff f9d6 	bl	8000a24 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f9d2 	bl	8000a24 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e09a      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168e:	4b43      	ldr	r3, [pc, #268]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169a:	4b40      	ldr	r3, [pc, #256]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4b40      	ldr	r3, [pc, #256]	@ (80017a0 <HAL_RCC_OscConfig+0x784>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016aa:	3a01      	subs	r2, #1
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	4311      	orrs	r1, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016b4:	0212      	lsls	r2, r2, #8
 80016b6:	4311      	orrs	r1, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016bc:	0852      	lsrs	r2, r2, #1
 80016be:	3a01      	subs	r2, #1
 80016c0:	0552      	lsls	r2, r2, #21
 80016c2:	4311      	orrs	r1, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016c8:	0852      	lsrs	r2, r2, #1
 80016ca:	3a01      	subs	r2, #1
 80016cc:	0652      	lsls	r2, r2, #25
 80016ce:	4311      	orrs	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016d4:	0912      	lsrs	r2, r2, #4
 80016d6:	0452      	lsls	r2, r2, #17
 80016d8:	430a      	orrs	r2, r1
 80016da:	4930      	ldr	r1, [pc, #192]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016e0:	4b2e      	ldr	r3, [pc, #184]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a2d      	ldr	r2, [pc, #180]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 80016e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016ec:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4a2a      	ldr	r2, [pc, #168]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 80016f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016f8:	f7ff f994 	bl	8000a24 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff f990 	bl	8000a24 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e058      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001712:	4b22      	ldr	r3, [pc, #136]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800171e:	e050      	b.n	80017c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e04f      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d148      	bne.n	80017c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001730:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 8001736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800173a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4a16      	ldr	r2, [pc, #88]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 8001742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001746:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001748:	f7ff f96c 	bl	8000a24 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001750:	f7ff f968 	bl	8000a24 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e030      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x734>
 800176e:	e028      	b.n	80017c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d023      	beq.n	80017be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a08      	ldr	r2, [pc, #32]	@ (800179c <HAL_RCC_OscConfig+0x780>)
 800177c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff f94f 	bl	8000a24 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001788:	e00c      	b.n	80017a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff f94b 	bl	8000a24 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d905      	bls.n	80017a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e013      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
 800179c:	40021000 	.word	0x40021000
 80017a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <HAL_RCC_OscConfig+0x7b0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ec      	bne.n	800178a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_RCC_OscConfig+0x7b0>)
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	4905      	ldr	r1, [pc, #20]	@ (80017cc <HAL_RCC_OscConfig+0x7b0>)
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_RCC_OscConfig+0x7b4>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	60cb      	str	r3, [r1, #12]
 80017bc:	e001      	b.n	80017c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	feeefffc 	.word	0xfeeefffc

080017d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0e7      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b75      	ldr	r3, [pc, #468]	@ (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d910      	bls.n	8001818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b72      	ldr	r3, [pc, #456]	@ (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0207 	bic.w	r2, r3, #7
 80017fe:	4970      	ldr	r1, [pc, #448]	@ (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b6e      	ldr	r3, [pc, #440]	@ (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0cf      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d010      	beq.n	8001846 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	4b66      	ldr	r3, [pc, #408]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001830:	429a      	cmp	r2, r3
 8001832:	d908      	bls.n	8001846 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001834:	4b63      	ldr	r3, [pc, #396]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4960      	ldr	r1, [pc, #384]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d04c      	beq.n	80018ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185a:	4b5a      	ldr	r3, [pc, #360]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d121      	bne.n	80018aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0a6      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001872:	4b54      	ldr	r3, [pc, #336]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d115      	bne.n	80018aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e09a      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800188a:	4b4e      	ldr	r3, [pc, #312]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e08e      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189a:	4b4a      	ldr	r3, [pc, #296]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e086      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018aa:	4b46      	ldr	r3, [pc, #280]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f023 0203 	bic.w	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4943      	ldr	r1, [pc, #268]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018bc:	f7ff f8b2 	bl	8000a24 <HAL_GetTick>
 80018c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	e00a      	b.n	80018da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c4:	f7ff f8ae 	bl	8000a24 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e06e      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	4b3a      	ldr	r3, [pc, #232]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 020c 	and.w	r2, r3, #12
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1eb      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d010      	beq.n	800191a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	4b31      	ldr	r3, [pc, #196]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001904:	429a      	cmp	r2, r3
 8001906:	d208      	bcs.n	800191a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001908:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	492b      	ldr	r1, [pc, #172]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800191a:	4b29      	ldr	r3, [pc, #164]	@ (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d210      	bcs.n	800194a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001928:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 0207 	bic.w	r2, r3, #7
 8001930:	4923      	ldr	r1, [pc, #140]	@ (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001938:	4b21      	ldr	r3, [pc, #132]	@ (80019c0 <HAL_RCC_ClockConfig+0x1ec>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d001      	beq.n	800194a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e036      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	d008      	beq.n	8001968 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001956:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	4918      	ldr	r1, [pc, #96]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	4313      	orrs	r3, r2
 8001966:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d009      	beq.n	8001988 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001974:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4910      	ldr	r1, [pc, #64]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001988:	f000 f824 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	091b      	lsrs	r3, r3, #4
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	490b      	ldr	r1, [pc, #44]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f4>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	4a09      	ldr	r2, [pc, #36]	@ (80019cc <HAL_RCC_ClockConfig+0x1f8>)
 80019a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_RCC_ClockConfig+0x1fc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe ff35 	bl	800081c <HAL_InitTick>
 80019b2:	4603      	mov	r3, r0
 80019b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80019b6:	7afb      	ldrb	r3, [r7, #11]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40022000 	.word	0x40022000
 80019c4:	40021000 	.word	0x40021000
 80019c8:	08007004 	.word	0x08007004
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	@ 0x24
 80019d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e2:	4b3e      	ldr	r3, [pc, #248]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ec:	4b3b      	ldr	r3, [pc, #236]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x34>
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d121      	bne.n	8001a46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d11e      	bne.n	8001a46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a08:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a14:	4b31      	ldr	r3, [pc, #196]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	e005      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a24:	4b2d      	ldr	r3, [pc, #180]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a30:	4a2b      	ldr	r2, [pc, #172]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10d      	bne.n	8001a5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d102      	bne.n	8001a52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	e004      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a58:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d134      	bne.n	8001acc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a62:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d003      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0xac>
 8001a78:	e005      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a7c:	617b      	str	r3, [r7, #20]
      break;
 8001a7e:	e005      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a80:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a82:	617b      	str	r3, [r7, #20]
      break;
 8001a84:	e002      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	617b      	str	r3, [r7, #20]
      break;
 8001a8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a8c:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	3301      	adds	r3, #1
 8001a98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	fb03 f202 	mul.w	r2, r3, r2
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	0e5b      	lsrs	r3, r3, #25
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	3301      	adds	r3, #1
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001acc:	69bb      	ldr	r3, [r7, #24]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	@ 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	0800701c 	.word	0x0800701c
 8001ae4:	00f42400 	.word	0x00f42400
 8001ae8:	007a1200 	.word	0x007a1200

08001aec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b03      	ldr	r3, [pc, #12]	@ (8001b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b08:	f7ff fff0 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4904      	ldr	r1, [pc, #16]	@ (8001b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08007014 	.word	0x08007014

08001b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b34:	f7ff ffda 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0adb      	lsrs	r3, r3, #11
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4904      	ldr	r1, [pc, #16]	@ (8001b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	08007014 	.word	0x08007014

08001b5c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	220f      	movs	r2, #15
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001b6c:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0203 	and.w	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001b78:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001b90:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	08db      	lsrs	r3, r3, #3
 8001b96:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001b9e:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <HAL_RCC_GetClockConfig+0x60>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0207 	and.w	r2, r3, #7
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	601a      	str	r2, [r3, #0]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40022000 	.word	0x40022000

08001bc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bd8:	f7ff f9bc 	bl	8000f54 <HAL_PWREx_GetVoltageRange>
 8001bdc:	6178      	str	r0, [r7, #20]
 8001bde:	e014      	b.n	8001c0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b25      	ldr	r3, [pc, #148]	@ (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	4a24      	ldr	r2, [pc, #144]	@ (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bec:	4b22      	ldr	r3, [pc, #136]	@ (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bf8:	f7ff f9ac 	bl	8000f54 <HAL_PWREx_GetVoltageRange>
 8001bfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	4a1d      	ldr	r2, [pc, #116]	@ (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c10:	d10b      	bne.n	8001c2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b80      	cmp	r3, #128	@ 0x80
 8001c16:	d919      	bls.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c1c:	d902      	bls.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c1e:	2302      	movs	r3, #2
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e013      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c24:	2301      	movs	r3, #1
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	e010      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b80      	cmp	r3, #128	@ 0x80
 8001c2e:	d902      	bls.n	8001c36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c30:	2303      	movs	r3, #3
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	e00a      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b80      	cmp	r3, #128	@ 0x80
 8001c3a:	d102      	bne.n	8001c42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	e004      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b70      	cmp	r3, #112	@ 0x70
 8001c46:	d101      	bne.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c48:	2301      	movs	r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f023 0207 	bic.w	r2, r3, #7
 8001c54:	4909      	ldr	r1, [pc, #36]	@ (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c5c:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40022000 	.word	0x40022000

08001c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c88:	2300      	movs	r3, #0
 8001c8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d041      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ca0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ca4:	d02a      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ca6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001caa:	d824      	bhi.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001cb0:	d008      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001cb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001cb6:	d81e      	bhi.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001cbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cc0:	d010      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001cc2:	e018      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cc4:	4b86      	ldr	r3, [pc, #536]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4a85      	ldr	r2, [pc, #532]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cd0:	e015      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fabb 	bl	8002254 <RCCEx_PLLSAI1_Config>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ce2:	e00c      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3320      	adds	r3, #32
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 fba6 	bl	800243c <RCCEx_PLLSAI2_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cf4:	e003      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	74fb      	strb	r3, [r7, #19]
      break;
 8001cfa:	e000      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cfe:	7cfb      	ldrb	r3, [r7, #19]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10b      	bne.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d04:	4b76      	ldr	r3, [pc, #472]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d12:	4973      	ldr	r1, [pc, #460]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001d1a:	e001      	b.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d1c:	7cfb      	ldrb	r3, [r7, #19]
 8001d1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d041      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d34:	d02a      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d3a:	d824      	bhi.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d40:	d008      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d46:	d81e      	bhi.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d50:	d010      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d52:	e018      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d54:	4b62      	ldr	r3, [pc, #392]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a61      	ldr	r2, [pc, #388]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d60:	e015      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fa73 	bl	8002254 <RCCEx_PLLSAI1_Config>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d72:	e00c      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3320      	adds	r3, #32
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fb5e 	bl	800243c <RCCEx_PLLSAI2_Config>
 8001d80:	4603      	mov	r3, r0
 8001d82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d84:	e003      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	74fb      	strb	r3, [r7, #19]
      break;
 8001d8a:	e000      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d8e:	7cfb      	ldrb	r3, [r7, #19]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10b      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d94:	4b52      	ldr	r3, [pc, #328]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001da2:	494f      	ldr	r1, [pc, #316]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001daa:	e001      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a0 	beq.w	8001efe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dc2:	4b47      	ldr	r3, [pc, #284]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00d      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	4b41      	ldr	r3, [pc, #260]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	4a40      	ldr	r2, [pc, #256]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df0:	2301      	movs	r3, #1
 8001df2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e00:	f7fe fe10 	bl	8000a24 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e06:	e009      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e08:	f7fe fe0c 	bl	8000a24 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d902      	bls.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	74fb      	strb	r3, [r7, #19]
        break;
 8001e1a:	e005      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e1c:	4b31      	ldr	r3, [pc, #196]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ef      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e28:	7cfb      	ldrb	r3, [r7, #19]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d15c      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01f      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d019      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e58:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	4a20      	ldr	r2, [pc, #128]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e78:	4a19      	ldr	r2, [pc, #100]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d016      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7fe fdcb 	bl	8000a24 <HAL_GetTick>
 8001e8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e90:	e00b      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7fe fdc7 	bl	8000a24 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d902      	bls.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	74fb      	strb	r3, [r7, #19]
            break;
 8001ea8:	e006      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ec      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ebe:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ece:	4904      	ldr	r1, [pc, #16]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001ed6:	e009      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	74bb      	strb	r3, [r7, #18]
 8001edc:	e006      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eec:	7c7b      	ldrb	r3, [r7, #17]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d105      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef2:	4b9e      	ldr	r3, [pc, #632]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	4a9d      	ldr	r2, [pc, #628]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f0a:	4b98      	ldr	r3, [pc, #608]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f10:	f023 0203 	bic.w	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f18:	4994      	ldr	r1, [pc, #592]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f2c:	4b8f      	ldr	r3, [pc, #572]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f32:	f023 020c 	bic.w	r2, r3, #12
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3a:	498c      	ldr	r1, [pc, #560]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f4e:	4b87      	ldr	r3, [pc, #540]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	4983      	ldr	r1, [pc, #524]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f70:	4b7e      	ldr	r3, [pc, #504]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	497b      	ldr	r1, [pc, #492]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f92:	4b76      	ldr	r3, [pc, #472]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa0:	4972      	ldr	r1, [pc, #456]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fb4:	4b6d      	ldr	r3, [pc, #436]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc2:	496a      	ldr	r1, [pc, #424]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fd6:	4b65      	ldr	r3, [pc, #404]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe4:	4961      	ldr	r1, [pc, #388]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ff8:	4b5c      	ldr	r3, [pc, #368]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002006:	4959      	ldr	r1, [pc, #356]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800201a:	4b54      	ldr	r3, [pc, #336]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002020:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002028:	4950      	ldr	r1, [pc, #320]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800203c:	4b4b      	ldr	r3, [pc, #300]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002042:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204a:	4948      	ldr	r1, [pc, #288]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800205e:	4b43      	ldr	r3, [pc, #268]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002064:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	493f      	ldr	r1, [pc, #252]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d028      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002080:	4b3a      	ldr	r3, [pc, #232]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002086:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800208e:	4937      	ldr	r1, [pc, #220]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800209a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800209e:	d106      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a0:	4b32      	ldr	r3, [pc, #200]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a31      	ldr	r2, [pc, #196]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020aa:	60d3      	str	r3, [r2, #12]
 80020ac:	e011      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3304      	adds	r3, #4
 80020bc:	2101      	movs	r1, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f8c8 	bl	8002254 <RCCEx_PLLSAI1_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d028      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020de:	4b23      	ldr	r3, [pc, #140]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ec:	491f      	ldr	r1, [pc, #124]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020fc:	d106      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020fe:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a1a      	ldr	r2, [pc, #104]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002108:	60d3      	str	r3, [r2, #12]
 800210a:	e011      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002110:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002114:	d10c      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	2101      	movs	r1, #1
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f899 	bl	8002254 <RCCEx_PLLSAI1_Config>
 8002122:	4603      	mov	r3, r0
 8002124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02b      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002142:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800214a:	4908      	ldr	r1, [pc, #32]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002156:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800215a:	d109      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a02      	ldr	r2, [pc, #8]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002166:	60d3      	str	r3, [r2, #12]
 8002168:	e014      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002174:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002178:	d10c      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	2101      	movs	r1, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f867 	bl	8002254 <RCCEx_PLLSAI1_Config>
 8002186:	4603      	mov	r3, r0
 8002188:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d02f      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021ae:	4928      	ldr	r1, [pc, #160]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021be:	d10d      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	2102      	movs	r1, #2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f844 	bl	8002254 <RCCEx_PLLSAI1_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d014      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	74bb      	strb	r3, [r7, #18]
 80021da:	e011      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3320      	adds	r3, #32
 80021ea:	2102      	movs	r1, #2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f925 	bl	800243c <RCCEx_PLLSAI2_Config>
 80021f2:	4603      	mov	r3, r0
 80021f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800220c:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800221a:	490d      	ldr	r1, [pc, #52]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800222e:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800223e:	4904      	ldr	r1, [pc, #16]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002246:	7cbb      	ldrb	r3, [r7, #18]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000

08002254 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002262:	4b75      	ldr	r3, [pc, #468]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d018      	beq.n	80022a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800226e:	4b72      	ldr	r3, [pc, #456]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0203 	and.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d10d      	bne.n	800229a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
       ||
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002286:	4b6c      	ldr	r3, [pc, #432]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
       ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d047      	beq.n	800232a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	e044      	b.n	800232a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d018      	beq.n	80022da <RCCEx_PLLSAI1_Config+0x86>
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d825      	bhi.n	80022f8 <RCCEx_PLLSAI1_Config+0xa4>
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d002      	beq.n	80022b6 <RCCEx_PLLSAI1_Config+0x62>
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d009      	beq.n	80022c8 <RCCEx_PLLSAI1_Config+0x74>
 80022b4:	e020      	b.n	80022f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022b6:	4b60      	ldr	r3, [pc, #384]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d11d      	bne.n	80022fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c6:	e01a      	b.n	80022fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d116      	bne.n	8002302 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d8:	e013      	b.n	8002302 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022da:	4b57      	ldr	r3, [pc, #348]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022e6:	4b54      	ldr	r3, [pc, #336]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022f6:	e006      	b.n	8002306 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      break;
 80022fc:	e004      	b.n	8002308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022fe:	bf00      	nop
 8002300:	e002      	b.n	8002308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002302:	bf00      	nop
 8002304:	e000      	b.n	8002308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002306:	bf00      	nop
    }

    if(status == HAL_OK)
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10d      	bne.n	800232a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800230e:	4b4a      	ldr	r3, [pc, #296]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	430b      	orrs	r3, r1
 8002324:	4944      	ldr	r1, [pc, #272]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002326:	4313      	orrs	r3, r2
 8002328:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d17d      	bne.n	800242c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002330:	4b41      	ldr	r3, [pc, #260]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a40      	ldr	r2, [pc, #256]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002336:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800233a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233c:	f7fe fb72 	bl	8000a24 <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002342:	e009      	b.n	8002358 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002344:	f7fe fb6e 	bl	8000a24 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d902      	bls.n	8002358 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	73fb      	strb	r3, [r7, #15]
        break;
 8002356:	e005      	b.n	8002364 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002358:	4b37      	ldr	r3, [pc, #220]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ef      	bne.n	8002344 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d160      	bne.n	800242c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d111      	bne.n	8002394 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002370:	4b31      	ldr	r3, [pc, #196]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6892      	ldr	r2, [r2, #8]
 8002380:	0211      	lsls	r1, r2, #8
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68d2      	ldr	r2, [r2, #12]
 8002386:	0912      	lsrs	r2, r2, #4
 8002388:	0452      	lsls	r2, r2, #17
 800238a:	430a      	orrs	r2, r1
 800238c:	492a      	ldr	r1, [pc, #168]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	610b      	str	r3, [r1, #16]
 8002392:	e027      	b.n	80023e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d112      	bne.n	80023c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800239a:	4b27      	ldr	r3, [pc, #156]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80023a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6892      	ldr	r2, [r2, #8]
 80023aa:	0211      	lsls	r1, r2, #8
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6912      	ldr	r2, [r2, #16]
 80023b0:	0852      	lsrs	r2, r2, #1
 80023b2:	3a01      	subs	r2, #1
 80023b4:	0552      	lsls	r2, r2, #21
 80023b6:	430a      	orrs	r2, r1
 80023b8:	491f      	ldr	r1, [pc, #124]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	610b      	str	r3, [r1, #16]
 80023be:	e011      	b.n	80023e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80023c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6892      	ldr	r2, [r2, #8]
 80023d0:	0211      	lsls	r1, r2, #8
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6952      	ldr	r2, [r2, #20]
 80023d6:	0852      	lsrs	r2, r2, #1
 80023d8:	3a01      	subs	r2, #1
 80023da:	0652      	lsls	r2, r2, #25
 80023dc:	430a      	orrs	r2, r1
 80023de:	4916      	ldr	r1, [pc, #88]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023e4:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a13      	ldr	r2, [pc, #76]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7fe fb18 	bl	8000a24 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023f6:	e009      	b.n	800240c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023f8:	f7fe fb14 	bl	8000a24 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d902      	bls.n	800240c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	73fb      	strb	r3, [r7, #15]
          break;
 800240a:	e005      	b.n	8002418 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ef      	beq.n	80023f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	4904      	ldr	r1, [pc, #16]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000

0800243c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800244a:	4b6a      	ldr	r3, [pc, #424]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d018      	beq.n	8002488 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002456:	4b67      	ldr	r3, [pc, #412]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0203 	and.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d10d      	bne.n	8002482 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
       ||
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800246e:	4b61      	ldr	r3, [pc, #388]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
       ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d047      	beq.n	8002512 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	e044      	b.n	8002512 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d018      	beq.n	80024c2 <RCCEx_PLLSAI2_Config+0x86>
 8002490:	2b03      	cmp	r3, #3
 8002492:	d825      	bhi.n	80024e0 <RCCEx_PLLSAI2_Config+0xa4>
 8002494:	2b01      	cmp	r3, #1
 8002496:	d002      	beq.n	800249e <RCCEx_PLLSAI2_Config+0x62>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d009      	beq.n	80024b0 <RCCEx_PLLSAI2_Config+0x74>
 800249c:	e020      	b.n	80024e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800249e:	4b55      	ldr	r3, [pc, #340]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11d      	bne.n	80024e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ae:	e01a      	b.n	80024e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024b0:	4b50      	ldr	r3, [pc, #320]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d116      	bne.n	80024ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c0:	e013      	b.n	80024ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024c2:	4b4c      	ldr	r3, [pc, #304]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024ce:	4b49      	ldr	r3, [pc, #292]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024de:	e006      	b.n	80024ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e004      	b.n	80024f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024e6:	bf00      	nop
 80024e8:	e002      	b.n	80024f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ea:	bf00      	nop
 80024ec:	e000      	b.n	80024f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024f6:	4b3f      	ldr	r3, [pc, #252]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	430b      	orrs	r3, r1
 800250c:	4939      	ldr	r1, [pc, #228]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800250e:	4313      	orrs	r3, r2
 8002510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d167      	bne.n	80025e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002518:	4b36      	ldr	r3, [pc, #216]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a35      	ldr	r2, [pc, #212]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002524:	f7fe fa7e 	bl	8000a24 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800252a:	e009      	b.n	8002540 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800252c:	f7fe fa7a 	bl	8000a24 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d902      	bls.n	8002540 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	73fb      	strb	r3, [r7, #15]
        break;
 800253e:	e005      	b.n	800254c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002540:	4b2c      	ldr	r3, [pc, #176]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ef      	bne.n	800252c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d14a      	bne.n	80025e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d111      	bne.n	800257c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002558:	4b26      	ldr	r3, [pc, #152]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6892      	ldr	r2, [r2, #8]
 8002568:	0211      	lsls	r1, r2, #8
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68d2      	ldr	r2, [r2, #12]
 800256e:	0912      	lsrs	r2, r2, #4
 8002570:	0452      	lsls	r2, r2, #17
 8002572:	430a      	orrs	r2, r1
 8002574:	491f      	ldr	r1, [pc, #124]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002576:	4313      	orrs	r3, r2
 8002578:	614b      	str	r3, [r1, #20]
 800257a:	e011      	b.n	80025a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800257c:	4b1d      	ldr	r3, [pc, #116]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002584:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6892      	ldr	r2, [r2, #8]
 800258c:	0211      	lsls	r1, r2, #8
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6912      	ldr	r2, [r2, #16]
 8002592:	0852      	lsrs	r2, r2, #1
 8002594:	3a01      	subs	r2, #1
 8002596:	0652      	lsls	r2, r2, #25
 8002598:	430a      	orrs	r2, r1
 800259a:	4916      	ldr	r1, [pc, #88]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800259c:	4313      	orrs	r3, r2
 800259e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025a0:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a13      	ldr	r2, [pc, #76]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ac:	f7fe fa3a 	bl	8000a24 <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025b2:	e009      	b.n	80025c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025b4:	f7fe fa36 	bl	8000a24 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d902      	bls.n	80025c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	73fb      	strb	r3, [r7, #15]
          break;
 80025c6:	e005      	b.n	80025d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025c8:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0ef      	beq.n	80025b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	4904      	ldr	r1, [pc, #16]	@ (80025f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e049      	b.n	800269e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f841 	bl	80026a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3304      	adds	r3, #4
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f000 f9e0 	bl	80029fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d001      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e04f      	b.n	8002774 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a23      	ldr	r2, [pc, #140]	@ (8002780 <HAL_TIM_Base_Start_IT+0xc4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01d      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x76>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026fe:	d018      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x76>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1f      	ldr	r2, [pc, #124]	@ (8002784 <HAL_TIM_Base_Start_IT+0xc8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x76>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1e      	ldr	r2, [pc, #120]	@ (8002788 <HAL_TIM_Base_Start_IT+0xcc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00e      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x76>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1c      	ldr	r2, [pc, #112]	@ (800278c <HAL_TIM_Base_Start_IT+0xd0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d009      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x76>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1b      	ldr	r2, [pc, #108]	@ (8002790 <HAL_TIM_Base_Start_IT+0xd4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d004      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x76>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a19      	ldr	r2, [pc, #100]	@ (8002794 <HAL_TIM_Base_Start_IT+0xd8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d115      	bne.n	800275e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	4b17      	ldr	r3, [pc, #92]	@ (8002798 <HAL_TIM_Base_Start_IT+0xdc>)
 800273a:	4013      	ands	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b06      	cmp	r3, #6
 8002742:	d015      	beq.n	8002770 <HAL_TIM_Base_Start_IT+0xb4>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274a:	d011      	beq.n	8002770 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275c:	e008      	b.n	8002770 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e000      	b.n	8002772 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002770:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40012c00 	.word	0x40012c00
 8002784:	40000400 	.word	0x40000400
 8002788:	40000800 	.word	0x40000800
 800278c:	40000c00 	.word	0x40000c00
 8002790:	40013400 	.word	0x40013400
 8002794:	40014000 	.word	0x40014000
 8002798:	00010007 	.word	0x00010007

0800279c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d020      	beq.n	8002800 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01b      	beq.n	8002800 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0202 	mvn.w	r2, #2
 80027d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f8e9 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 80027ec:	e005      	b.n	80027fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8db 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f8ec 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d020      	beq.n	800284c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01b      	beq.n	800284c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0204 	mvn.w	r2, #4
 800281c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8c3 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 8002838:	e005      	b.n	8002846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f8b5 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f8c6 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d020      	beq.n	8002898 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01b      	beq.n	8002898 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0208 	mvn.w	r2, #8
 8002868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2204      	movs	r2, #4
 800286e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f89d 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 8002884:	e005      	b.n	8002892 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f88f 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f8a0 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d020      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01b      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0210 	mvn.w	r2, #16
 80028b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2208      	movs	r2, #8
 80028ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f877 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 80028d0:	e005      	b.n	80028de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f869 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f87a 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00c      	beq.n	8002908 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0201 	mvn.w	r2, #1
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fd feee 	bl	80006e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800290e:	2b00      	cmp	r3, #0
 8002910:	d104      	bne.n	800291c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00c      	beq.n	8002936 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800292e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f913 	bl	8002b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00c      	beq.n	800295a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f90b 	bl	8002b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00c      	beq.n	800297e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f834 	bl	80029e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00c      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f06f 0220 	mvn.w	r2, #32
 800299a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f8d3 	bl	8002b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a46      	ldr	r2, [pc, #280]	@ (8002b28 <TIM_Base_SetConfig+0x12c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <TIM_Base_SetConfig+0x40>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a1a:	d00f      	beq.n	8002a3c <TIM_Base_SetConfig+0x40>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a43      	ldr	r2, [pc, #268]	@ (8002b2c <TIM_Base_SetConfig+0x130>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00b      	beq.n	8002a3c <TIM_Base_SetConfig+0x40>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a42      	ldr	r2, [pc, #264]	@ (8002b30 <TIM_Base_SetConfig+0x134>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d007      	beq.n	8002a3c <TIM_Base_SetConfig+0x40>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a41      	ldr	r2, [pc, #260]	@ (8002b34 <TIM_Base_SetConfig+0x138>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d003      	beq.n	8002a3c <TIM_Base_SetConfig+0x40>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a40      	ldr	r2, [pc, #256]	@ (8002b38 <TIM_Base_SetConfig+0x13c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d108      	bne.n	8002a4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a35      	ldr	r2, [pc, #212]	@ (8002b28 <TIM_Base_SetConfig+0x12c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01f      	beq.n	8002a96 <TIM_Base_SetConfig+0x9a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a5c:	d01b      	beq.n	8002a96 <TIM_Base_SetConfig+0x9a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a32      	ldr	r2, [pc, #200]	@ (8002b2c <TIM_Base_SetConfig+0x130>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d017      	beq.n	8002a96 <TIM_Base_SetConfig+0x9a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a31      	ldr	r2, [pc, #196]	@ (8002b30 <TIM_Base_SetConfig+0x134>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <TIM_Base_SetConfig+0x9a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a30      	ldr	r2, [pc, #192]	@ (8002b34 <TIM_Base_SetConfig+0x138>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00f      	beq.n	8002a96 <TIM_Base_SetConfig+0x9a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a2f      	ldr	r2, [pc, #188]	@ (8002b38 <TIM_Base_SetConfig+0x13c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00b      	beq.n	8002a96 <TIM_Base_SetConfig+0x9a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2e      	ldr	r2, [pc, #184]	@ (8002b3c <TIM_Base_SetConfig+0x140>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <TIM_Base_SetConfig+0x9a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a2d      	ldr	r2, [pc, #180]	@ (8002b40 <TIM_Base_SetConfig+0x144>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d003      	beq.n	8002a96 <TIM_Base_SetConfig+0x9a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2c      	ldr	r2, [pc, #176]	@ (8002b44 <TIM_Base_SetConfig+0x148>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d108      	bne.n	8002aa8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a16      	ldr	r2, [pc, #88]	@ (8002b28 <TIM_Base_SetConfig+0x12c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00f      	beq.n	8002af4 <TIM_Base_SetConfig+0xf8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a18      	ldr	r2, [pc, #96]	@ (8002b38 <TIM_Base_SetConfig+0x13c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00b      	beq.n	8002af4 <TIM_Base_SetConfig+0xf8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a17      	ldr	r2, [pc, #92]	@ (8002b3c <TIM_Base_SetConfig+0x140>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <TIM_Base_SetConfig+0xf8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a16      	ldr	r2, [pc, #88]	@ (8002b40 <TIM_Base_SetConfig+0x144>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d003      	beq.n	8002af4 <TIM_Base_SetConfig+0xf8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a15      	ldr	r2, [pc, #84]	@ (8002b44 <TIM_Base_SetConfig+0x148>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d103      	bne.n	8002afc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f023 0201 	bic.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40000c00 	.word	0x40000c00
 8002b38:	40013400 	.word	0x40013400
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40014400 	.word	0x40014400
 8002b44:	40014800 	.word	0x40014800

08002b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e040      	b.n	8002c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fd fddc 	bl	8000764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2224      	movs	r2, #36	@ 0x24
 8002bb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fb6a 	bl	80032a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f8af 	bl	8002d34 <UART_SetConfig>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e01b      	b.n	8002c18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fbe9 	bl	80033e8 <UART_CheckIdleState>
 8002c16:	4603      	mov	r3, r0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	@ 0x28
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d177      	bne.n	8002d28 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_UART_Transmit+0x24>
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e070      	b.n	8002d2a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2221      	movs	r2, #33	@ 0x21
 8002c54:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c56:	f7fd fee5 	bl	8000a24 <HAL_GetTick>
 8002c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	88fa      	ldrh	r2, [r7, #6]
 8002c68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c74:	d108      	bne.n	8002c88 <HAL_UART_Transmit+0x68>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	e003      	b.n	8002c90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c90:	e02f      	b.n	8002cf2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2180      	movs	r1, #128	@ 0x80
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fc4b 	bl	8003538 <UART_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d004      	beq.n	8002cb2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e03b      	b.n	8002d2a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10b      	bne.n	8002cd0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	881a      	ldrh	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc4:	b292      	uxth	r2, r2
 8002cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	3302      	adds	r3, #2
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	e007      	b.n	8002ce0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1c9      	bne.n	8002c92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	2140      	movs	r1, #64	@ 0x40
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fc15 	bl	8003538 <UART_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e005      	b.n	8002d2a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e000      	b.n	8002d2a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d38:	b08a      	sub	sp, #40	@ 0x28
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4ba4      	ldr	r3, [pc, #656]	@ (8002ff4 <UART_SetConfig+0x2c0>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a99      	ldr	r2, [pc, #612]	@ (8002ff8 <UART_SetConfig+0x2c4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db0:	430a      	orrs	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a90      	ldr	r2, [pc, #576]	@ (8002ffc <UART_SetConfig+0x2c8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d126      	bne.n	8002e0c <UART_SetConfig+0xd8>
 8002dbe:	4b90      	ldr	r3, [pc, #576]	@ (8003000 <UART_SetConfig+0x2cc>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d81b      	bhi.n	8002e04 <UART_SetConfig+0xd0>
 8002dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd4 <UART_SetConfig+0xa0>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002de5 	.word	0x08002de5
 8002dd8:	08002df5 	.word	0x08002df5
 8002ddc:	08002ded 	.word	0x08002ded
 8002de0:	08002dfd 	.word	0x08002dfd
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dea:	e116      	b.n	800301a <UART_SetConfig+0x2e6>
 8002dec:	2302      	movs	r3, #2
 8002dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002df2:	e112      	b.n	800301a <UART_SetConfig+0x2e6>
 8002df4:	2304      	movs	r3, #4
 8002df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dfa:	e10e      	b.n	800301a <UART_SetConfig+0x2e6>
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e02:	e10a      	b.n	800301a <UART_SetConfig+0x2e6>
 8002e04:	2310      	movs	r3, #16
 8002e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e0a:	e106      	b.n	800301a <UART_SetConfig+0x2e6>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a7c      	ldr	r2, [pc, #496]	@ (8003004 <UART_SetConfig+0x2d0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d138      	bne.n	8002e88 <UART_SetConfig+0x154>
 8002e16:	4b7a      	ldr	r3, [pc, #488]	@ (8003000 <UART_SetConfig+0x2cc>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d82d      	bhi.n	8002e80 <UART_SetConfig+0x14c>
 8002e24:	a201      	add	r2, pc, #4	@ (adr r2, 8002e2c <UART_SetConfig+0xf8>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e61 	.word	0x08002e61
 8002e30:	08002e81 	.word	0x08002e81
 8002e34:	08002e81 	.word	0x08002e81
 8002e38:	08002e81 	.word	0x08002e81
 8002e3c:	08002e71 	.word	0x08002e71
 8002e40:	08002e81 	.word	0x08002e81
 8002e44:	08002e81 	.word	0x08002e81
 8002e48:	08002e81 	.word	0x08002e81
 8002e4c:	08002e69 	.word	0x08002e69
 8002e50:	08002e81 	.word	0x08002e81
 8002e54:	08002e81 	.word	0x08002e81
 8002e58:	08002e81 	.word	0x08002e81
 8002e5c:	08002e79 	.word	0x08002e79
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e66:	e0d8      	b.n	800301a <UART_SetConfig+0x2e6>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e6e:	e0d4      	b.n	800301a <UART_SetConfig+0x2e6>
 8002e70:	2304      	movs	r3, #4
 8002e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e76:	e0d0      	b.n	800301a <UART_SetConfig+0x2e6>
 8002e78:	2308      	movs	r3, #8
 8002e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e7e:	e0cc      	b.n	800301a <UART_SetConfig+0x2e6>
 8002e80:	2310      	movs	r3, #16
 8002e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e86:	e0c8      	b.n	800301a <UART_SetConfig+0x2e6>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a5e      	ldr	r2, [pc, #376]	@ (8003008 <UART_SetConfig+0x2d4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d125      	bne.n	8002ede <UART_SetConfig+0x1aa>
 8002e92:	4b5b      	ldr	r3, [pc, #364]	@ (8003000 <UART_SetConfig+0x2cc>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e9c:	2b30      	cmp	r3, #48	@ 0x30
 8002e9e:	d016      	beq.n	8002ece <UART_SetConfig+0x19a>
 8002ea0:	2b30      	cmp	r3, #48	@ 0x30
 8002ea2:	d818      	bhi.n	8002ed6 <UART_SetConfig+0x1a2>
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d00a      	beq.n	8002ebe <UART_SetConfig+0x18a>
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d814      	bhi.n	8002ed6 <UART_SetConfig+0x1a2>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <UART_SetConfig+0x182>
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d008      	beq.n	8002ec6 <UART_SetConfig+0x192>
 8002eb4:	e00f      	b.n	8002ed6 <UART_SetConfig+0x1a2>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ebc:	e0ad      	b.n	800301a <UART_SetConfig+0x2e6>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ec4:	e0a9      	b.n	800301a <UART_SetConfig+0x2e6>
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ecc:	e0a5      	b.n	800301a <UART_SetConfig+0x2e6>
 8002ece:	2308      	movs	r3, #8
 8002ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ed4:	e0a1      	b.n	800301a <UART_SetConfig+0x2e6>
 8002ed6:	2310      	movs	r3, #16
 8002ed8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002edc:	e09d      	b.n	800301a <UART_SetConfig+0x2e6>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a4a      	ldr	r2, [pc, #296]	@ (800300c <UART_SetConfig+0x2d8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d125      	bne.n	8002f34 <UART_SetConfig+0x200>
 8002ee8:	4b45      	ldr	r3, [pc, #276]	@ (8003000 <UART_SetConfig+0x2cc>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ef2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ef4:	d016      	beq.n	8002f24 <UART_SetConfig+0x1f0>
 8002ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ef8:	d818      	bhi.n	8002f2c <UART_SetConfig+0x1f8>
 8002efa:	2b80      	cmp	r3, #128	@ 0x80
 8002efc:	d00a      	beq.n	8002f14 <UART_SetConfig+0x1e0>
 8002efe:	2b80      	cmp	r3, #128	@ 0x80
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x1f8>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <UART_SetConfig+0x1d8>
 8002f06:	2b40      	cmp	r3, #64	@ 0x40
 8002f08:	d008      	beq.n	8002f1c <UART_SetConfig+0x1e8>
 8002f0a:	e00f      	b.n	8002f2c <UART_SetConfig+0x1f8>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f12:	e082      	b.n	800301a <UART_SetConfig+0x2e6>
 8002f14:	2302      	movs	r3, #2
 8002f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f1a:	e07e      	b.n	800301a <UART_SetConfig+0x2e6>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f22:	e07a      	b.n	800301a <UART_SetConfig+0x2e6>
 8002f24:	2308      	movs	r3, #8
 8002f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f2a:	e076      	b.n	800301a <UART_SetConfig+0x2e6>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f32:	e072      	b.n	800301a <UART_SetConfig+0x2e6>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a35      	ldr	r2, [pc, #212]	@ (8003010 <UART_SetConfig+0x2dc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d12a      	bne.n	8002f94 <UART_SetConfig+0x260>
 8002f3e:	4b30      	ldr	r3, [pc, #192]	@ (8003000 <UART_SetConfig+0x2cc>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f4c:	d01a      	beq.n	8002f84 <UART_SetConfig+0x250>
 8002f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f52:	d81b      	bhi.n	8002f8c <UART_SetConfig+0x258>
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f58:	d00c      	beq.n	8002f74 <UART_SetConfig+0x240>
 8002f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f5e:	d815      	bhi.n	8002f8c <UART_SetConfig+0x258>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <UART_SetConfig+0x238>
 8002f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f68:	d008      	beq.n	8002f7c <UART_SetConfig+0x248>
 8002f6a:	e00f      	b.n	8002f8c <UART_SetConfig+0x258>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f72:	e052      	b.n	800301a <UART_SetConfig+0x2e6>
 8002f74:	2302      	movs	r3, #2
 8002f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f7a:	e04e      	b.n	800301a <UART_SetConfig+0x2e6>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f82:	e04a      	b.n	800301a <UART_SetConfig+0x2e6>
 8002f84:	2308      	movs	r3, #8
 8002f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f8a:	e046      	b.n	800301a <UART_SetConfig+0x2e6>
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f92:	e042      	b.n	800301a <UART_SetConfig+0x2e6>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a17      	ldr	r2, [pc, #92]	@ (8002ff8 <UART_SetConfig+0x2c4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d13a      	bne.n	8003014 <UART_SetConfig+0x2e0>
 8002f9e:	4b18      	ldr	r3, [pc, #96]	@ (8003000 <UART_SetConfig+0x2cc>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fa8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fac:	d01a      	beq.n	8002fe4 <UART_SetConfig+0x2b0>
 8002fae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fb2:	d81b      	bhi.n	8002fec <UART_SetConfig+0x2b8>
 8002fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb8:	d00c      	beq.n	8002fd4 <UART_SetConfig+0x2a0>
 8002fba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fbe:	d815      	bhi.n	8002fec <UART_SetConfig+0x2b8>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <UART_SetConfig+0x298>
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc8:	d008      	beq.n	8002fdc <UART_SetConfig+0x2a8>
 8002fca:	e00f      	b.n	8002fec <UART_SetConfig+0x2b8>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd2:	e022      	b.n	800301a <UART_SetConfig+0x2e6>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fda:	e01e      	b.n	800301a <UART_SetConfig+0x2e6>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fe2:	e01a      	b.n	800301a <UART_SetConfig+0x2e6>
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fea:	e016      	b.n	800301a <UART_SetConfig+0x2e6>
 8002fec:	2310      	movs	r3, #16
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ff2:	e012      	b.n	800301a <UART_SetConfig+0x2e6>
 8002ff4:	efff69f3 	.word	0xefff69f3
 8002ff8:	40008000 	.word	0x40008000
 8002ffc:	40013800 	.word	0x40013800
 8003000:	40021000 	.word	0x40021000
 8003004:	40004400 	.word	0x40004400
 8003008:	40004800 	.word	0x40004800
 800300c:	40004c00 	.word	0x40004c00
 8003010:	40005000 	.word	0x40005000
 8003014:	2310      	movs	r3, #16
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a9f      	ldr	r2, [pc, #636]	@ (800329c <UART_SetConfig+0x568>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d17a      	bne.n	800311a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003024:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003028:	2b08      	cmp	r3, #8
 800302a:	d824      	bhi.n	8003076 <UART_SetConfig+0x342>
 800302c:	a201      	add	r2, pc, #4	@ (adr r2, 8003034 <UART_SetConfig+0x300>)
 800302e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003032:	bf00      	nop
 8003034:	08003059 	.word	0x08003059
 8003038:	08003077 	.word	0x08003077
 800303c:	08003061 	.word	0x08003061
 8003040:	08003077 	.word	0x08003077
 8003044:	08003067 	.word	0x08003067
 8003048:	08003077 	.word	0x08003077
 800304c:	08003077 	.word	0x08003077
 8003050:	08003077 	.word	0x08003077
 8003054:	0800306f 	.word	0x0800306f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003058:	f7fe fd54 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 800305c:	61f8      	str	r0, [r7, #28]
        break;
 800305e:	e010      	b.n	8003082 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003060:	4b8f      	ldr	r3, [pc, #572]	@ (80032a0 <UART_SetConfig+0x56c>)
 8003062:	61fb      	str	r3, [r7, #28]
        break;
 8003064:	e00d      	b.n	8003082 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003066:	f7fe fcb5 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 800306a:	61f8      	str	r0, [r7, #28]
        break;
 800306c:	e009      	b.n	8003082 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800306e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003072:	61fb      	str	r3, [r7, #28]
        break;
 8003074:	e005      	b.n	8003082 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003080:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80fb 	beq.w	8003280 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	429a      	cmp	r2, r3
 8003098:	d305      	bcc.n	80030a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d903      	bls.n	80030ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030ac:	e0e8      	b.n	8003280 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2200      	movs	r2, #0
 80030b2:	461c      	mov	r4, r3
 80030b4:	4615      	mov	r5, r2
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	022b      	lsls	r3, r5, #8
 80030c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80030c4:	0222      	lsls	r2, r4, #8
 80030c6:	68f9      	ldr	r1, [r7, #12]
 80030c8:	6849      	ldr	r1, [r1, #4]
 80030ca:	0849      	lsrs	r1, r1, #1
 80030cc:	2000      	movs	r0, #0
 80030ce:	4688      	mov	r8, r1
 80030d0:	4681      	mov	r9, r0
 80030d2:	eb12 0a08 	adds.w	sl, r2, r8
 80030d6:	eb43 0b09 	adc.w	fp, r3, r9
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030e8:	4650      	mov	r0, sl
 80030ea:	4659      	mov	r1, fp
 80030ec:	f7fd f870 	bl	80001d0 <__aeabi_uldivmod>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4613      	mov	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030fe:	d308      	bcc.n	8003112 <UART_SetConfig+0x3de>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003106:	d204      	bcs.n	8003112 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	e0b6      	b.n	8003280 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003118:	e0b2      	b.n	8003280 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003122:	d15e      	bne.n	80031e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003124:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003128:	2b08      	cmp	r3, #8
 800312a:	d828      	bhi.n	800317e <UART_SetConfig+0x44a>
 800312c:	a201      	add	r2, pc, #4	@ (adr r2, 8003134 <UART_SetConfig+0x400>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003159 	.word	0x08003159
 8003138:	08003161 	.word	0x08003161
 800313c:	08003169 	.word	0x08003169
 8003140:	0800317f 	.word	0x0800317f
 8003144:	0800316f 	.word	0x0800316f
 8003148:	0800317f 	.word	0x0800317f
 800314c:	0800317f 	.word	0x0800317f
 8003150:	0800317f 	.word	0x0800317f
 8003154:	08003177 	.word	0x08003177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003158:	f7fe fcd4 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 800315c:	61f8      	str	r0, [r7, #28]
        break;
 800315e:	e014      	b.n	800318a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003160:	f7fe fce6 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8003164:	61f8      	str	r0, [r7, #28]
        break;
 8003166:	e010      	b.n	800318a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003168:	4b4d      	ldr	r3, [pc, #308]	@ (80032a0 <UART_SetConfig+0x56c>)
 800316a:	61fb      	str	r3, [r7, #28]
        break;
 800316c:	e00d      	b.n	800318a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316e:	f7fe fc31 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8003172:	61f8      	str	r0, [r7, #28]
        break;
 8003174:	e009      	b.n	800318a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800317a:	61fb      	str	r3, [r7, #28]
        break;
 800317c:	e005      	b.n	800318a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003188:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d077      	beq.n	8003280 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005a      	lsls	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	441a      	add	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b0f      	cmp	r3, #15
 80031aa:	d916      	bls.n	80031da <UART_SetConfig+0x4a6>
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b2:	d212      	bcs.n	80031da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f023 030f 	bic.w	r3, r3, #15
 80031bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	8afb      	ldrh	r3, [r7, #22]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	8afa      	ldrh	r2, [r7, #22]
 80031d6:	60da      	str	r2, [r3, #12]
 80031d8:	e052      	b.n	8003280 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80031e0:	e04e      	b.n	8003280 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d827      	bhi.n	800323a <UART_SetConfig+0x506>
 80031ea:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <UART_SetConfig+0x4bc>)
 80031ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f0:	08003215 	.word	0x08003215
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	08003225 	.word	0x08003225
 80031fc:	0800323b 	.word	0x0800323b
 8003200:	0800322b 	.word	0x0800322b
 8003204:	0800323b 	.word	0x0800323b
 8003208:	0800323b 	.word	0x0800323b
 800320c:	0800323b 	.word	0x0800323b
 8003210:	08003233 	.word	0x08003233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003214:	f7fe fc76 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8003218:	61f8      	str	r0, [r7, #28]
        break;
 800321a:	e014      	b.n	8003246 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800321c:	f7fe fc88 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8003220:	61f8      	str	r0, [r7, #28]
        break;
 8003222:	e010      	b.n	8003246 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003224:	4b1e      	ldr	r3, [pc, #120]	@ (80032a0 <UART_SetConfig+0x56c>)
 8003226:	61fb      	str	r3, [r7, #28]
        break;
 8003228:	e00d      	b.n	8003246 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322a:	f7fe fbd3 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 800322e:	61f8      	str	r0, [r7, #28]
        break;
 8003230:	e009      	b.n	8003246 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003236:	61fb      	str	r3, [r7, #28]
        break;
 8003238:	e005      	b.n	8003246 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003244:	bf00      	nop
    }

    if (pclk != 0U)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d019      	beq.n	8003280 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	085a      	lsrs	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	441a      	add	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b0f      	cmp	r3, #15
 8003264:	d909      	bls.n	800327a <UART_SetConfig+0x546>
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800326c:	d205      	bcs.n	800327a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	e002      	b.n	8003280 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800328c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003290:	4618      	mov	r0, r3
 8003292:	3728      	adds	r7, #40	@ 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800329a:	bf00      	nop
 800329c:	40008000 	.word	0x40008000
 80032a0:	00f42400 	.word	0x00f42400

080032a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01a      	beq.n	80033ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033a2:	d10a      	bne.n	80033ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
  }
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b098      	sub	sp, #96	@ 0x60
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033f8:	f7fd fb14 	bl	8000a24 <HAL_GetTick>
 80033fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b08      	cmp	r3, #8
 800340a:	d12e      	bne.n	800346a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800340c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003414:	2200      	movs	r2, #0
 8003416:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f88c 	bl	8003538 <UART_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d021      	beq.n	800346a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800343a:	653b      	str	r3, [r7, #80]	@ 0x50
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003444:	647b      	str	r3, [r7, #68]	@ 0x44
 8003446:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800344a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e6      	bne.n	8003426 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e062      	b.n	8003530 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b04      	cmp	r3, #4
 8003476:	d149      	bne.n	800350c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003478:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003480:	2200      	movs	r2, #0
 8003482:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f856 	bl	8003538 <UART_WaitOnFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d03c      	beq.n	800350c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	e853 3f00 	ldrex	r3, [r3]
 800349e:	623b      	str	r3, [r7, #32]
   return(result);
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80034b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e6      	bne.n	8003492 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3308      	adds	r3, #8
 80034ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3308      	adds	r3, #8
 80034e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034e4:	61fa      	str	r2, [r7, #28]
 80034e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	69b9      	ldr	r1, [r7, #24]
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	617b      	str	r3, [r7, #20]
   return(result);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e5      	bne.n	80034c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e011      	b.n	8003530 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3758      	adds	r7, #88	@ 0x58
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003548:	e04f      	b.n	80035ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d04b      	beq.n	80035ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7fd fa67 	bl	8000a24 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <UART_WaitOnFlagUntilTimeout+0x30>
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e04e      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d037      	beq.n	80035ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b80      	cmp	r3, #128	@ 0x80
 800357e:	d034      	beq.n	80035ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b40      	cmp	r3, #64	@ 0x40
 8003584:	d031      	beq.n	80035ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b08      	cmp	r3, #8
 8003592:	d110      	bne.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2208      	movs	r2, #8
 800359a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f838 	bl	8003612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2208      	movs	r2, #8
 80035a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e029      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035c4:	d111      	bne.n	80035ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f81e 	bl	8003612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e00f      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	429a      	cmp	r2, r3
 8003606:	d0a0      	beq.n	800354a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003612:	b480      	push	{r7}
 8003614:	b095      	sub	sp, #84	@ 0x54
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800362e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003638:	643b      	str	r3, [r7, #64]	@ 0x40
 800363a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800363e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e6      	bne.n	800361a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3308      	adds	r3, #8
 8003652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	61fb      	str	r3, [r7, #28]
   return(result);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800366c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800366e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003684:	2b01      	cmp	r3, #1
 8003686:	d118      	bne.n	80036ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	60bb      	str	r3, [r7, #8]
   return(result);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f023 0310 	bic.w	r3, r3, #16
 800369c:	647b      	str	r3, [r7, #68]	@ 0x44
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	6979      	ldr	r1, [r7, #20]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	613b      	str	r3, [r7, #16]
   return(result);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e6      	bne.n	8003688 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036ce:	bf00      	nop
 80036d0:	3754      	adds	r7, #84	@ 0x54
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <__NVIC_SetPriority>:
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	6039      	str	r1, [r7, #0]
 80036e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	db0a      	blt.n	8003706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	490c      	ldr	r1, [pc, #48]	@ (8003728 <__NVIC_SetPriority+0x4c>)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	0112      	lsls	r2, r2, #4
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	440b      	add	r3, r1
 8003700:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003704:	e00a      	b.n	800371c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4908      	ldr	r1, [pc, #32]	@ (800372c <__NVIC_SetPriority+0x50>)
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	3b04      	subs	r3, #4
 8003714:	0112      	lsls	r2, r2, #4
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	440b      	add	r3, r1
 800371a:	761a      	strb	r2, [r3, #24]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000e100 	.word	0xe000e100
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003734:	4b05      	ldr	r3, [pc, #20]	@ (800374c <SysTick_Handler+0x1c>)
 8003736:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003738:	f002 f996 	bl	8005a68 <xTaskGetSchedulerState>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d001      	beq.n	8003746 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003742:	f003 f891 	bl	8006868 <xPortSysTickHandler>
  }
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	e000e010 	.word	0xe000e010

08003750 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003754:	2100      	movs	r1, #0
 8003756:	f06f 0004 	mvn.w	r0, #4
 800375a:	f7ff ffbf 	bl	80036dc <__NVIC_SetPriority>
#endif
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800376a:	f3ef 8305 	mrs	r3, IPSR
 800376e:	603b      	str	r3, [r7, #0]
  return(result);
 8003770:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003776:	f06f 0305 	mvn.w	r3, #5
 800377a:	607b      	str	r3, [r7, #4]
 800377c:	e00c      	b.n	8003798 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800377e:	4b0a      	ldr	r3, [pc, #40]	@ (80037a8 <osKernelInitialize+0x44>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d105      	bne.n	8003792 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003786:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <osKernelInitialize+0x44>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800378c:	2300      	movs	r3, #0
 800378e:	607b      	str	r3, [r7, #4]
 8003790:	e002      	b.n	8003798 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003798:	687b      	ldr	r3, [r7, #4]
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000164 	.word	0x20000164

080037ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037b2:	f3ef 8305 	mrs	r3, IPSR
 80037b6:	603b      	str	r3, [r7, #0]
  return(result);
 80037b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80037be:	f06f 0305 	mvn.w	r3, #5
 80037c2:	607b      	str	r3, [r7, #4]
 80037c4:	e010      	b.n	80037e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037c6:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <osKernelStart+0x48>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d109      	bne.n	80037e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037ce:	f7ff ffbf 	bl	8003750 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037d2:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <osKernelStart+0x48>)
 80037d4:	2202      	movs	r2, #2
 80037d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037d8:	f001 fce2 	bl	80051a0 <vTaskStartScheduler>
      stat = osOK;
 80037dc:	2300      	movs	r3, #0
 80037de:	607b      	str	r3, [r7, #4]
 80037e0:	e002      	b.n	80037e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295
 80037e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037e8:	687b      	ldr	r3, [r7, #4]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000164 	.word	0x20000164

080037f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08e      	sub	sp, #56	@ 0x38
 80037fc:	af04      	add	r7, sp, #16
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003808:	f3ef 8305 	mrs	r3, IPSR
 800380c:	617b      	str	r3, [r7, #20]
  return(result);
 800380e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003810:	2b00      	cmp	r3, #0
 8003812:	d17e      	bne.n	8003912 <osThreadNew+0x11a>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d07b      	beq.n	8003912 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800381e:	2318      	movs	r3, #24
 8003820:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d045      	beq.n	80038be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <osThreadNew+0x48>
        name = attr->name;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <osThreadNew+0x6e>
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b38      	cmp	r3, #56	@ 0x38
 8003858:	d805      	bhi.n	8003866 <osThreadNew+0x6e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <osThreadNew+0x72>
        return (NULL);
 8003866:	2300      	movs	r3, #0
 8003868:	e054      	b.n	8003914 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00e      	beq.n	80038a0 <osThreadNew+0xa8>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2ba7      	cmp	r3, #167	@ 0xa7
 8003888:	d90a      	bls.n	80038a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800388e:	2b00      	cmp	r3, #0
 8003890:	d006      	beq.n	80038a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <osThreadNew+0xa8>
        mem = 1;
 800389a:	2301      	movs	r3, #1
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	e010      	b.n	80038c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10c      	bne.n	80038c2 <osThreadNew+0xca>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d108      	bne.n	80038c2 <osThreadNew+0xca>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <osThreadNew+0xca>
          mem = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e001      	b.n	80038c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d110      	bne.n	80038ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038d0:	9202      	str	r2, [sp, #8]
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	6a3a      	ldr	r2, [r7, #32]
 80038dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f001 fa6a 	bl	8004db8 <xTaskCreateStatic>
 80038e4:	4603      	mov	r3, r0
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	e013      	b.n	8003912 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d110      	bne.n	8003912 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	f107 0310 	add.w	r3, r7, #16
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f001 fab8 	bl	8004e78 <xTaskCreate>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d001      	beq.n	8003912 <osThreadNew+0x11a>
            hTask = NULL;
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003912:	693b      	ldr	r3, [r7, #16]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3728      	adds	r7, #40	@ 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003924:	f3ef 8305 	mrs	r3, IPSR
 8003928:	60bb      	str	r3, [r7, #8]
  return(result);
 800392a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <osDelay+0x1c>
    stat = osErrorISR;
 8003930:	f06f 0305 	mvn.w	r3, #5
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	e007      	b.n	8003948 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f001 fbf6 	bl	8005134 <vTaskDelay>
    }
  }

  return (stat);
 8003948:	68fb      	ldr	r3, [r7, #12]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003952:	b580      	push	{r7, lr}
 8003954:	b08a      	sub	sp, #40	@ 0x28
 8003956:	af02      	add	r7, sp, #8
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003962:	f3ef 8305 	mrs	r3, IPSR
 8003966:	613b      	str	r3, [r7, #16]
  return(result);
 8003968:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800396a:	2b00      	cmp	r3, #0
 800396c:	d175      	bne.n	8003a5a <osSemaphoreNew+0x108>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d072      	beq.n	8003a5a <osSemaphoreNew+0x108>
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	429a      	cmp	r2, r3
 800397a:	d86e      	bhi.n	8003a5a <osSemaphoreNew+0x108>
    mem = -1;
 800397c:	f04f 33ff 	mov.w	r3, #4294967295
 8003980:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d015      	beq.n	80039b4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <osSemaphoreNew+0x4c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b4f      	cmp	r3, #79	@ 0x4f
 8003996:	d902      	bls.n	800399e <osSemaphoreNew+0x4c>
        mem = 1;
 8003998:	2301      	movs	r3, #1
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e00c      	b.n	80039b8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d108      	bne.n	80039b8 <osSemaphoreNew+0x66>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d104      	bne.n	80039b8 <osSemaphoreNew+0x66>
          mem = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e001      	b.n	80039b8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d04c      	beq.n	8003a5a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d128      	bne.n	8003a18 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d10a      	bne.n	80039e2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2203      	movs	r2, #3
 80039d2:	9200      	str	r2, [sp, #0]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	2001      	movs	r0, #1
 80039da:	f000 fa2b 	bl	8003e34 <xQueueGenericCreateStatic>
 80039de:	61f8      	str	r0, [r7, #28]
 80039e0:	e005      	b.n	80039ee <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80039e2:	2203      	movs	r2, #3
 80039e4:	2100      	movs	r1, #0
 80039e6:	2001      	movs	r0, #1
 80039e8:	f000 faa1 	bl	8003f2e <xQueueGenericCreate>
 80039ec:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d022      	beq.n	8003a3a <osSemaphoreNew+0xe8>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01f      	beq.n	8003a3a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80039fa:	2300      	movs	r3, #0
 80039fc:	2200      	movs	r2, #0
 80039fe:	2100      	movs	r1, #0
 8003a00:	69f8      	ldr	r0, [r7, #28]
 8003a02:	f000 fb61 	bl	80040c8 <xQueueGenericSend>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d016      	beq.n	8003a3a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003a0c:	69f8      	ldr	r0, [r7, #28]
 8003a0e:	f000 ffff 	bl	8004a10 <vQueueDelete>
            hSemaphore = NULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	e010      	b.n	8003a3a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d108      	bne.n	8003a30 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fadf 	bl	8003fea <xQueueCreateCountingSemaphoreStatic>
 8003a2c:	61f8      	str	r0, [r7, #28]
 8003a2e:	e004      	b.n	8003a3a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fb12 	bl	800405c <xQueueCreateCountingSemaphore>
 8003a38:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00c      	beq.n	8003a5a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <osSemaphoreNew+0xfc>
          name = attr->name;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	e001      	b.n	8003a52 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003a52:	6979      	ldr	r1, [r7, #20]
 8003a54:	69f8      	ldr	r0, [r7, #28]
 8003a56:	f001 f927 	bl	8004ca8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003a5a:	69fb      	ldr	r3, [r7, #28]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003a7c:	f06f 0303 	mvn.w	r3, #3
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	e039      	b.n	8003af8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a84:	f3ef 8305 	mrs	r3, IPSR
 8003a88:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d022      	beq.n	8003ad6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003a96:	f06f 0303 	mvn.w	r3, #3
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e02c      	b.n	8003af8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	6938      	ldr	r0, [r7, #16]
 8003aac:	f000 ff2e 	bl	800490c <xQueueReceiveFromISR>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d003      	beq.n	8003abe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003ab6:	f06f 0302 	mvn.w	r3, #2
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e01c      	b.n	8003af8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d019      	beq.n	8003af8 <osSemaphoreAcquire+0x94>
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b04 <osSemaphoreAcquire+0xa0>)
 8003ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	e010      	b.n	8003af8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003ad6:	6839      	ldr	r1, [r7, #0]
 8003ad8:	6938      	ldr	r0, [r7, #16]
 8003ada:	f000 fe07 	bl	80046ec <xQueueSemaphoreTake>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d009      	beq.n	8003af8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003aea:	f06f 0301 	mvn.w	r3, #1
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e002      	b.n	8003af8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003af2:	f06f 0302 	mvn.w	r3, #2
 8003af6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003af8:	697b      	ldr	r3, [r7, #20]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	e000ed04 	.word	0xe000ed04

08003b08 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003b1e:	f06f 0303 	mvn.w	r3, #3
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e02c      	b.n	8003b80 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b26:	f3ef 8305 	mrs	r3, IPSR
 8003b2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01a      	beq.n	8003b68 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6938      	ldr	r0, [r7, #16]
 8003b3e:	f000 fc63 	bl	8004408 <xQueueGiveFromISR>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d003      	beq.n	8003b50 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003b48:	f06f 0302 	mvn.w	r3, #2
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e017      	b.n	8003b80 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d014      	beq.n	8003b80 <osSemaphoreRelease+0x78>
 8003b56:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <osSemaphoreRelease+0x84>)
 8003b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	e00b      	b.n	8003b80 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003b68:	2300      	movs	r3, #0
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	6938      	ldr	r0, [r7, #16]
 8003b70:	f000 faaa 	bl	80040c8 <xQueueGenericSend>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d002      	beq.n	8003b80 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003b7a:	f06f 0302 	mvn.w	r3, #2
 8003b7e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003b80:	697b      	ldr	r3, [r7, #20]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	e000ed04 	.word	0xe000ed04

08003b90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a07      	ldr	r2, [pc, #28]	@ (8003bbc <vApplicationGetIdleTaskMemory+0x2c>)
 8003ba0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4a06      	ldr	r2, [pc, #24]	@ (8003bc0 <vApplicationGetIdleTaskMemory+0x30>)
 8003ba6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2280      	movs	r2, #128	@ 0x80
 8003bac:	601a      	str	r2, [r3, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000168 	.word	0x20000168
 8003bc0:	20000210 	.word	0x20000210

08003bc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a07      	ldr	r2, [pc, #28]	@ (8003bf0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003bd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4a06      	ldr	r2, [pc, #24]	@ (8003bf4 <vApplicationGetTimerTaskMemory+0x30>)
 8003bda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003be2:	601a      	str	r2, [r3, #0]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	20000410 	.word	0x20000410
 8003bf4:	200004b8 	.word	0x200004b8

08003bf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f103 0208 	add.w	r2, r3, #8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f103 0208 	add.w	r2, r3, #8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f103 0208 	add.w	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	601a      	str	r2, [r3, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d103      	bne.n	8003cba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e00c      	b.n	8003cd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	e002      	b.n	8003cc8 <vListInsert+0x2e>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d2f6      	bcs.n	8003cc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	601a      	str	r2, [r3, #0]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6892      	ldr	r2, [r2, #8]
 8003d22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6852      	ldr	r2, [r2, #4]
 8003d2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d103      	bne.n	8003d40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	1e5a      	subs	r2, r3, #1
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d8c:	f002 fcdc 	bl	8006748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d98:	68f9      	ldr	r1, [r7, #12]
 8003d9a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	441a      	add	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	68f9      	ldr	r1, [r7, #12]
 8003dc0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	441a      	add	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	22ff      	movs	r2, #255	@ 0xff
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	22ff      	movs	r2, #255	@ 0xff
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d114      	bne.n	8003e0c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d01a      	beq.n	8003e20 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3310      	adds	r3, #16
 8003dee:	4618      	mov	r0, r3
 8003df0:	f001 fc74 	bl	80056dc <xTaskRemoveFromEventList>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d012      	beq.n	8003e20 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003e30 <xQueueGenericReset+0xd0>)
 8003dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	e009      	b.n	8003e20 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3310      	adds	r3, #16
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff fef1 	bl	8003bf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3324      	adds	r3, #36	@ 0x24
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff feec 	bl	8003bf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e20:	f002 fcc4 	bl	80067ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e24:	2301      	movs	r3, #1
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08e      	sub	sp, #56	@ 0x38
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10b      	bne.n	8003e60 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	e7fd      	b.n	8003e7a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <xQueueGenericCreateStatic+0x56>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <xQueueGenericCreateStatic+0x5a>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <xQueueGenericCreateStatic+0x5c>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	623b      	str	r3, [r7, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
 8003eaa:	e7fd      	b.n	8003ea8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <xQueueGenericCreateStatic+0x84>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <xQueueGenericCreateStatic+0x88>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <xQueueGenericCreateStatic+0x8a>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	61fb      	str	r3, [r7, #28]
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	e7fd      	b.n	8003ed6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003eda:	2350      	movs	r3, #80	@ 0x50
 8003edc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b50      	cmp	r3, #80	@ 0x50
 8003ee2:	d00b      	beq.n	8003efc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	61bb      	str	r3, [r7, #24]
}
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	e7fd      	b.n	8003ef8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003efc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f10:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f840 	bl	8003fa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3730      	adds	r7, #48	@ 0x30
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b08a      	sub	sp, #40	@ 0x28
 8003f32:	af02      	add	r7, sp, #8
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	613b      	str	r3, [r7, #16]
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	e7fd      	b.n	8003f56 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	3350      	adds	r3, #80	@ 0x50
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f002 fd0f 	bl	800698c <pvPortMalloc>
 8003f6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d011      	beq.n	8003f9a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	3350      	adds	r3, #80	@ 0x50
 8003f7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f88:	79fa      	ldrb	r2, [r7, #7]
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f805 	bl	8003fa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
	}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d103      	bne.n	8003fc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e002      	b.n	8003fc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	69b8      	ldr	r0, [r7, #24]
 8003fd6:	f7ff fec3 	bl	8003d60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b08a      	sub	sp, #40	@ 0x28
 8003fee:	af02      	add	r7, sp, #8
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10b      	bne.n	8004014 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	61bb      	str	r3, [r7, #24]
}
 800400e:	bf00      	nop
 8004010:	bf00      	nop
 8004012:	e7fd      	b.n	8004010 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	429a      	cmp	r2, r3
 800401a:	d90b      	bls.n	8004034 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	617b      	str	r3, [r7, #20]
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004034:	2302      	movs	r3, #2
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	2100      	movs	r1, #0
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff fef8 	bl	8003e34 <xQueueGenericCreateStatic>
 8004044:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004052:	69fb      	ldr	r3, [r7, #28]
	}
 8004054:	4618      	mov	r0, r3
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10b      	bne.n	8004084 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	613b      	str	r3, [r7, #16]
}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	e7fd      	b.n	8004080 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	429a      	cmp	r2, r3
 800408a:	d90b      	bls.n	80040a4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	60fb      	str	r3, [r7, #12]
}
 800409e:	bf00      	nop
 80040a0:	bf00      	nop
 80040a2:	e7fd      	b.n	80040a0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80040a4:	2202      	movs	r2, #2
 80040a6:	2100      	movs	r1, #0
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ff40 	bl	8003f2e <xQueueGenericCreate>
 80040ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80040bc:	697b      	ldr	r3, [r7, #20]
	}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08e      	sub	sp, #56	@ 0x38
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040d6:	2300      	movs	r3, #0
 80040d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80040de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10b      	bne.n	80040fc <xQueueGenericSend+0x34>
	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	e7fd      	b.n	80040f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d103      	bne.n	800410a <xQueueGenericSend+0x42>
 8004102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <xQueueGenericSend+0x46>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <xQueueGenericSend+0x48>
 800410e:	2300      	movs	r3, #0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <xQueueGenericSend+0x64>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004126:	bf00      	nop
 8004128:	bf00      	nop
 800412a:	e7fd      	b.n	8004128 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d103      	bne.n	800413a <xQueueGenericSend+0x72>
 8004132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <xQueueGenericSend+0x76>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <xQueueGenericSend+0x78>
 800413e:	2300      	movs	r3, #0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <xQueueGenericSend+0x94>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	623b      	str	r3, [r7, #32]
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	e7fd      	b.n	8004158 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800415c:	f001 fc84 	bl	8005a68 <xTaskGetSchedulerState>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d102      	bne.n	800416c <xQueueGenericSend+0xa4>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <xQueueGenericSend+0xa8>
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <xQueueGenericSend+0xaa>
 8004170:	2300      	movs	r3, #0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <xQueueGenericSend+0xc6>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	61fb      	str	r3, [r7, #28]
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	e7fd      	b.n	800418a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800418e:	f002 fadb 	bl	8006748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004194:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419a:	429a      	cmp	r2, r3
 800419c:	d302      	bcc.n	80041a4 <xQueueGenericSend+0xdc>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d129      	bne.n	80041f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041aa:	f000 fc6d 	bl	8004a88 <prvCopyDataToQueue>
 80041ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d010      	beq.n	80041da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ba:	3324      	adds	r3, #36	@ 0x24
 80041bc:	4618      	mov	r0, r3
 80041be:	f001 fa8d 	bl	80056dc <xTaskRemoveFromEventList>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d013      	beq.n	80041f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041c8:	4b3f      	ldr	r3, [pc, #252]	@ (80042c8 <xQueueGenericSend+0x200>)
 80041ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	e00a      	b.n	80041f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041e0:	4b39      	ldr	r3, [pc, #228]	@ (80042c8 <xQueueGenericSend+0x200>)
 80041e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041f0:	f002 fadc 	bl	80067ac <vPortExitCritical>
				return pdPASS;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e063      	b.n	80042c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041fe:	f002 fad5 	bl	80067ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004202:	2300      	movs	r3, #0
 8004204:	e05c      	b.n	80042c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	2b00      	cmp	r3, #0
 800420a:	d106      	bne.n	800421a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800420c:	f107 0314 	add.w	r3, r7, #20
 8004210:	4618      	mov	r0, r3
 8004212:	f001 fac7 	bl	80057a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004216:	2301      	movs	r3, #1
 8004218:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800421a:	f002 fac7 	bl	80067ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800421e:	f001 f82f 	bl	8005280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004222:	f002 fa91 	bl	8006748 <vPortEnterCritical>
 8004226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004228:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800422c:	b25b      	sxtb	r3, r3
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d103      	bne.n	800423c <xQueueGenericSend+0x174>
 8004234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800423c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004242:	b25b      	sxtb	r3, r3
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d103      	bne.n	8004252 <xQueueGenericSend+0x18a>
 800424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004252:	f002 faab 	bl	80067ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004256:	1d3a      	adds	r2, r7, #4
 8004258:	f107 0314 	add.w	r3, r7, #20
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f001 fab6 	bl	80057d0 <xTaskCheckForTimeOut>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d124      	bne.n	80042b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800426a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800426c:	f000 fd04 	bl	8004c78 <prvIsQueueFull>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d018      	beq.n	80042a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004278:	3310      	adds	r3, #16
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4611      	mov	r1, r2
 800427e:	4618      	mov	r0, r3
 8004280:	f001 f9da 	bl	8005638 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004286:	f000 fc8f 	bl	8004ba8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800428a:	f001 f807 	bl	800529c <xTaskResumeAll>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	f47f af7c 	bne.w	800418e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004296:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <xQueueGenericSend+0x200>)
 8004298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	e772      	b.n	800418e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042aa:	f000 fc7d 	bl	8004ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042ae:	f000 fff5 	bl	800529c <xTaskResumeAll>
 80042b2:	e76c      	b.n	800418e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042b6:	f000 fc77 	bl	8004ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042ba:	f000 ffef 	bl	800529c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3738      	adds	r7, #56	@ 0x38
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	e000ed04 	.word	0xe000ed04

080042cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b090      	sub	sp, #64	@ 0x40
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80042de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d103      	bne.n	800430a <xQueueGenericSendFromISR+0x3e>
 8004302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <xQueueGenericSendFromISR+0x42>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <xQueueGenericSendFromISR+0x44>
 800430e:	2300      	movs	r3, #0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	e7fd      	b.n	8004328 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d103      	bne.n	800433a <xQueueGenericSendFromISR+0x6e>
 8004332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <xQueueGenericSendFromISR+0x72>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <xQueueGenericSendFromISR+0x74>
 800433e:	2300      	movs	r3, #0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	623b      	str	r3, [r7, #32]
}
 8004356:	bf00      	nop
 8004358:	bf00      	nop
 800435a:	e7fd      	b.n	8004358 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800435c:	f002 fad4 	bl	8006908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004360:	f3ef 8211 	mrs	r2, BASEPRI
 8004364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	61fa      	str	r2, [r7, #28]
 8004376:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004378:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800437a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800437c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004384:	429a      	cmp	r2, r3
 8004386:	d302      	bcc.n	800438e <xQueueGenericSendFromISR+0xc2>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d12f      	bne.n	80043ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800438e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004390:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004394:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80043a4:	f000 fb70 	bl	8004a88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d112      	bne.n	80043d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043bc:	3324      	adds	r3, #36	@ 0x24
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 f98c 	bl	80056dc <xTaskRemoveFromEventList>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00b      	beq.n	80043e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e007      	b.n	80043e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80043dc:	3301      	adds	r3, #1
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	b25a      	sxtb	r2, r3
 80043e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80043e8:	2301      	movs	r3, #1
 80043ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80043ec:	e001      	b.n	80043f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004400:	4618      	mov	r0, r3
 8004402:	3740      	adds	r7, #64	@ 0x40
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08e      	sub	sp, #56	@ 0x38
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	623b      	str	r3, [r7, #32]
}
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	e7fd      	b.n	8004430 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	61fb      	str	r3, [r7, #28]
}
 800444e:	bf00      	nop
 8004450:	bf00      	nop
 8004452:	e7fd      	b.n	8004450 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d103      	bne.n	8004464 <xQueueGiveFromISR+0x5c>
 800445c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <xQueueGiveFromISR+0x60>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <xQueueGiveFromISR+0x62>
 8004468:	2300      	movs	r3, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	61bb      	str	r3, [r7, #24]
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	e7fd      	b.n	8004482 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004486:	f002 fa3f 	bl	8006908 <vPortValidateInterruptPriority>
	__asm volatile
 800448a:	f3ef 8211 	mrs	r2, BASEPRI
 800448e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	617a      	str	r2, [r7, #20]
 80044a0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80044a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80044ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d22b      	bcs.n	800450e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d112      	bne.n	80044f8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d016      	beq.n	8004508 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	3324      	adds	r3, #36	@ 0x24
 80044de:	4618      	mov	r0, r3
 80044e0:	f001 f8fc 	bl	80056dc <xTaskRemoveFromEventList>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00e      	beq.n	8004508 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00b      	beq.n	8004508 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2201      	movs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e007      	b.n	8004508 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044fc:	3301      	adds	r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	b25a      	sxtb	r2, r3
 8004502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004508:	2301      	movs	r3, #1
 800450a:	637b      	str	r3, [r7, #52]	@ 0x34
 800450c:	e001      	b.n	8004512 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800450e:	2300      	movs	r3, #0
 8004510:	637b      	str	r3, [r7, #52]	@ 0x34
 8004512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004514:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f383 8811 	msr	BASEPRI, r3
}
 800451c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800451e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004520:	4618      	mov	r0, r3
 8004522:	3738      	adds	r7, #56	@ 0x38
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08c      	sub	sp, #48	@ 0x30
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004534:	2300      	movs	r3, #0
 8004536:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800453c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10b      	bne.n	800455a <xQueueReceive+0x32>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	623b      	str	r3, [r7, #32]
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	e7fd      	b.n	8004556 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <xQueueReceive+0x40>
 8004560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <xQueueReceive+0x44>
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <xQueueReceive+0x46>
 800456c:	2300      	movs	r3, #0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <xQueueReceive+0x62>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	61fb      	str	r3, [r7, #28]
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	e7fd      	b.n	8004586 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800458a:	f001 fa6d 	bl	8005a68 <xTaskGetSchedulerState>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d102      	bne.n	800459a <xQueueReceive+0x72>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <xQueueReceive+0x76>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <xQueueReceive+0x78>
 800459e:	2300      	movs	r3, #0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <xQueueReceive+0x94>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	61bb      	str	r3, [r7, #24]
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045bc:	f002 f8c4 	bl	8006748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01f      	beq.n	800460c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045d0:	f000 fac4 	bl	8004b5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	1e5a      	subs	r2, r3, #1
 80045d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00f      	beq.n	8004604 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	3310      	adds	r3, #16
 80045e8:	4618      	mov	r0, r3
 80045ea:	f001 f877 	bl	80056dc <xTaskRemoveFromEventList>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045f4:	4b3c      	ldr	r3, [pc, #240]	@ (80046e8 <xQueueReceive+0x1c0>)
 80045f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004604:	f002 f8d2 	bl	80067ac <vPortExitCritical>
				return pdPASS;
 8004608:	2301      	movs	r3, #1
 800460a:	e069      	b.n	80046e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004612:	f002 f8cb 	bl	80067ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004616:	2300      	movs	r3, #0
 8004618:	e062      	b.n	80046e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800461a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004620:	f107 0310 	add.w	r3, r7, #16
 8004624:	4618      	mov	r0, r3
 8004626:	f001 f8bd 	bl	80057a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800462a:	2301      	movs	r3, #1
 800462c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800462e:	f002 f8bd 	bl	80067ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004632:	f000 fe25 	bl	8005280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004636:	f002 f887 	bl	8006748 <vPortEnterCritical>
 800463a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004640:	b25b      	sxtb	r3, r3
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	d103      	bne.n	8004650 <xQueueReceive+0x128>
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004652:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004656:	b25b      	sxtb	r3, r3
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d103      	bne.n	8004666 <xQueueReceive+0x13e>
 800465e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004666:	f002 f8a1 	bl	80067ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800466a:	1d3a      	adds	r2, r7, #4
 800466c:	f107 0310 	add.w	r3, r7, #16
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f001 f8ac 	bl	80057d0 <xTaskCheckForTimeOut>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d123      	bne.n	80046c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800467e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004680:	f000 fae4 	bl	8004c4c <prvIsQueueEmpty>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d017      	beq.n	80046ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468c:	3324      	adds	r3, #36	@ 0x24
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4611      	mov	r1, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 ffd0 	bl	8005638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800469a:	f000 fa85 	bl	8004ba8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800469e:	f000 fdfd 	bl	800529c <xTaskResumeAll>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d189      	bne.n	80045bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80046a8:	4b0f      	ldr	r3, [pc, #60]	@ (80046e8 <xQueueReceive+0x1c0>)
 80046aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	e780      	b.n	80045bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046bc:	f000 fa74 	bl	8004ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046c0:	f000 fdec 	bl	800529c <xTaskResumeAll>
 80046c4:	e77a      	b.n	80045bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046c8:	f000 fa6e 	bl	8004ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046cc:	f000 fde6 	bl	800529c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046d2:	f000 fabb 	bl	8004c4c <prvIsQueueEmpty>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f43f af6f 	beq.w	80045bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3730      	adds	r7, #48	@ 0x30
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08e      	sub	sp, #56	@ 0x38
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80046fe:	2300      	movs	r3, #0
 8004700:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	623b      	str	r3, [r7, #32]
}
 800471a:	bf00      	nop
 800471c:	bf00      	nop
 800471e:	e7fd      	b.n	800471c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	61fb      	str	r3, [r7, #28]
}
 800473a:	bf00      	nop
 800473c:	bf00      	nop
 800473e:	e7fd      	b.n	800473c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004740:	f001 f992 	bl	8005a68 <xTaskGetSchedulerState>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <xQueueSemaphoreTake+0x64>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <xQueueSemaphoreTake+0x68>
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <xQueueSemaphoreTake+0x6a>
 8004754:	2300      	movs	r3, #0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10b      	bne.n	8004772 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	61bb      	str	r3, [r7, #24]
}
 800476c:	bf00      	nop
 800476e:	bf00      	nop
 8004770:	e7fd      	b.n	800476e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004772:	f001 ffe9 	bl	8006748 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800477c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477e:	2b00      	cmp	r3, #0
 8004780:	d024      	beq.n	80047cc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004784:	1e5a      	subs	r2, r3, #1
 8004786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004788:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004792:	f001 fae3 	bl	8005d5c <pvTaskIncrementMutexHeldCount>
 8004796:	4602      	mov	r2, r0
 8004798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800479c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00f      	beq.n	80047c4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a6:	3310      	adds	r3, #16
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 ff97 	bl	80056dc <xTaskRemoveFromEventList>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d007      	beq.n	80047c4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047b4:	4b54      	ldr	r3, [pc, #336]	@ (8004908 <xQueueSemaphoreTake+0x21c>)
 80047b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047c4:	f001 fff2 	bl	80067ac <vPortExitCritical>
				return pdPASS;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e098      	b.n	80048fe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d112      	bne.n	80047f8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	617b      	str	r3, [r7, #20]
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	e7fd      	b.n	80047ec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80047f0:	f001 ffdc 	bl	80067ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047f4:	2300      	movs	r3, #0
 80047f6:	e082      	b.n	80048fe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047fe:	f107 030c 	add.w	r3, r7, #12
 8004802:	4618      	mov	r0, r3
 8004804:	f000 ffce 	bl	80057a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800480c:	f001 ffce 	bl	80067ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004810:	f000 fd36 	bl	8005280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004814:	f001 ff98 	bl	8006748 <vPortEnterCritical>
 8004818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800481e:	b25b      	sxtb	r3, r3
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d103      	bne.n	800482e <xQueueSemaphoreTake+0x142>
 8004826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800482e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004830:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004834:	b25b      	sxtb	r3, r3
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d103      	bne.n	8004844 <xQueueSemaphoreTake+0x158>
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004844:	f001 ffb2 	bl	80067ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004848:	463a      	mov	r2, r7
 800484a:	f107 030c 	add.w	r3, r7, #12
 800484e:	4611      	mov	r1, r2
 8004850:	4618      	mov	r0, r3
 8004852:	f000 ffbd 	bl	80057d0 <xTaskCheckForTimeOut>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d132      	bne.n	80048c2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800485c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800485e:	f000 f9f5 	bl	8004c4c <prvIsQueueEmpty>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d026      	beq.n	80048b6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004870:	f001 ff6a 	bl	8006748 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	f001 f913 	bl	8005aa4 <xTaskPriorityInherit>
 800487e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004880:	f001 ff94 	bl	80067ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004886:	3324      	adds	r3, #36	@ 0x24
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	4611      	mov	r1, r2
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fed3 	bl	8005638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004892:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004894:	f000 f988 	bl	8004ba8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004898:	f000 fd00 	bl	800529c <xTaskResumeAll>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f47f af67 	bne.w	8004772 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80048a4:	4b18      	ldr	r3, [pc, #96]	@ (8004908 <xQueueSemaphoreTake+0x21c>)
 80048a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	e75d      	b.n	8004772 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80048b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048b8:	f000 f976 	bl	8004ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048bc:	f000 fcee 	bl	800529c <xTaskResumeAll>
 80048c0:	e757      	b.n	8004772 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80048c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048c4:	f000 f970 	bl	8004ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048c8:	f000 fce8 	bl	800529c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048ce:	f000 f9bd 	bl	8004c4c <prvIsQueueEmpty>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f43f af4c 	beq.w	8004772 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00d      	beq.n	80048fc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80048e0:	f001 ff32 	bl	8006748 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80048e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048e6:	f000 f8b7 	bl	8004a58 <prvGetDisinheritPriorityAfterTimeout>
 80048ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 f9ae 	bl	8005c54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80048f8:	f001 ff58 	bl	80067ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3738      	adds	r7, #56	@ 0x38
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08e      	sub	sp, #56	@ 0x38
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10b      	bne.n	800493a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	623b      	str	r3, [r7, #32]
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	e7fd      	b.n	8004936 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <xQueueReceiveFromISR+0x3c>
 8004940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <xQueueReceiveFromISR+0x40>
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <xQueueReceiveFromISR+0x42>
 800494c:	2300      	movs	r3, #0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	61fb      	str	r3, [r7, #28]
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	e7fd      	b.n	8004966 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800496a:	f001 ffcd 	bl	8006908 <vPortValidateInterruptPriority>
	__asm volatile
 800496e:	f3ef 8211 	mrs	r2, BASEPRI
 8004972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	61ba      	str	r2, [r7, #24]
 8004984:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004986:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004988:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004992:	2b00      	cmp	r3, #0
 8004994:	d02f      	beq.n	80049f6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800499c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049a4:	f000 f8da 	bl	8004b5c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049aa:	1e5a      	subs	r2, r3, #1
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80049b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d112      	bne.n	80049e0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d016      	beq.n	80049f0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c4:	3310      	adds	r3, #16
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fe88 	bl	80056dc <xTaskRemoveFromEventList>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00e      	beq.n	80049f0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00b      	beq.n	80049f0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e007      	b.n	80049f0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80049e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049e4:	3301      	adds	r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	b25a      	sxtb	r2, r3
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80049f0:	2301      	movs	r3, #1
 80049f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f4:	e001      	b.n	80049fa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f383 8811 	msr	BASEPRI, r3
}
 8004a04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3738      	adds	r7, #56	@ 0x38
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <vQueueDelete+0x2a>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	60bb      	str	r3, [r7, #8]
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	e7fd      	b.n	8004a36 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f95e 	bl	8004cfc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f002 f86c 	bl	8006b28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d006      	beq.n	8004a76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	e001      	b.n	8004a7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
	}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10d      	bne.n	8004ac2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d14d      	bne.n	8004b4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 f85e 	bl	8005b74 <xTaskPriorityDisinherit>
 8004ab8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	609a      	str	r2, [r3, #8]
 8004ac0:	e043      	b.n	8004b4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d119      	bne.n	8004afc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6858      	ldr	r0, [r3, #4]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	f002 f9cc 	bl	8006e70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d32b      	bcc.n	8004b4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	e026      	b.n	8004b4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68d8      	ldr	r0, [r3, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b04:	461a      	mov	r2, r3
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	f002 f9b2 	bl	8006e70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	425b      	negs	r3, r3
 8004b16:	441a      	add	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d207      	bcs.n	8004b38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b30:	425b      	negs	r3, r3
 8004b32:	441a      	add	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d105      	bne.n	8004b4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004b52:	697b      	ldr	r3, [r7, #20]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d018      	beq.n	8004ba0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	441a      	add	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d303      	bcc.n	8004b90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68d9      	ldr	r1, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6838      	ldr	r0, [r7, #0]
 8004b9c:	f002 f968 	bl	8006e70 <memcpy>
	}
}
 8004ba0:	bf00      	nop
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bb0:	f001 fdca 	bl	8006748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bbc:	e011      	b.n	8004be2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d012      	beq.n	8004bec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3324      	adds	r3, #36	@ 0x24
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fd86 	bl	80056dc <xTaskRemoveFromEventList>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bd6:	f000 fe5f 	bl	8005898 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	dce9      	bgt.n	8004bbe <prvUnlockQueue+0x16>
 8004bea:	e000      	b.n	8004bee <prvUnlockQueue+0x46>
					break;
 8004bec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	22ff      	movs	r2, #255	@ 0xff
 8004bf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004bf6:	f001 fdd9 	bl	80067ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bfa:	f001 fda5 	bl	8006748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c06:	e011      	b.n	8004c2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d012      	beq.n	8004c36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3310      	adds	r3, #16
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fd61 	bl	80056dc <xTaskRemoveFromEventList>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c20:	f000 fe3a 	bl	8005898 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c24:	7bbb      	ldrb	r3, [r7, #14]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	dce9      	bgt.n	8004c08 <prvUnlockQueue+0x60>
 8004c34:	e000      	b.n	8004c38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	22ff      	movs	r2, #255	@ 0xff
 8004c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004c40:	f001 fdb4 	bl	80067ac <vPortExitCritical>
}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c54:	f001 fd78 	bl	8006748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e001      	b.n	8004c6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c6a:	f001 fd9f 	bl	80067ac <vPortExitCritical>

	return xReturn;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c80:	f001 fd62 	bl	8006748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d102      	bne.n	8004c96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e001      	b.n	8004c9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c9a:	f001 fd87 	bl	80067ac <vPortExitCritical>

	return xReturn;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	e014      	b.n	8004ce2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8004cf8 <vQueueAddToRegistry+0x50>)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10b      	bne.n	8004cdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004cc4:	490c      	ldr	r1, [pc, #48]	@ (8004cf8 <vQueueAddToRegistry+0x50>)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cce:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf8 <vQueueAddToRegistry+0x50>)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cda:	e006      	b.n	8004cea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b07      	cmp	r3, #7
 8004ce6:	d9e7      	bls.n	8004cb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	200008b8 	.word	0x200008b8

08004cfc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e016      	b.n	8004d38 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004d0a:	4a10      	ldr	r2, [pc, #64]	@ (8004d4c <vQueueUnregisterQueue+0x50>)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4413      	add	r3, r2
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d10b      	bne.n	8004d32 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d4c <vQueueUnregisterQueue+0x50>)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2100      	movs	r1, #0
 8004d20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004d24:	4a09      	ldr	r2, [pc, #36]	@ (8004d4c <vQueueUnregisterQueue+0x50>)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	605a      	str	r2, [r3, #4]
				break;
 8004d30:	e006      	b.n	8004d40 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3301      	adds	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b07      	cmp	r3, #7
 8004d3c:	d9e5      	bls.n	8004d0a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004d3e:	bf00      	nop
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	200008b8 	.word	0x200008b8

08004d50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d60:	f001 fcf2 	bl	8006748 <vPortEnterCritical>
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d6a:	b25b      	sxtb	r3, r3
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d103      	bne.n	8004d7a <vQueueWaitForMessageRestricted+0x2a>
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d80:	b25b      	sxtb	r3, r3
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	d103      	bne.n	8004d90 <vQueueWaitForMessageRestricted+0x40>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d90:	f001 fd0c 	bl	80067ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	3324      	adds	r3, #36	@ 0x24
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fc6d 	bl	8005684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004daa:	6978      	ldr	r0, [r7, #20]
 8004dac:	f7ff fefc 	bl	8004ba8 <prvUnlockQueue>
	}
 8004db0:	bf00      	nop
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08e      	sub	sp, #56	@ 0x38
 8004dbc:	af04      	add	r7, sp, #16
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10b      	bne.n	8004de4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	623b      	str	r3, [r7, #32]
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	e7fd      	b.n	8004de0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10b      	bne.n	8004e02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	61fb      	str	r3, [r7, #28]
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	e7fd      	b.n	8004dfe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e02:	23a8      	movs	r3, #168	@ 0xa8
 8004e04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2ba8      	cmp	r3, #168	@ 0xa8
 8004e0a:	d00b      	beq.n	8004e24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	61bb      	str	r3, [r7, #24]
}
 8004e1e:	bf00      	nop
 8004e20:	bf00      	nop
 8004e22:	e7fd      	b.n	8004e20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01e      	beq.n	8004e6a <xTaskCreateStatic+0xb2>
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01b      	beq.n	8004e6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e44:	2300      	movs	r3, #0
 8004e46:	9303      	str	r3, [sp, #12]
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	9302      	str	r3, [sp, #8]
 8004e4c:	f107 0314 	add.w	r3, r7, #20
 8004e50:	9301      	str	r3, [sp, #4]
 8004e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f851 	bl	8004f04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e64:	f000 f8f6 	bl	8005054 <prvAddNewTaskToReadyList>
 8004e68:	e001      	b.n	8004e6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e6e:	697b      	ldr	r3, [r7, #20]
	}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3728      	adds	r7, #40	@ 0x28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08c      	sub	sp, #48	@ 0x30
 8004e7c:	af04      	add	r7, sp, #16
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	4613      	mov	r3, r2
 8004e86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f001 fd7d 	bl	800698c <pvPortMalloc>
 8004e92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00e      	beq.n	8004eb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e9a:	20a8      	movs	r0, #168	@ 0xa8
 8004e9c:	f001 fd76 	bl	800698c <pvPortMalloc>
 8004ea0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	631a      	str	r2, [r3, #48]	@ 0x30
 8004eae:	e005      	b.n	8004ebc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004eb0:	6978      	ldr	r0, [r7, #20]
 8004eb2:	f001 fe39 	bl	8006b28 <vPortFree>
 8004eb6:	e001      	b.n	8004ebc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d017      	beq.n	8004ef2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9303      	str	r3, [sp, #12]
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	9302      	str	r3, [sp, #8]
 8004ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f80f 	bl	8004f04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ee6:	69f8      	ldr	r0, [r7, #28]
 8004ee8:	f000 f8b4 	bl	8005054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004eec:	2301      	movs	r3, #1
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	e002      	b.n	8004ef8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ef8:	69bb      	ldr	r3, [r7, #24]
	}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	21a5      	movs	r1, #165	@ 0xa5
 8004f1e:	f001 ff23 	bl	8006d68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f023 0307 	bic.w	r3, r3, #7
 8004f3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	617b      	str	r3, [r7, #20]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01f      	beq.n	8004fa4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
 8004f68:	e012      	b.n	8004f90 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	4413      	add	r3, r2
 8004f70:	7819      	ldrb	r1, [r3, #0]
 8004f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	3334      	adds	r3, #52	@ 0x34
 8004f7a:	460a      	mov	r2, r1
 8004f7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d006      	beq.n	8004f98 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	d9e9      	bls.n	8004f6a <prvInitialiseNewTask+0x66>
 8004f96:	e000      	b.n	8004f9a <prvInitialiseNewTask+0x96>
			{
				break;
 8004f98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fa2:	e003      	b.n	8004fac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fae:	2b37      	cmp	r3, #55	@ 0x37
 8004fb0:	d901      	bls.n	8004fb6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fb2:	2337      	movs	r3, #55	@ 0x37
 8004fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fc0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fe fe33 	bl	8003c38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	3318      	adds	r3, #24
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe fe2e 	bl	8003c38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fe0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	3354      	adds	r3, #84	@ 0x54
 8005006:	224c      	movs	r2, #76	@ 0x4c
 8005008:	2100      	movs	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f001 feac 	bl	8006d68 <memset>
 8005010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005012:	4a0d      	ldr	r2, [pc, #52]	@ (8005048 <prvInitialiseNewTask+0x144>)
 8005014:	659a      	str	r2, [r3, #88]	@ 0x58
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	4a0c      	ldr	r2, [pc, #48]	@ (800504c <prvInitialiseNewTask+0x148>)
 800501a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800501c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501e:	4a0c      	ldr	r2, [pc, #48]	@ (8005050 <prvInitialiseNewTask+0x14c>)
 8005020:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	68f9      	ldr	r1, [r7, #12]
 8005026:	69b8      	ldr	r0, [r7, #24]
 8005028:	f001 fa5a 	bl	80064e0 <pxPortInitialiseStack>
 800502c:	4602      	mov	r2, r0
 800502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005030:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800503c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800503e:	bf00      	nop
 8005040:	3720      	adds	r7, #32
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20001b04 	.word	0x20001b04
 800504c:	20001b6c 	.word	0x20001b6c
 8005050:	20001bd4 	.word	0x20001bd4

08005054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800505c:	f001 fb74 	bl	8006748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005060:	4b2d      	ldr	r3, [pc, #180]	@ (8005118 <prvAddNewTaskToReadyList+0xc4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	4a2c      	ldr	r2, [pc, #176]	@ (8005118 <prvAddNewTaskToReadyList+0xc4>)
 8005068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800506a:	4b2c      	ldr	r3, [pc, #176]	@ (800511c <prvAddNewTaskToReadyList+0xc8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005072:	4a2a      	ldr	r2, [pc, #168]	@ (800511c <prvAddNewTaskToReadyList+0xc8>)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005078:	4b27      	ldr	r3, [pc, #156]	@ (8005118 <prvAddNewTaskToReadyList+0xc4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d110      	bne.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005080:	f000 fc2e 	bl	80058e0 <prvInitialiseTaskLists>
 8005084:	e00d      	b.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005086:	4b26      	ldr	r3, [pc, #152]	@ (8005120 <prvAddNewTaskToReadyList+0xcc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800508e:	4b23      	ldr	r3, [pc, #140]	@ (800511c <prvAddNewTaskToReadyList+0xc8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	429a      	cmp	r2, r3
 800509a:	d802      	bhi.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800509c:	4a1f      	ldr	r2, [pc, #124]	@ (800511c <prvAddNewTaskToReadyList+0xc8>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050a2:	4b20      	ldr	r3, [pc, #128]	@ (8005124 <prvAddNewTaskToReadyList+0xd0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005124 <prvAddNewTaskToReadyList+0xd0>)
 80050aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005124 <prvAddNewTaskToReadyList+0xd0>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005128 <prvAddNewTaskToReadyList+0xd4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d903      	bls.n	80050c8 <prvAddNewTaskToReadyList+0x74>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	4a18      	ldr	r2, [pc, #96]	@ (8005128 <prvAddNewTaskToReadyList+0xd4>)
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4a15      	ldr	r2, [pc, #84]	@ (800512c <prvAddNewTaskToReadyList+0xd8>)
 80050d6:	441a      	add	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3304      	adds	r3, #4
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f7fe fdb7 	bl	8003c52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050e4:	f001 fb62 	bl	80067ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005120 <prvAddNewTaskToReadyList+0xcc>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00e      	beq.n	800510e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050f0:	4b0a      	ldr	r3, [pc, #40]	@ (800511c <prvAddNewTaskToReadyList+0xc8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d207      	bcs.n	800510e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005130 <prvAddNewTaskToReadyList+0xdc>)
 8005100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000dcc 	.word	0x20000dcc
 800511c:	200008f8 	.word	0x200008f8
 8005120:	20000dd8 	.word	0x20000dd8
 8005124:	20000de8 	.word	0x20000de8
 8005128:	20000dd4 	.word	0x20000dd4
 800512c:	200008fc 	.word	0x200008fc
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005146:	4b14      	ldr	r3, [pc, #80]	@ (8005198 <vTaskDelay+0x64>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <vTaskDelay+0x32>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	60bb      	str	r3, [r7, #8]
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	e7fd      	b.n	8005162 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005166:	f000 f88b 	bl	8005280 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800516a:	2100      	movs	r1, #0
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fe09 	bl	8005d84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005172:	f000 f893 	bl	800529c <xTaskResumeAll>
 8005176:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d107      	bne.n	800518e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800517e:	4b07      	ldr	r3, [pc, #28]	@ (800519c <vTaskDelay+0x68>)
 8005180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800518e:	bf00      	nop
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20000df4 	.word	0x20000df4
 800519c:	e000ed04 	.word	0xe000ed04

080051a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	@ 0x28
 80051a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051ae:	463a      	mov	r2, r7
 80051b0:	1d39      	adds	r1, r7, #4
 80051b2:	f107 0308 	add.w	r3, r7, #8
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fe fcea 	bl	8003b90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	9202      	str	r2, [sp, #8]
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	2300      	movs	r3, #0
 80051cc:	460a      	mov	r2, r1
 80051ce:	4924      	ldr	r1, [pc, #144]	@ (8005260 <vTaskStartScheduler+0xc0>)
 80051d0:	4824      	ldr	r0, [pc, #144]	@ (8005264 <vTaskStartScheduler+0xc4>)
 80051d2:	f7ff fdf1 	bl	8004db8 <xTaskCreateStatic>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a23      	ldr	r2, [pc, #140]	@ (8005268 <vTaskStartScheduler+0xc8>)
 80051da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051dc:	4b22      	ldr	r3, [pc, #136]	@ (8005268 <vTaskStartScheduler+0xc8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051e4:	2301      	movs	r3, #1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e001      	b.n	80051ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d102      	bne.n	80051fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051f4:	f000 fe1a 	bl	8005e2c <xTimerCreateTimerTask>
 80051f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d11b      	bne.n	8005238 <vTaskStartScheduler+0x98>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	613b      	str	r3, [r7, #16]
}
 8005212:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005214:	4b15      	ldr	r3, [pc, #84]	@ (800526c <vTaskStartScheduler+0xcc>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3354      	adds	r3, #84	@ 0x54
 800521a:	4a15      	ldr	r2, [pc, #84]	@ (8005270 <vTaskStartScheduler+0xd0>)
 800521c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800521e:	4b15      	ldr	r3, [pc, #84]	@ (8005274 <vTaskStartScheduler+0xd4>)
 8005220:	f04f 32ff 	mov.w	r2, #4294967295
 8005224:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005226:	4b14      	ldr	r3, [pc, #80]	@ (8005278 <vTaskStartScheduler+0xd8>)
 8005228:	2201      	movs	r2, #1
 800522a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800522c:	4b13      	ldr	r3, [pc, #76]	@ (800527c <vTaskStartScheduler+0xdc>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005232:	f001 f9e5 	bl	8006600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005236:	e00f      	b.n	8005258 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d10b      	bne.n	8005258 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	60fb      	str	r3, [r7, #12]
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <vTaskStartScheduler+0xb4>
}
 8005258:	bf00      	nop
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	08006f94 	.word	0x08006f94
 8005264:	080058b1 	.word	0x080058b1
 8005268:	20000df0 	.word	0x20000df0
 800526c:	200008f8 	.word	0x200008f8
 8005270:	20000010 	.word	0x20000010
 8005274:	20000dec 	.word	0x20000dec
 8005278:	20000dd8 	.word	0x20000dd8
 800527c:	20000dd0 	.word	0x20000dd0

08005280 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005284:	4b04      	ldr	r3, [pc, #16]	@ (8005298 <vTaskSuspendAll+0x18>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	4a03      	ldr	r2, [pc, #12]	@ (8005298 <vTaskSuspendAll+0x18>)
 800528c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800528e:	bf00      	nop
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	20000df4 	.word	0x20000df4

0800529c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052aa:	4b42      	ldr	r3, [pc, #264]	@ (80053b4 <xTaskResumeAll+0x118>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <xTaskResumeAll+0x2e>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	603b      	str	r3, [r7, #0]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052ca:	f001 fa3d 	bl	8006748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052ce:	4b39      	ldr	r3, [pc, #228]	@ (80053b4 <xTaskResumeAll+0x118>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	4a37      	ldr	r2, [pc, #220]	@ (80053b4 <xTaskResumeAll+0x118>)
 80052d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d8:	4b36      	ldr	r3, [pc, #216]	@ (80053b4 <xTaskResumeAll+0x118>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d162      	bne.n	80053a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052e0:	4b35      	ldr	r3, [pc, #212]	@ (80053b8 <xTaskResumeAll+0x11c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05e      	beq.n	80053a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052e8:	e02f      	b.n	800534a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ea:	4b34      	ldr	r3, [pc, #208]	@ (80053bc <xTaskResumeAll+0x120>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3318      	adds	r3, #24
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe fd08 	bl	8003d0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3304      	adds	r3, #4
 8005300:	4618      	mov	r0, r3
 8005302:	f7fe fd03 	bl	8003d0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530a:	4b2d      	ldr	r3, [pc, #180]	@ (80053c0 <xTaskResumeAll+0x124>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d903      	bls.n	800531a <xTaskResumeAll+0x7e>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	4a2a      	ldr	r2, [pc, #168]	@ (80053c0 <xTaskResumeAll+0x124>)
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4a27      	ldr	r2, [pc, #156]	@ (80053c4 <xTaskResumeAll+0x128>)
 8005328:	441a      	add	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3304      	adds	r3, #4
 800532e:	4619      	mov	r1, r3
 8005330:	4610      	mov	r0, r2
 8005332:	f7fe fc8e 	bl	8003c52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533a:	4b23      	ldr	r3, [pc, #140]	@ (80053c8 <xTaskResumeAll+0x12c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005344:	4b21      	ldr	r3, [pc, #132]	@ (80053cc <xTaskResumeAll+0x130>)
 8005346:	2201      	movs	r2, #1
 8005348:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800534a:	4b1c      	ldr	r3, [pc, #112]	@ (80053bc <xTaskResumeAll+0x120>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1cb      	bne.n	80052ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005358:	f000 fb66 	bl	8005a28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800535c:	4b1c      	ldr	r3, [pc, #112]	@ (80053d0 <xTaskResumeAll+0x134>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d010      	beq.n	800538a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005368:	f000 f846 	bl	80053f8 <xTaskIncrementTick>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005372:	4b16      	ldr	r3, [pc, #88]	@ (80053cc <xTaskResumeAll+0x130>)
 8005374:	2201      	movs	r2, #1
 8005376:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3b01      	subs	r3, #1
 800537c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f1      	bne.n	8005368 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005384:	4b12      	ldr	r3, [pc, #72]	@ (80053d0 <xTaskResumeAll+0x134>)
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800538a:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <xTaskResumeAll+0x130>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005392:	2301      	movs	r3, #1
 8005394:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005396:	4b0f      	ldr	r3, [pc, #60]	@ (80053d4 <xTaskResumeAll+0x138>)
 8005398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053a6:	f001 fa01 	bl	80067ac <vPortExitCritical>

	return xAlreadyYielded;
 80053aa:	68bb      	ldr	r3, [r7, #8]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20000df4 	.word	0x20000df4
 80053b8:	20000dcc 	.word	0x20000dcc
 80053bc:	20000d8c 	.word	0x20000d8c
 80053c0:	20000dd4 	.word	0x20000dd4
 80053c4:	200008fc 	.word	0x200008fc
 80053c8:	200008f8 	.word	0x200008f8
 80053cc:	20000de0 	.word	0x20000de0
 80053d0:	20000ddc 	.word	0x20000ddc
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053de:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <xTaskGetTickCount+0x1c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053e4:	687b      	ldr	r3, [r7, #4]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000dd0 	.word	0x20000dd0

080053f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005402:	4b4f      	ldr	r3, [pc, #316]	@ (8005540 <xTaskIncrementTick+0x148>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f040 8090 	bne.w	800552c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800540c:	4b4d      	ldr	r3, [pc, #308]	@ (8005544 <xTaskIncrementTick+0x14c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3301      	adds	r3, #1
 8005412:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005414:	4a4b      	ldr	r2, [pc, #300]	@ (8005544 <xTaskIncrementTick+0x14c>)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d121      	bne.n	8005464 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005420:	4b49      	ldr	r3, [pc, #292]	@ (8005548 <xTaskIncrementTick+0x150>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <xTaskIncrementTick+0x4a>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	603b      	str	r3, [r7, #0]
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	e7fd      	b.n	800543e <xTaskIncrementTick+0x46>
 8005442:	4b41      	ldr	r3, [pc, #260]	@ (8005548 <xTaskIncrementTick+0x150>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	4b40      	ldr	r3, [pc, #256]	@ (800554c <xTaskIncrementTick+0x154>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a3e      	ldr	r2, [pc, #248]	@ (8005548 <xTaskIncrementTick+0x150>)
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	4a3e      	ldr	r2, [pc, #248]	@ (800554c <xTaskIncrementTick+0x154>)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b3e      	ldr	r3, [pc, #248]	@ (8005550 <xTaskIncrementTick+0x158>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	4a3c      	ldr	r2, [pc, #240]	@ (8005550 <xTaskIncrementTick+0x158>)
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	f000 fae2 	bl	8005a28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005464:	4b3b      	ldr	r3, [pc, #236]	@ (8005554 <xTaskIncrementTick+0x15c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	429a      	cmp	r2, r3
 800546c:	d349      	bcc.n	8005502 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800546e:	4b36      	ldr	r3, [pc, #216]	@ (8005548 <xTaskIncrementTick+0x150>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d104      	bne.n	8005482 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005478:	4b36      	ldr	r3, [pc, #216]	@ (8005554 <xTaskIncrementTick+0x15c>)
 800547a:	f04f 32ff 	mov.w	r2, #4294967295
 800547e:	601a      	str	r2, [r3, #0]
					break;
 8005480:	e03f      	b.n	8005502 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005482:	4b31      	ldr	r3, [pc, #196]	@ (8005548 <xTaskIncrementTick+0x150>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	429a      	cmp	r2, r3
 8005498:	d203      	bcs.n	80054a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800549a:	4a2e      	ldr	r2, [pc, #184]	@ (8005554 <xTaskIncrementTick+0x15c>)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054a0:	e02f      	b.n	8005502 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe fc30 	bl	8003d0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d004      	beq.n	80054be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	3318      	adds	r3, #24
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe fc27 	bl	8003d0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c2:	4b25      	ldr	r3, [pc, #148]	@ (8005558 <xTaskIncrementTick+0x160>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d903      	bls.n	80054d2 <xTaskIncrementTick+0xda>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ce:	4a22      	ldr	r2, [pc, #136]	@ (8005558 <xTaskIncrementTick+0x160>)
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4a1f      	ldr	r2, [pc, #124]	@ (800555c <xTaskIncrementTick+0x164>)
 80054e0:	441a      	add	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f7fe fbb2 	bl	8003c52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005560 <xTaskIncrementTick+0x168>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d3b8      	bcc.n	800546e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80054fc:	2301      	movs	r3, #1
 80054fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005500:	e7b5      	b.n	800546e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005502:	4b17      	ldr	r3, [pc, #92]	@ (8005560 <xTaskIncrementTick+0x168>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005508:	4914      	ldr	r1, [pc, #80]	@ (800555c <xTaskIncrementTick+0x164>)
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d901      	bls.n	800551e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800551a:	2301      	movs	r3, #1
 800551c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800551e:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <xTaskIncrementTick+0x16c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005526:	2301      	movs	r3, #1
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	e004      	b.n	8005536 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800552c:	4b0e      	ldr	r3, [pc, #56]	@ (8005568 <xTaskIncrementTick+0x170>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	4a0d      	ldr	r2, [pc, #52]	@ (8005568 <xTaskIncrementTick+0x170>)
 8005534:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005536:	697b      	ldr	r3, [r7, #20]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20000df4 	.word	0x20000df4
 8005544:	20000dd0 	.word	0x20000dd0
 8005548:	20000d84 	.word	0x20000d84
 800554c:	20000d88 	.word	0x20000d88
 8005550:	20000de4 	.word	0x20000de4
 8005554:	20000dec 	.word	0x20000dec
 8005558:	20000dd4 	.word	0x20000dd4
 800555c:	200008fc 	.word	0x200008fc
 8005560:	200008f8 	.word	0x200008f8
 8005564:	20000de0 	.word	0x20000de0
 8005568:	20000ddc 	.word	0x20000ddc

0800556c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005572:	4b2b      	ldr	r3, [pc, #172]	@ (8005620 <vTaskSwitchContext+0xb4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800557a:	4b2a      	ldr	r3, [pc, #168]	@ (8005624 <vTaskSwitchContext+0xb8>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005580:	e047      	b.n	8005612 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005582:	4b28      	ldr	r3, [pc, #160]	@ (8005624 <vTaskSwitchContext+0xb8>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005588:	4b27      	ldr	r3, [pc, #156]	@ (8005628 <vTaskSwitchContext+0xbc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	e011      	b.n	80055b4 <vTaskSwitchContext+0x48>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10b      	bne.n	80055ae <vTaskSwitchContext+0x42>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	607b      	str	r3, [r7, #4]
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	e7fd      	b.n	80055aa <vTaskSwitchContext+0x3e>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	491d      	ldr	r1, [pc, #116]	@ (800562c <vTaskSwitchContext+0xc0>)
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0e3      	beq.n	8005590 <vTaskSwitchContext+0x24>
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4a16      	ldr	r2, [pc, #88]	@ (800562c <vTaskSwitchContext+0xc0>)
 80055d4:	4413      	add	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	605a      	str	r2, [r3, #4]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	3308      	adds	r3, #8
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d104      	bne.n	80055f8 <vTaskSwitchContext+0x8c>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	605a      	str	r2, [r3, #4]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005630 <vTaskSwitchContext+0xc4>)
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	4a09      	ldr	r2, [pc, #36]	@ (8005628 <vTaskSwitchContext+0xbc>)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005608:	4b09      	ldr	r3, [pc, #36]	@ (8005630 <vTaskSwitchContext+0xc4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3354      	adds	r3, #84	@ 0x54
 800560e:	4a09      	ldr	r2, [pc, #36]	@ (8005634 <vTaskSwitchContext+0xc8>)
 8005610:	6013      	str	r3, [r2, #0]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20000df4 	.word	0x20000df4
 8005624:	20000de0 	.word	0x20000de0
 8005628:	20000dd4 	.word	0x20000dd4
 800562c:	200008fc 	.word	0x200008fc
 8005630:	200008f8 	.word	0x200008f8
 8005634:	20000010 	.word	0x20000010

08005638 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10b      	bne.n	8005660 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	60fb      	str	r3, [r7, #12]
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005660:	4b07      	ldr	r3, [pc, #28]	@ (8005680 <vTaskPlaceOnEventList+0x48>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3318      	adds	r3, #24
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fe fb16 	bl	8003c9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800566e:	2101      	movs	r1, #1
 8005670:	6838      	ldr	r0, [r7, #0]
 8005672:	f000 fb87 	bl	8005d84 <prvAddCurrentTaskToDelayedList>
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	200008f8 	.word	0x200008f8

08005684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10b      	bne.n	80056ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	617b      	str	r3, [r7, #20]
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	e7fd      	b.n	80056aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056ae:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3318      	adds	r3, #24
 80056b4:	4619      	mov	r1, r3
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f7fe facb 	bl	8003c52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295
 80056c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	68b8      	ldr	r0, [r7, #8]
 80056cc:	f000 fb5a 	bl	8005d84 <prvAddCurrentTaskToDelayedList>
	}
 80056d0:	bf00      	nop
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	200008f8 	.word	0x200008f8

080056dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10b      	bne.n	800570a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	60fb      	str	r3, [r7, #12]
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	e7fd      	b.n	8005706 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	3318      	adds	r3, #24
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe fafc 	bl	8003d0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005714:	4b1d      	ldr	r3, [pc, #116]	@ (800578c <xTaskRemoveFromEventList+0xb0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d11d      	bne.n	8005758 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	3304      	adds	r3, #4
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe faf3 	bl	8003d0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572a:	4b19      	ldr	r3, [pc, #100]	@ (8005790 <xTaskRemoveFromEventList+0xb4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d903      	bls.n	800573a <xTaskRemoveFromEventList+0x5e>
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	4a16      	ldr	r2, [pc, #88]	@ (8005790 <xTaskRemoveFromEventList+0xb4>)
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4a13      	ldr	r2, [pc, #76]	@ (8005794 <xTaskRemoveFromEventList+0xb8>)
 8005748:	441a      	add	r2, r3
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	3304      	adds	r3, #4
 800574e:	4619      	mov	r1, r3
 8005750:	4610      	mov	r0, r2
 8005752:	f7fe fa7e 	bl	8003c52 <vListInsertEnd>
 8005756:	e005      	b.n	8005764 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3318      	adds	r3, #24
 800575c:	4619      	mov	r1, r3
 800575e:	480e      	ldr	r0, [pc, #56]	@ (8005798 <xTaskRemoveFromEventList+0xbc>)
 8005760:	f7fe fa77 	bl	8003c52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005768:	4b0c      	ldr	r3, [pc, #48]	@ (800579c <xTaskRemoveFromEventList+0xc0>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576e:	429a      	cmp	r2, r3
 8005770:	d905      	bls.n	800577e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005772:	2301      	movs	r3, #1
 8005774:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005776:	4b0a      	ldr	r3, [pc, #40]	@ (80057a0 <xTaskRemoveFromEventList+0xc4>)
 8005778:	2201      	movs	r2, #1
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	e001      	b.n	8005782 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005782:	697b      	ldr	r3, [r7, #20]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000df4 	.word	0x20000df4
 8005790:	20000dd4 	.word	0x20000dd4
 8005794:	200008fc 	.word	0x200008fc
 8005798:	20000d8c 	.word	0x20000d8c
 800579c:	200008f8 	.word	0x200008f8
 80057a0:	20000de0 	.word	0x20000de0

080057a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057ac:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <vTaskInternalSetTimeOutState+0x24>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057b4:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <vTaskInternalSetTimeOutState+0x28>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	605a      	str	r2, [r3, #4]
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	20000de4 	.word	0x20000de4
 80057cc:	20000dd0 	.word	0x20000dd0

080057d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10b      	bne.n	80057f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	613b      	str	r3, [r7, #16]
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	e7fd      	b.n	80057f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	60fb      	str	r3, [r7, #12]
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	e7fd      	b.n	8005812 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005816:	f000 ff97 	bl	8006748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800581a:	4b1d      	ldr	r3, [pc, #116]	@ (8005890 <xTaskCheckForTimeOut+0xc0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	d102      	bne.n	800583a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005834:	2300      	movs	r3, #0
 8005836:	61fb      	str	r3, [r7, #28]
 8005838:	e023      	b.n	8005882 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b15      	ldr	r3, [pc, #84]	@ (8005894 <xTaskCheckForTimeOut+0xc4>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d007      	beq.n	8005856 <xTaskCheckForTimeOut+0x86>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	429a      	cmp	r2, r3
 800584e:	d302      	bcc.n	8005856 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	e015      	b.n	8005882 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	429a      	cmp	r2, r3
 800585e:	d20b      	bcs.n	8005878 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	1ad2      	subs	r2, r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff ff99 	bl	80057a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	e004      	b.n	8005882 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800587e:	2301      	movs	r3, #1
 8005880:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005882:	f000 ff93 	bl	80067ac <vPortExitCritical>

	return xReturn;
 8005886:	69fb      	ldr	r3, [r7, #28]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000dd0 	.word	0x20000dd0
 8005894:	20000de4 	.word	0x20000de4

08005898 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800589c:	4b03      	ldr	r3, [pc, #12]	@ (80058ac <vTaskMissedYield+0x14>)
 800589e:	2201      	movs	r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
}
 80058a2:	bf00      	nop
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	20000de0 	.word	0x20000de0

080058b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058b8:	f000 f852 	bl	8005960 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058bc:	4b06      	ldr	r3, [pc, #24]	@ (80058d8 <prvIdleTask+0x28>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d9f9      	bls.n	80058b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80058c4:	4b05      	ldr	r3, [pc, #20]	@ (80058dc <prvIdleTask+0x2c>)
 80058c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058d4:	e7f0      	b.n	80058b8 <prvIdleTask+0x8>
 80058d6:	bf00      	nop
 80058d8:	200008fc 	.word	0x200008fc
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058e6:	2300      	movs	r3, #0
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	e00c      	b.n	8005906 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4a12      	ldr	r2, [pc, #72]	@ (8005940 <prvInitialiseTaskLists+0x60>)
 80058f8:	4413      	add	r3, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe f97c 	bl	8003bf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3301      	adds	r3, #1
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b37      	cmp	r3, #55	@ 0x37
 800590a:	d9ef      	bls.n	80058ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800590c:	480d      	ldr	r0, [pc, #52]	@ (8005944 <prvInitialiseTaskLists+0x64>)
 800590e:	f7fe f973 	bl	8003bf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005912:	480d      	ldr	r0, [pc, #52]	@ (8005948 <prvInitialiseTaskLists+0x68>)
 8005914:	f7fe f970 	bl	8003bf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005918:	480c      	ldr	r0, [pc, #48]	@ (800594c <prvInitialiseTaskLists+0x6c>)
 800591a:	f7fe f96d 	bl	8003bf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800591e:	480c      	ldr	r0, [pc, #48]	@ (8005950 <prvInitialiseTaskLists+0x70>)
 8005920:	f7fe f96a 	bl	8003bf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005924:	480b      	ldr	r0, [pc, #44]	@ (8005954 <prvInitialiseTaskLists+0x74>)
 8005926:	f7fe f967 	bl	8003bf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800592a:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <prvInitialiseTaskLists+0x78>)
 800592c:	4a05      	ldr	r2, [pc, #20]	@ (8005944 <prvInitialiseTaskLists+0x64>)
 800592e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005930:	4b0a      	ldr	r3, [pc, #40]	@ (800595c <prvInitialiseTaskLists+0x7c>)
 8005932:	4a05      	ldr	r2, [pc, #20]	@ (8005948 <prvInitialiseTaskLists+0x68>)
 8005934:	601a      	str	r2, [r3, #0]
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	200008fc 	.word	0x200008fc
 8005944:	20000d5c 	.word	0x20000d5c
 8005948:	20000d70 	.word	0x20000d70
 800594c:	20000d8c 	.word	0x20000d8c
 8005950:	20000da0 	.word	0x20000da0
 8005954:	20000db8 	.word	0x20000db8
 8005958:	20000d84 	.word	0x20000d84
 800595c:	20000d88 	.word	0x20000d88

08005960 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005966:	e019      	b.n	800599c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005968:	f000 feee 	bl	8006748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596c:	4b10      	ldr	r3, [pc, #64]	@ (80059b0 <prvCheckTasksWaitingTermination+0x50>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3304      	adds	r3, #4
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe f9c7 	bl	8003d0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800597e:	4b0d      	ldr	r3, [pc, #52]	@ (80059b4 <prvCheckTasksWaitingTermination+0x54>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3b01      	subs	r3, #1
 8005984:	4a0b      	ldr	r2, [pc, #44]	@ (80059b4 <prvCheckTasksWaitingTermination+0x54>)
 8005986:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005988:	4b0b      	ldr	r3, [pc, #44]	@ (80059b8 <prvCheckTasksWaitingTermination+0x58>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3b01      	subs	r3, #1
 800598e:	4a0a      	ldr	r2, [pc, #40]	@ (80059b8 <prvCheckTasksWaitingTermination+0x58>)
 8005990:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005992:	f000 ff0b 	bl	80067ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f810 	bl	80059bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800599c:	4b06      	ldr	r3, [pc, #24]	@ (80059b8 <prvCheckTasksWaitingTermination+0x58>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e1      	bne.n	8005968 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000da0 	.word	0x20000da0
 80059b4:	20000dcc 	.word	0x20000dcc
 80059b8:	20000db4 	.word	0x20000db4

080059bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3354      	adds	r3, #84	@ 0x54
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 f9d5 	bl	8006d78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d108      	bne.n	80059ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 f8a3 	bl	8006b28 <vPortFree>
				vPortFree( pxTCB );
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 f8a0 	bl	8006b28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059e8:	e019      	b.n	8005a1e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d103      	bne.n	80059fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 f897 	bl	8006b28 <vPortFree>
	}
 80059fa:	e010      	b.n	8005a1e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d00b      	beq.n	8005a1e <prvDeleteTCB+0x62>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	60fb      	str	r3, [r7, #12]
}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	e7fd      	b.n	8005a1a <prvDeleteTCB+0x5e>
	}
 8005a1e:	bf00      	nop
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a60 <prvResetNextTaskUnblockTime+0x38>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d104      	bne.n	8005a42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a38:	4b0a      	ldr	r3, [pc, #40]	@ (8005a64 <prvResetNextTaskUnblockTime+0x3c>)
 8005a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a40:	e008      	b.n	8005a54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a42:	4b07      	ldr	r3, [pc, #28]	@ (8005a60 <prvResetNextTaskUnblockTime+0x38>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	4a04      	ldr	r2, [pc, #16]	@ (8005a64 <prvResetNextTaskUnblockTime+0x3c>)
 8005a52:	6013      	str	r3, [r2, #0]
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	20000d84 	.word	0x20000d84
 8005a64:	20000dec 	.word	0x20000dec

08005a68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a9c <xTaskGetSchedulerState+0x34>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a76:	2301      	movs	r3, #1
 8005a78:	607b      	str	r3, [r7, #4]
 8005a7a:	e008      	b.n	8005a8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a7c:	4b08      	ldr	r3, [pc, #32]	@ (8005aa0 <xTaskGetSchedulerState+0x38>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a84:	2302      	movs	r3, #2
 8005a86:	607b      	str	r3, [r7, #4]
 8005a88:	e001      	b.n	8005a8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a8e:	687b      	ldr	r3, [r7, #4]
	}
 8005a90:	4618      	mov	r0, r3
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	20000dd8 	.word	0x20000dd8
 8005aa0:	20000df4 	.word	0x20000df4

08005aa4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d051      	beq.n	8005b5e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005abe:	4b2a      	ldr	r3, [pc, #168]	@ (8005b68 <xTaskPriorityInherit+0xc4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d241      	bcs.n	8005b4c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	db06      	blt.n	8005ade <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad0:	4b25      	ldr	r3, [pc, #148]	@ (8005b68 <xTaskPriorityInherit+0xc4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6959      	ldr	r1, [r3, #20]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4a1f      	ldr	r2, [pc, #124]	@ (8005b6c <xTaskPriorityInherit+0xc8>)
 8005af0:	4413      	add	r3, r2
 8005af2:	4299      	cmp	r1, r3
 8005af4:	d122      	bne.n	8005b3c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	3304      	adds	r3, #4
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe f906 	bl	8003d0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b00:	4b19      	ldr	r3, [pc, #100]	@ (8005b68 <xTaskPriorityInherit+0xc4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0e:	4b18      	ldr	r3, [pc, #96]	@ (8005b70 <xTaskPriorityInherit+0xcc>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d903      	bls.n	8005b1e <xTaskPriorityInherit+0x7a>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	4a15      	ldr	r2, [pc, #84]	@ (8005b70 <xTaskPriorityInherit+0xcc>)
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4a10      	ldr	r2, [pc, #64]	@ (8005b6c <xTaskPriorityInherit+0xc8>)
 8005b2c:	441a      	add	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	3304      	adds	r3, #4
 8005b32:	4619      	mov	r1, r3
 8005b34:	4610      	mov	r0, r2
 8005b36:	f7fe f88c 	bl	8003c52 <vListInsertEnd>
 8005b3a:	e004      	b.n	8005b46 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b68 <xTaskPriorityInherit+0xc4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b46:	2301      	movs	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e008      	b.n	8005b5e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b50:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <xTaskPriorityInherit+0xc4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d201      	bcs.n	8005b5e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
	}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	200008f8 	.word	0x200008f8
 8005b6c:	200008fc 	.word	0x200008fc
 8005b70:	20000dd4 	.word	0x20000dd4

08005b74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d058      	beq.n	8005c3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c48 <xTaskPriorityDisinherit+0xd4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d00b      	beq.n	8005bac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60fb      	str	r3, [r7, #12]
}
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
 8005baa:	e7fd      	b.n	8005ba8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10b      	bne.n	8005bcc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	60bb      	str	r3, [r7, #8]
}
 8005bc6:	bf00      	nop
 8005bc8:	bf00      	nop
 8005bca:	e7fd      	b.n	8005bc8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd0:	1e5a      	subs	r2, r3, #1
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d02c      	beq.n	8005c3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d128      	bne.n	8005c3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	3304      	adds	r3, #4
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe f88c 	bl	8003d0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c4c <xTaskPriorityDisinherit+0xd8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d903      	bls.n	8005c1c <xTaskPriorityDisinherit+0xa8>
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	4a0c      	ldr	r2, [pc, #48]	@ (8005c4c <xTaskPriorityDisinherit+0xd8>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4a09      	ldr	r2, [pc, #36]	@ (8005c50 <xTaskPriorityDisinherit+0xdc>)
 8005c2a:	441a      	add	r2, r3
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7fe f80d 	bl	8003c52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c3c:	697b      	ldr	r3, [r7, #20]
	}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	200008f8 	.word	0x200008f8
 8005c4c:	20000dd4 	.word	0x20000dd4
 8005c50:	200008fc 	.word	0x200008fc

08005c54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c62:	2301      	movs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d06c      	beq.n	8005d46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10b      	bne.n	8005c8c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	60fb      	str	r3, [r7, #12]
}
 8005c86:	bf00      	nop
 8005c88:	bf00      	nop
 8005c8a:	e7fd      	b.n	8005c88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d902      	bls.n	8005c9c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	e002      	b.n	8005ca2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d04c      	beq.n	8005d46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d147      	bne.n	8005d46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005cb6:	4b26      	ldr	r3, [pc, #152]	@ (8005d50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d10b      	bne.n	8005cd8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	60bb      	str	r3, [r7, #8]
}
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	e7fd      	b.n	8005cd4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cdc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	db04      	blt.n	8005cf6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	6959      	ldr	r1, [r3, #20]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4a13      	ldr	r2, [pc, #76]	@ (8005d54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005d06:	4413      	add	r3, r2
 8005d08:	4299      	cmp	r1, r3
 8005d0a:	d11c      	bne.n	8005d46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fd fffb 	bl	8003d0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d903      	bls.n	8005d2a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d26:	4a0c      	ldr	r2, [pc, #48]	@ (8005d58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4a07      	ldr	r2, [pc, #28]	@ (8005d54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005d38:	441a      	add	r2, r3
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f7fd ff86 	bl	8003c52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d46:	bf00      	nop
 8005d48:	3720      	adds	r7, #32
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200008f8 	.word	0x200008f8
 8005d54:	200008fc 	.word	0x200008fc
 8005d58:	20000dd4 	.word	0x20000dd4

08005d5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d60:	4b07      	ldr	r3, [pc, #28]	@ (8005d80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d68:	4b05      	ldr	r3, [pc, #20]	@ (8005d80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d6e:	3201      	adds	r2, #1
 8005d70:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005d72:	4b03      	ldr	r3, [pc, #12]	@ (8005d80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d74:	681b      	ldr	r3, [r3, #0]
	}
 8005d76:	4618      	mov	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	200008f8 	.word	0x200008f8

08005d84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d8e:	4b21      	ldr	r3, [pc, #132]	@ (8005e14 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d94:	4b20      	ldr	r3, [pc, #128]	@ (8005e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fd ffb6 	bl	8003d0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	d10a      	bne.n	8005dbe <prvAddCurrentTaskToDelayedList+0x3a>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dae:	4b1a      	ldr	r3, [pc, #104]	@ (8005e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4619      	mov	r1, r3
 8005db6:	4819      	ldr	r0, [pc, #100]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0x98>)
 8005db8:	f7fd ff4b 	bl	8003c52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dbc:	e026      	b.n	8005e0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dc6:	4b14      	ldr	r3, [pc, #80]	@ (8005e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d209      	bcs.n	8005dea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dd6:	4b12      	ldr	r3, [pc, #72]	@ (8005e20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b0f      	ldr	r3, [pc, #60]	@ (8005e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4619      	mov	r1, r3
 8005de2:	4610      	mov	r0, r2
 8005de4:	f7fd ff59 	bl	8003c9a <vListInsert>
}
 8005de8:	e010      	b.n	8005e0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dea:	4b0e      	ldr	r3, [pc, #56]	@ (8005e24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4b0a      	ldr	r3, [pc, #40]	@ (8005e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f7fd ff4f 	bl	8003c9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d202      	bcs.n	8005e0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e06:	4a08      	ldr	r2, [pc, #32]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6013      	str	r3, [r2, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	20000dd0 	.word	0x20000dd0
 8005e18:	200008f8 	.word	0x200008f8
 8005e1c:	20000db8 	.word	0x20000db8
 8005e20:	20000d88 	.word	0x20000d88
 8005e24:	20000d84 	.word	0x20000d84
 8005e28:	20000dec 	.word	0x20000dec

08005e2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08a      	sub	sp, #40	@ 0x28
 8005e30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e32:	2300      	movs	r3, #0
 8005e34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e36:	f000 fb13 	bl	8006460 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb0 <xTimerCreateTimerTask+0x84>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d021      	beq.n	8005e86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e4a:	1d3a      	adds	r2, r7, #4
 8005e4c:	f107 0108 	add.w	r1, r7, #8
 8005e50:	f107 030c 	add.w	r3, r7, #12
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fd feb5 	bl	8003bc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	9202      	str	r2, [sp, #8]
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	2302      	movs	r3, #2
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	460a      	mov	r2, r1
 8005e6c:	4911      	ldr	r1, [pc, #68]	@ (8005eb4 <xTimerCreateTimerTask+0x88>)
 8005e6e:	4812      	ldr	r0, [pc, #72]	@ (8005eb8 <xTimerCreateTimerTask+0x8c>)
 8005e70:	f7fe ffa2 	bl	8004db8 <xTaskCreateStatic>
 8005e74:	4603      	mov	r3, r0
 8005e76:	4a11      	ldr	r2, [pc, #68]	@ (8005ebc <xTimerCreateTimerTask+0x90>)
 8005e78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e7a:	4b10      	ldr	r3, [pc, #64]	@ (8005ebc <xTimerCreateTimerTask+0x90>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e82:	2301      	movs	r3, #1
 8005e84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	613b      	str	r3, [r7, #16]
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	e7fd      	b.n	8005ea0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ea4:	697b      	ldr	r3, [r7, #20]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000e28 	.word	0x20000e28
 8005eb4:	08006f9c 	.word	0x08006f9c
 8005eb8:	08005ff9 	.word	0x08005ff9
 8005ebc:	20000e2c 	.word	0x20000e2c

08005ec0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08a      	sub	sp, #40	@ 0x28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10b      	bne.n	8005ef0 <xTimerGenericCommand+0x30>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	623b      	str	r3, [r7, #32]
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	e7fd      	b.n	8005eec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ef0:	4b19      	ldr	r3, [pc, #100]	@ (8005f58 <xTimerGenericCommand+0x98>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d02a      	beq.n	8005f4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b05      	cmp	r3, #5
 8005f08:	dc18      	bgt.n	8005f3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f0a:	f7ff fdad 	bl	8005a68 <xTaskGetSchedulerState>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d109      	bne.n	8005f28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f14:	4b10      	ldr	r3, [pc, #64]	@ (8005f58 <xTimerGenericCommand+0x98>)
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	f107 0110 	add.w	r1, r7, #16
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f20:	f7fe f8d2 	bl	80040c8 <xQueueGenericSend>
 8005f24:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f26:	e012      	b.n	8005f4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f28:	4b0b      	ldr	r3, [pc, #44]	@ (8005f58 <xTimerGenericCommand+0x98>)
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	f107 0110 	add.w	r1, r7, #16
 8005f30:	2300      	movs	r3, #0
 8005f32:	2200      	movs	r2, #0
 8005f34:	f7fe f8c8 	bl	80040c8 <xQueueGenericSend>
 8005f38:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f3a:	e008      	b.n	8005f4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <xTimerGenericCommand+0x98>)
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	f107 0110 	add.w	r1, r7, #16
 8005f44:	2300      	movs	r3, #0
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	f7fe f9c0 	bl	80042cc <xQueueGenericSendFromISR>
 8005f4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3728      	adds	r7, #40	@ 0x28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20000e28 	.word	0x20000e28

08005f5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f66:	4b23      	ldr	r3, [pc, #140]	@ (8005ff4 <prvProcessExpiredTimer+0x98>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fd fec9 	bl	8003d0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d023      	beq.n	8005fd0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	699a      	ldr	r2, [r3, #24]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	18d1      	adds	r1, r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	6978      	ldr	r0, [r7, #20]
 8005f96:	f000 f8d5 	bl	8006144 <prvInsertTimerInActiveList>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d020      	beq.n	8005fe2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	2100      	movs	r1, #0
 8005faa:	6978      	ldr	r0, [r7, #20]
 8005fac:	f7ff ff88 	bl	8005ec0 <xTimerGenericCommand>
 8005fb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d114      	bne.n	8005fe2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	60fb      	str	r3, [r7, #12]
}
 8005fca:	bf00      	nop
 8005fcc:	bf00      	nop
 8005fce:	e7fd      	b.n	8005fcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	6978      	ldr	r0, [r7, #20]
 8005fe8:	4798      	blx	r3
}
 8005fea:	bf00      	nop
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000e20 	.word	0x20000e20

08005ff8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006000:	f107 0308 	add.w	r3, r7, #8
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f859 	bl	80060bc <prvGetNextExpireTime>
 800600a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4619      	mov	r1, r3
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f805 	bl	8006020 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006016:	f000 f8d7 	bl	80061c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800601a:	bf00      	nop
 800601c:	e7f0      	b.n	8006000 <prvTimerTask+0x8>
	...

08006020 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800602a:	f7ff f929 	bl	8005280 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800602e:	f107 0308 	add.w	r3, r7, #8
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f866 	bl	8006104 <prvSampleTimeNow>
 8006038:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d130      	bne.n	80060a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <prvProcessTimerOrBlockTask+0x3c>
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	429a      	cmp	r2, r3
 800604c:	d806      	bhi.n	800605c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800604e:	f7ff f925 	bl	800529c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006052:	68f9      	ldr	r1, [r7, #12]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff ff81 	bl	8005f5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800605a:	e024      	b.n	80060a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006062:	4b13      	ldr	r3, [pc, #76]	@ (80060b0 <prvProcessTimerOrBlockTask+0x90>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <prvProcessTimerOrBlockTask+0x50>
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <prvProcessTimerOrBlockTask+0x52>
 8006070:	2300      	movs	r3, #0
 8006072:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006074:	4b0f      	ldr	r3, [pc, #60]	@ (80060b4 <prvProcessTimerOrBlockTask+0x94>)
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	4619      	mov	r1, r3
 8006082:	f7fe fe65 	bl	8004d50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006086:	f7ff f909 	bl	800529c <xTaskResumeAll>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10a      	bne.n	80060a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006090:	4b09      	ldr	r3, [pc, #36]	@ (80060b8 <prvProcessTimerOrBlockTask+0x98>)
 8006092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
}
 80060a0:	e001      	b.n	80060a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060a2:	f7ff f8fb 	bl	800529c <xTaskResumeAll>
}
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	20000e24 	.word	0x20000e24
 80060b4:	20000e28 	.word	0x20000e28
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006100 <prvGetNextExpireTime+0x44>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <prvGetNextExpireTime+0x16>
 80060ce:	2201      	movs	r2, #1
 80060d0:	e000      	b.n	80060d4 <prvGetNextExpireTime+0x18>
 80060d2:	2200      	movs	r2, #0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d105      	bne.n	80060ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060e0:	4b07      	ldr	r3, [pc, #28]	@ (8006100 <prvGetNextExpireTime+0x44>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	e001      	b.n	80060f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060f0:	68fb      	ldr	r3, [r7, #12]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	20000e20 	.word	0x20000e20

08006104 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800610c:	f7ff f964 	bl	80053d8 <xTaskGetTickCount>
 8006110:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006112:	4b0b      	ldr	r3, [pc, #44]	@ (8006140 <prvSampleTimeNow+0x3c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	429a      	cmp	r2, r3
 800611a:	d205      	bcs.n	8006128 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800611c:	f000 f93a 	bl	8006394 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	e002      	b.n	800612e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800612e:	4a04      	ldr	r2, [pc, #16]	@ (8006140 <prvSampleTimeNow+0x3c>)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006134:	68fb      	ldr	r3, [r7, #12]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000e30 	.word	0x20000e30

08006144 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	429a      	cmp	r2, r3
 8006168:	d812      	bhi.n	8006190 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	429a      	cmp	r2, r3
 8006176:	d302      	bcc.n	800617e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006178:	2301      	movs	r3, #1
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	e01b      	b.n	80061b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800617e:	4b10      	ldr	r3, [pc, #64]	@ (80061c0 <prvInsertTimerInActiveList+0x7c>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3304      	adds	r3, #4
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f7fd fd86 	bl	8003c9a <vListInsert>
 800618e:	e012      	b.n	80061b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d206      	bcs.n	80061a6 <prvInsertTimerInActiveList+0x62>
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d302      	bcc.n	80061a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e007      	b.n	80061b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061a6:	4b07      	ldr	r3, [pc, #28]	@ (80061c4 <prvInsertTimerInActiveList+0x80>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4619      	mov	r1, r3
 80061b0:	4610      	mov	r0, r2
 80061b2:	f7fd fd72 	bl	8003c9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061b6:	697b      	ldr	r3, [r7, #20]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000e24 	.word	0x20000e24
 80061c4:	20000e20 	.word	0x20000e20

080061c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08e      	sub	sp, #56	@ 0x38
 80061cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061ce:	e0ce      	b.n	800636e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	da19      	bge.n	800620a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061d6:	1d3b      	adds	r3, r7, #4
 80061d8:	3304      	adds	r3, #4
 80061da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10b      	bne.n	80061fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	61fb      	str	r3, [r7, #28]
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop
 80061f8:	e7fd      	b.n	80061f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006200:	6850      	ldr	r0, [r2, #4]
 8006202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006204:	6892      	ldr	r2, [r2, #8]
 8006206:	4611      	mov	r1, r2
 8006208:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f2c0 80ae 	blt.w	800636e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800621e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006220:	3304      	adds	r3, #4
 8006222:	4618      	mov	r0, r3
 8006224:	f7fd fd72 	bl	8003d0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006228:	463b      	mov	r3, r7
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff ff6a 	bl	8006104 <prvSampleTimeNow>
 8006230:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b09      	cmp	r3, #9
 8006236:	f200 8097 	bhi.w	8006368 <prvProcessReceivedCommands+0x1a0>
 800623a:	a201      	add	r2, pc, #4	@ (adr r2, 8006240 <prvProcessReceivedCommands+0x78>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006269 	.word	0x08006269
 8006244:	08006269 	.word	0x08006269
 8006248:	08006269 	.word	0x08006269
 800624c:	080062df 	.word	0x080062df
 8006250:	080062f3 	.word	0x080062f3
 8006254:	0800633f 	.word	0x0800633f
 8006258:	08006269 	.word	0x08006269
 800625c:	08006269 	.word	0x08006269
 8006260:	080062df 	.word	0x080062df
 8006264:	080062f3 	.word	0x080062f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	b2da      	uxtb	r2, r3
 8006274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006276:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	18d1      	adds	r1, r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006288:	f7ff ff5c 	bl	8006144 <prvInsertTimerInActiveList>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d06c      	beq.n	800636c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006298:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800629a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d061      	beq.n	800636c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	441a      	add	r2, r3
 80062b0:	2300      	movs	r3, #0
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	2300      	movs	r3, #0
 80062b6:	2100      	movs	r1, #0
 80062b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ba:	f7ff fe01 	bl	8005ec0 <xTimerGenericCommand>
 80062be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d152      	bne.n	800636c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	61bb      	str	r3, [r7, #24]
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062e4:	f023 0301 	bic.w	r3, r3, #1
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80062f0:	e03d      	b.n	800636e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006300:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006308:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800630a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10b      	bne.n	800632a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	617b      	str	r3, [r7, #20]
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop
 8006328:	e7fd      	b.n	8006326 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800632a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	18d1      	adds	r1, r2, r3
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006338:	f7ff ff04 	bl	8006144 <prvInsertTimerInActiveList>
					break;
 800633c:	e017      	b.n	800636e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d103      	bne.n	8006354 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800634c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800634e:	f000 fbeb 	bl	8006b28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006352:	e00c      	b.n	800636e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006356:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800635a:	f023 0301 	bic.w	r3, r3, #1
 800635e:	b2da      	uxtb	r2, r3
 8006360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006362:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006366:	e002      	b.n	800636e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006368:	bf00      	nop
 800636a:	e000      	b.n	800636e <prvProcessReceivedCommands+0x1a6>
					break;
 800636c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800636e:	4b08      	ldr	r3, [pc, #32]	@ (8006390 <prvProcessReceivedCommands+0x1c8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	1d39      	adds	r1, r7, #4
 8006374:	2200      	movs	r2, #0
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe f8d6 	bl	8004528 <xQueueReceive>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	f47f af26 	bne.w	80061d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	3730      	adds	r7, #48	@ 0x30
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000e28 	.word	0x20000e28

08006394 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800639a:	e049      	b.n	8006430 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800639c:	4b2e      	ldr	r3, [pc, #184]	@ (8006458 <prvSwitchTimerLists+0xc4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006458 <prvSwitchTimerLists+0xc4>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3304      	adds	r3, #4
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fd fca9 	bl	8003d0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d02f      	beq.n	8006430 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4413      	add	r3, r2
 80063d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d90e      	bls.n	8006400 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006458 <prvSwitchTimerLists+0xc4>)
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3304      	adds	r3, #4
 80063f6:	4619      	mov	r1, r3
 80063f8:	4610      	mov	r0, r2
 80063fa:	f7fd fc4e 	bl	8003c9a <vListInsert>
 80063fe:	e017      	b.n	8006430 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006400:	2300      	movs	r3, #0
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	2300      	movs	r3, #0
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	2100      	movs	r1, #0
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f7ff fd58 	bl	8005ec0 <xTimerGenericCommand>
 8006410:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10b      	bne.n	8006430 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	603b      	str	r3, [r7, #0]
}
 800642a:	bf00      	nop
 800642c:	bf00      	nop
 800642e:	e7fd      	b.n	800642c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006430:	4b09      	ldr	r3, [pc, #36]	@ (8006458 <prvSwitchTimerLists+0xc4>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1b0      	bne.n	800639c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800643a:	4b07      	ldr	r3, [pc, #28]	@ (8006458 <prvSwitchTimerLists+0xc4>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006440:	4b06      	ldr	r3, [pc, #24]	@ (800645c <prvSwitchTimerLists+0xc8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a04      	ldr	r2, [pc, #16]	@ (8006458 <prvSwitchTimerLists+0xc4>)
 8006446:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006448:	4a04      	ldr	r2, [pc, #16]	@ (800645c <prvSwitchTimerLists+0xc8>)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	6013      	str	r3, [r2, #0]
}
 800644e:	bf00      	nop
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000e20 	.word	0x20000e20
 800645c:	20000e24 	.word	0x20000e24

08006460 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006466:	f000 f96f 	bl	8006748 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800646a:	4b15      	ldr	r3, [pc, #84]	@ (80064c0 <prvCheckForValidListAndQueue+0x60>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d120      	bne.n	80064b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006472:	4814      	ldr	r0, [pc, #80]	@ (80064c4 <prvCheckForValidListAndQueue+0x64>)
 8006474:	f7fd fbc0 	bl	8003bf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006478:	4813      	ldr	r0, [pc, #76]	@ (80064c8 <prvCheckForValidListAndQueue+0x68>)
 800647a:	f7fd fbbd 	bl	8003bf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800647e:	4b13      	ldr	r3, [pc, #76]	@ (80064cc <prvCheckForValidListAndQueue+0x6c>)
 8006480:	4a10      	ldr	r2, [pc, #64]	@ (80064c4 <prvCheckForValidListAndQueue+0x64>)
 8006482:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006484:	4b12      	ldr	r3, [pc, #72]	@ (80064d0 <prvCheckForValidListAndQueue+0x70>)
 8006486:	4a10      	ldr	r2, [pc, #64]	@ (80064c8 <prvCheckForValidListAndQueue+0x68>)
 8006488:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800648a:	2300      	movs	r3, #0
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	4b11      	ldr	r3, [pc, #68]	@ (80064d4 <prvCheckForValidListAndQueue+0x74>)
 8006490:	4a11      	ldr	r2, [pc, #68]	@ (80064d8 <prvCheckForValidListAndQueue+0x78>)
 8006492:	2110      	movs	r1, #16
 8006494:	200a      	movs	r0, #10
 8006496:	f7fd fccd 	bl	8003e34 <xQueueGenericCreateStatic>
 800649a:	4603      	mov	r3, r0
 800649c:	4a08      	ldr	r2, [pc, #32]	@ (80064c0 <prvCheckForValidListAndQueue+0x60>)
 800649e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064a0:	4b07      	ldr	r3, [pc, #28]	@ (80064c0 <prvCheckForValidListAndQueue+0x60>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064a8:	4b05      	ldr	r3, [pc, #20]	@ (80064c0 <prvCheckForValidListAndQueue+0x60>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	490b      	ldr	r1, [pc, #44]	@ (80064dc <prvCheckForValidListAndQueue+0x7c>)
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fe fbfa 	bl	8004ca8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064b4:	f000 f97a 	bl	80067ac <vPortExitCritical>
}
 80064b8:	bf00      	nop
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000e28 	.word	0x20000e28
 80064c4:	20000df8 	.word	0x20000df8
 80064c8:	20000e0c 	.word	0x20000e0c
 80064cc:	20000e20 	.word	0x20000e20
 80064d0:	20000e24 	.word	0x20000e24
 80064d4:	20000ed4 	.word	0x20000ed4
 80064d8:	20000e34 	.word	0x20000e34
 80064dc:	08006fa4 	.word	0x08006fa4

080064e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3b04      	subs	r3, #4
 80064f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3b04      	subs	r3, #4
 80064fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f023 0201 	bic.w	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3b04      	subs	r3, #4
 800650e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006510:	4a0c      	ldr	r2, [pc, #48]	@ (8006544 <pxPortInitialiseStack+0x64>)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3b14      	subs	r3, #20
 800651a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3b04      	subs	r3, #4
 8006526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f06f 0202 	mvn.w	r2, #2
 800652e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3b20      	subs	r3, #32
 8006534:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006536:	68fb      	ldr	r3, [r7, #12]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	08006549 	.word	0x08006549

08006548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006552:	4b13      	ldr	r3, [pc, #76]	@ (80065a0 <prvTaskExitError+0x58>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655a:	d00b      	beq.n	8006574 <prvTaskExitError+0x2c>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	60fb      	str	r3, [r7, #12]
}
 800656e:	bf00      	nop
 8006570:	bf00      	nop
 8006572:	e7fd      	b.n	8006570 <prvTaskExitError+0x28>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	60bb      	str	r3, [r7, #8]
}
 8006586:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006588:	bf00      	nop
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0fc      	beq.n	800658a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006590:	bf00      	nop
 8006592:	bf00      	nop
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	2000000c 	.word	0x2000000c
	...

080065b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065b0:	4b07      	ldr	r3, [pc, #28]	@ (80065d0 <pxCurrentTCBConst2>)
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	6808      	ldr	r0, [r1, #0]
 80065b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ba:	f380 8809 	msr	PSP, r0
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	f380 8811 	msr	BASEPRI, r0
 80065ca:	4770      	bx	lr
 80065cc:	f3af 8000 	nop.w

080065d0 <pxCurrentTCBConst2>:
 80065d0:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop

080065d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065d8:	4808      	ldr	r0, [pc, #32]	@ (80065fc <prvPortStartFirstTask+0x24>)
 80065da:	6800      	ldr	r0, [r0, #0]
 80065dc:	6800      	ldr	r0, [r0, #0]
 80065de:	f380 8808 	msr	MSP, r0
 80065e2:	f04f 0000 	mov.w	r0, #0
 80065e6:	f380 8814 	msr	CONTROL, r0
 80065ea:	b662      	cpsie	i
 80065ec:	b661      	cpsie	f
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	df00      	svc	0
 80065f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065fa:	bf00      	nop
 80065fc:	e000ed08 	.word	0xe000ed08

08006600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006606:	4b47      	ldr	r3, [pc, #284]	@ (8006724 <xPortStartScheduler+0x124>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a47      	ldr	r2, [pc, #284]	@ (8006728 <xPortStartScheduler+0x128>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d10b      	bne.n	8006628 <xPortStartScheduler+0x28>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	613b      	str	r3, [r7, #16]
}
 8006622:	bf00      	nop
 8006624:	bf00      	nop
 8006626:	e7fd      	b.n	8006624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006628:	4b3e      	ldr	r3, [pc, #248]	@ (8006724 <xPortStartScheduler+0x124>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a3f      	ldr	r2, [pc, #252]	@ (800672c <xPortStartScheduler+0x12c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d10b      	bne.n	800664a <xPortStartScheduler+0x4a>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	60fb      	str	r3, [r7, #12]
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	e7fd      	b.n	8006646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800664a:	4b39      	ldr	r3, [pc, #228]	@ (8006730 <xPortStartScheduler+0x130>)
 800664c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	b2db      	uxtb	r3, r3
 8006654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	22ff      	movs	r2, #255	@ 0xff
 800665a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800666c:	b2da      	uxtb	r2, r3
 800666e:	4b31      	ldr	r3, [pc, #196]	@ (8006734 <xPortStartScheduler+0x134>)
 8006670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006672:	4b31      	ldr	r3, [pc, #196]	@ (8006738 <xPortStartScheduler+0x138>)
 8006674:	2207      	movs	r2, #7
 8006676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006678:	e009      	b.n	800668e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800667a:	4b2f      	ldr	r3, [pc, #188]	@ (8006738 <xPortStartScheduler+0x138>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3b01      	subs	r3, #1
 8006680:	4a2d      	ldr	r2, [pc, #180]	@ (8006738 <xPortStartScheduler+0x138>)
 8006682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	b2db      	uxtb	r3, r3
 800668c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006696:	2b80      	cmp	r3, #128	@ 0x80
 8006698:	d0ef      	beq.n	800667a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800669a:	4b27      	ldr	r3, [pc, #156]	@ (8006738 <xPortStartScheduler+0x138>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f1c3 0307 	rsb	r3, r3, #7
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d00b      	beq.n	80066be <xPortStartScheduler+0xbe>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	60bb      	str	r3, [r7, #8]
}
 80066b8:	bf00      	nop
 80066ba:	bf00      	nop
 80066bc:	e7fd      	b.n	80066ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066be:	4b1e      	ldr	r3, [pc, #120]	@ (8006738 <xPortStartScheduler+0x138>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006738 <xPortStartScheduler+0x138>)
 80066c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006738 <xPortStartScheduler+0x138>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066d0:	4a19      	ldr	r2, [pc, #100]	@ (8006738 <xPortStartScheduler+0x138>)
 80066d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066dc:	4b17      	ldr	r3, [pc, #92]	@ (800673c <xPortStartScheduler+0x13c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a16      	ldr	r2, [pc, #88]	@ (800673c <xPortStartScheduler+0x13c>)
 80066e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066e8:	4b14      	ldr	r3, [pc, #80]	@ (800673c <xPortStartScheduler+0x13c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a13      	ldr	r2, [pc, #76]	@ (800673c <xPortStartScheduler+0x13c>)
 80066ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066f4:	f000 f8da 	bl	80068ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066f8:	4b11      	ldr	r3, [pc, #68]	@ (8006740 <xPortStartScheduler+0x140>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066fe:	f000 f8f9 	bl	80068f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006702:	4b10      	ldr	r3, [pc, #64]	@ (8006744 <xPortStartScheduler+0x144>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a0f      	ldr	r2, [pc, #60]	@ (8006744 <xPortStartScheduler+0x144>)
 8006708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800670c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800670e:	f7ff ff63 	bl	80065d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006712:	f7fe ff2b 	bl	800556c <vTaskSwitchContext>
	prvTaskExitError();
 8006716:	f7ff ff17 	bl	8006548 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	e000ed00 	.word	0xe000ed00
 8006728:	410fc271 	.word	0x410fc271
 800672c:	410fc270 	.word	0x410fc270
 8006730:	e000e400 	.word	0xe000e400
 8006734:	20000f24 	.word	0x20000f24
 8006738:	20000f28 	.word	0x20000f28
 800673c:	e000ed20 	.word	0xe000ed20
 8006740:	2000000c 	.word	0x2000000c
 8006744:	e000ef34 	.word	0xe000ef34

08006748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	607b      	str	r3, [r7, #4]
}
 8006760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006762:	4b10      	ldr	r3, [pc, #64]	@ (80067a4 <vPortEnterCritical+0x5c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3301      	adds	r3, #1
 8006768:	4a0e      	ldr	r2, [pc, #56]	@ (80067a4 <vPortEnterCritical+0x5c>)
 800676a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800676c:	4b0d      	ldr	r3, [pc, #52]	@ (80067a4 <vPortEnterCritical+0x5c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d110      	bne.n	8006796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006774:	4b0c      	ldr	r3, [pc, #48]	@ (80067a8 <vPortEnterCritical+0x60>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <vPortEnterCritical+0x4e>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	603b      	str	r3, [r7, #0]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <vPortEnterCritical+0x4a>
	}
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	2000000c 	.word	0x2000000c
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067b2:	4b12      	ldr	r3, [pc, #72]	@ (80067fc <vPortExitCritical+0x50>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10b      	bne.n	80067d2 <vPortExitCritical+0x26>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	607b      	str	r3, [r7, #4]
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	e7fd      	b.n	80067ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067d2:	4b0a      	ldr	r3, [pc, #40]	@ (80067fc <vPortExitCritical+0x50>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	4a08      	ldr	r2, [pc, #32]	@ (80067fc <vPortExitCritical+0x50>)
 80067da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067dc:	4b07      	ldr	r3, [pc, #28]	@ (80067fc <vPortExitCritical+0x50>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d105      	bne.n	80067f0 <vPortExitCritical+0x44>
 80067e4:	2300      	movs	r3, #0
 80067e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	f383 8811 	msr	BASEPRI, r3
}
 80067ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	2000000c 	.word	0x2000000c

08006800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006800:	f3ef 8009 	mrs	r0, PSP
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	4b15      	ldr	r3, [pc, #84]	@ (8006860 <pxCurrentTCBConst>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	f01e 0f10 	tst.w	lr, #16
 8006810:	bf08      	it	eq
 8006812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681a:	6010      	str	r0, [r2, #0]
 800681c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006824:	f380 8811 	msr	BASEPRI, r0
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f7fe fe9c 	bl	800556c <vTaskSwitchContext>
 8006834:	f04f 0000 	mov.w	r0, #0
 8006838:	f380 8811 	msr	BASEPRI, r0
 800683c:	bc09      	pop	{r0, r3}
 800683e:	6819      	ldr	r1, [r3, #0]
 8006840:	6808      	ldr	r0, [r1, #0]
 8006842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006846:	f01e 0f10 	tst.w	lr, #16
 800684a:	bf08      	it	eq
 800684c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006850:	f380 8809 	msr	PSP, r0
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	f3af 8000 	nop.w

08006860 <pxCurrentTCBConst>:
 8006860:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop

08006868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	607b      	str	r3, [r7, #4]
}
 8006880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006882:	f7fe fdb9 	bl	80053f8 <xTaskIncrementTick>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800688c:	4b06      	ldr	r3, [pc, #24]	@ (80068a8 <xPortSysTickHandler+0x40>)
 800688e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	2300      	movs	r3, #0
 8006896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	f383 8811 	msr	BASEPRI, r3
}
 800689e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068b0:	4b0b      	ldr	r3, [pc, #44]	@ (80068e0 <vPortSetupTimerInterrupt+0x34>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068b6:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <vPortSetupTimerInterrupt+0x38>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068bc:	4b0a      	ldr	r3, [pc, #40]	@ (80068e8 <vPortSetupTimerInterrupt+0x3c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a0a      	ldr	r2, [pc, #40]	@ (80068ec <vPortSetupTimerInterrupt+0x40>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	099b      	lsrs	r3, r3, #6
 80068c8:	4a09      	ldr	r2, [pc, #36]	@ (80068f0 <vPortSetupTimerInterrupt+0x44>)
 80068ca:	3b01      	subs	r3, #1
 80068cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ce:	4b04      	ldr	r3, [pc, #16]	@ (80068e0 <vPortSetupTimerInterrupt+0x34>)
 80068d0:	2207      	movs	r2, #7
 80068d2:	601a      	str	r2, [r3, #0]
}
 80068d4:	bf00      	nop
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	e000e010 	.word	0xe000e010
 80068e4:	e000e018 	.word	0xe000e018
 80068e8:	20000000 	.word	0x20000000
 80068ec:	10624dd3 	.word	0x10624dd3
 80068f0:	e000e014 	.word	0xe000e014

080068f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006904 <vPortEnableVFP+0x10>
 80068f8:	6801      	ldr	r1, [r0, #0]
 80068fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068fe:	6001      	str	r1, [r0, #0]
 8006900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006902:	bf00      	nop
 8006904:	e000ed88 	.word	0xe000ed88

08006908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800690e:	f3ef 8305 	mrs	r3, IPSR
 8006912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b0f      	cmp	r3, #15
 8006918:	d915      	bls.n	8006946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800691a:	4a18      	ldr	r2, [pc, #96]	@ (800697c <vPortValidateInterruptPriority+0x74>)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006924:	4b16      	ldr	r3, [pc, #88]	@ (8006980 <vPortValidateInterruptPriority+0x78>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	7afa      	ldrb	r2, [r7, #11]
 800692a:	429a      	cmp	r2, r3
 800692c:	d20b      	bcs.n	8006946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	607b      	str	r3, [r7, #4]
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	e7fd      	b.n	8006942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006946:	4b0f      	ldr	r3, [pc, #60]	@ (8006984 <vPortValidateInterruptPriority+0x7c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800694e:	4b0e      	ldr	r3, [pc, #56]	@ (8006988 <vPortValidateInterruptPriority+0x80>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d90b      	bls.n	800696e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	603b      	str	r3, [r7, #0]
}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	e7fd      	b.n	800696a <vPortValidateInterruptPriority+0x62>
	}
 800696e:	bf00      	nop
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	e000e3f0 	.word	0xe000e3f0
 8006980:	20000f24 	.word	0x20000f24
 8006984:	e000ed0c 	.word	0xe000ed0c
 8006988:	20000f28 	.word	0x20000f28

0800698c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	@ 0x28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006998:	f7fe fc72 	bl	8005280 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800699c:	4b5c      	ldr	r3, [pc, #368]	@ (8006b10 <pvPortMalloc+0x184>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069a4:	f000 f924 	bl	8006bf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006b14 <pvPortMalloc+0x188>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4013      	ands	r3, r2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f040 8095 	bne.w	8006ae0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01e      	beq.n	80069fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80069bc:	2208      	movs	r2, #8
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4413      	add	r3, r2
 80069c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d015      	beq.n	80069fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f023 0307 	bic.w	r3, r3, #7
 80069d4:	3308      	adds	r3, #8
 80069d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <pvPortMalloc+0x6e>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	617b      	str	r3, [r7, #20]
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	e7fd      	b.n	80069f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d06f      	beq.n	8006ae0 <pvPortMalloc+0x154>
 8006a00:	4b45      	ldr	r3, [pc, #276]	@ (8006b18 <pvPortMalloc+0x18c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d86a      	bhi.n	8006ae0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a0a:	4b44      	ldr	r3, [pc, #272]	@ (8006b1c <pvPortMalloc+0x190>)
 8006a0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a0e:	4b43      	ldr	r3, [pc, #268]	@ (8006b1c <pvPortMalloc+0x190>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a14:	e004      	b.n	8006a20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d903      	bls.n	8006a32 <pvPortMalloc+0xa6>
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1f1      	bne.n	8006a16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a32:	4b37      	ldr	r3, [pc, #220]	@ (8006b10 <pvPortMalloc+0x184>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d051      	beq.n	8006ae0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2208      	movs	r2, #8
 8006a42:	4413      	add	r3, r2
 8006a44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	1ad2      	subs	r2, r2, r3
 8006a56:	2308      	movs	r3, #8
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d920      	bls.n	8006aa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4413      	add	r3, r2
 8006a64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <pvPortMalloc+0xfc>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	613b      	str	r3, [r7, #16]
}
 8006a82:	bf00      	nop
 8006a84:	bf00      	nop
 8006a86:	e7fd      	b.n	8006a84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a9a:	69b8      	ldr	r0, [r7, #24]
 8006a9c:	f000 f90a 	bl	8006cb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b18 <pvPortMalloc+0x18c>)
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8006b18 <pvPortMalloc+0x18c>)
 8006aac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aae:	4b1a      	ldr	r3, [pc, #104]	@ (8006b18 <pvPortMalloc+0x18c>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b20 <pvPortMalloc+0x194>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d203      	bcs.n	8006ac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006aba:	4b17      	ldr	r3, [pc, #92]	@ (8006b18 <pvPortMalloc+0x18c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a18      	ldr	r2, [pc, #96]	@ (8006b20 <pvPortMalloc+0x194>)
 8006ac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	4b13      	ldr	r3, [pc, #76]	@ (8006b14 <pvPortMalloc+0x188>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ad6:	4b13      	ldr	r3, [pc, #76]	@ (8006b24 <pvPortMalloc+0x198>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3301      	adds	r3, #1
 8006adc:	4a11      	ldr	r2, [pc, #68]	@ (8006b24 <pvPortMalloc+0x198>)
 8006ade:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ae0:	f7fe fbdc 	bl	800529c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <pvPortMalloc+0x17a>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	60fb      	str	r3, [r7, #12]
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	e7fd      	b.n	8006b02 <pvPortMalloc+0x176>
	return pvReturn;
 8006b06:	69fb      	ldr	r3, [r7, #28]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3728      	adds	r7, #40	@ 0x28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	20001aec 	.word	0x20001aec
 8006b14:	20001b00 	.word	0x20001b00
 8006b18:	20001af0 	.word	0x20001af0
 8006b1c:	20001ae4 	.word	0x20001ae4
 8006b20:	20001af4 	.word	0x20001af4
 8006b24:	20001af8 	.word	0x20001af8

08006b28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d04f      	beq.n	8006bda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	425b      	negs	r3, r3
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4413      	add	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	4b25      	ldr	r3, [pc, #148]	@ (8006be4 <vPortFree+0xbc>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4013      	ands	r3, r2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10b      	bne.n	8006b6e <vPortFree+0x46>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	60fb      	str	r3, [r7, #12]
}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	e7fd      	b.n	8006b6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <vPortFree+0x66>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	60bb      	str	r3, [r7, #8]
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	e7fd      	b.n	8006b8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	4b14      	ldr	r3, [pc, #80]	@ (8006be4 <vPortFree+0xbc>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01e      	beq.n	8006bda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d11a      	bne.n	8006bda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8006be4 <vPortFree+0xbc>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	43db      	mvns	r3, r3
 8006bae:	401a      	ands	r2, r3
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bb4:	f7fe fb64 	bl	8005280 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006be8 <vPortFree+0xc0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	4a09      	ldr	r2, [pc, #36]	@ (8006be8 <vPortFree+0xc0>)
 8006bc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bc6:	6938      	ldr	r0, [r7, #16]
 8006bc8:	f000 f874 	bl	8006cb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bcc:	4b07      	ldr	r3, [pc, #28]	@ (8006bec <vPortFree+0xc4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	4a06      	ldr	r2, [pc, #24]	@ (8006bec <vPortFree+0xc4>)
 8006bd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bd6:	f7fe fb61 	bl	800529c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bda:	bf00      	nop
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20001b00 	.word	0x20001b00
 8006be8:	20001af0 	.word	0x20001af0
 8006bec:	20001afc 	.word	0x20001afc

08006bf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bf6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006bfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bfc:	4b27      	ldr	r3, [pc, #156]	@ (8006c9c <prvHeapInit+0xac>)
 8006bfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00c      	beq.n	8006c24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3307      	adds	r3, #7
 8006c0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0307 	bic.w	r3, r3, #7
 8006c16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8006c9c <prvHeapInit+0xac>)
 8006c20:	4413      	add	r3, r2
 8006c22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c28:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca0 <prvHeapInit+0xb0>)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ca0 <prvHeapInit+0xb0>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	4413      	add	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	1a9b      	subs	r3, r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0307 	bic.w	r3, r3, #7
 8006c4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4a15      	ldr	r2, [pc, #84]	@ (8006ca4 <prvHeapInit+0xb4>)
 8006c50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c52:	4b14      	ldr	r3, [pc, #80]	@ (8006ca4 <prvHeapInit+0xb4>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2200      	movs	r2, #0
 8006c58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c5a:	4b12      	ldr	r3, [pc, #72]	@ (8006ca4 <prvHeapInit+0xb4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	1ad2      	subs	r2, r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c70:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca4 <prvHeapInit+0xb4>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8006ca8 <prvHeapInit+0xb8>)
 8006c7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	4a09      	ldr	r2, [pc, #36]	@ (8006cac <prvHeapInit+0xbc>)
 8006c86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c88:	4b09      	ldr	r3, [pc, #36]	@ (8006cb0 <prvHeapInit+0xc0>)
 8006c8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c8e:	601a      	str	r2, [r3, #0]
}
 8006c90:	bf00      	nop
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	20000f2c 	.word	0x20000f2c
 8006ca0:	20001ae4 	.word	0x20001ae4
 8006ca4:	20001aec 	.word	0x20001aec
 8006ca8:	20001af4 	.word	0x20001af4
 8006cac:	20001af0 	.word	0x20001af0
 8006cb0:	20001b00 	.word	0x20001b00

08006cb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cbc:	4b28      	ldr	r3, [pc, #160]	@ (8006d60 <prvInsertBlockIntoFreeList+0xac>)
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	e002      	b.n	8006cc8 <prvInsertBlockIntoFreeList+0x14>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d8f7      	bhi.n	8006cc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	4413      	add	r3, r2
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d108      	bne.n	8006cf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	441a      	add	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	441a      	add	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d118      	bne.n	8006d3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4b15      	ldr	r3, [pc, #84]	@ (8006d64 <prvInsertBlockIntoFreeList+0xb0>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d00d      	beq.n	8006d32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	441a      	add	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	e008      	b.n	8006d44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d32:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <prvInsertBlockIntoFreeList+0xb0>)
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	e003      	b.n	8006d44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d002      	beq.n	8006d52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	20001ae4 	.word	0x20001ae4
 8006d64:	20001aec 	.word	0x20001aec

08006d68 <memset>:
 8006d68:	4402      	add	r2, r0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d100      	bne.n	8006d72 <memset+0xa>
 8006d70:	4770      	bx	lr
 8006d72:	f803 1b01 	strb.w	r1, [r3], #1
 8006d76:	e7f9      	b.n	8006d6c <memset+0x4>

08006d78 <_reclaim_reent>:
 8006d78:	4b29      	ldr	r3, [pc, #164]	@ (8006e20 <_reclaim_reent+0xa8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4283      	cmp	r3, r0
 8006d7e:	b570      	push	{r4, r5, r6, lr}
 8006d80:	4604      	mov	r4, r0
 8006d82:	d04b      	beq.n	8006e1c <_reclaim_reent+0xa4>
 8006d84:	69c3      	ldr	r3, [r0, #28]
 8006d86:	b1ab      	cbz	r3, 8006db4 <_reclaim_reent+0x3c>
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	b16b      	cbz	r3, 8006da8 <_reclaim_reent+0x30>
 8006d8c:	2500      	movs	r5, #0
 8006d8e:	69e3      	ldr	r3, [r4, #28]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	5959      	ldr	r1, [r3, r5]
 8006d94:	2900      	cmp	r1, #0
 8006d96:	d13b      	bne.n	8006e10 <_reclaim_reent+0x98>
 8006d98:	3504      	adds	r5, #4
 8006d9a:	2d80      	cmp	r5, #128	@ 0x80
 8006d9c:	d1f7      	bne.n	8006d8e <_reclaim_reent+0x16>
 8006d9e:	69e3      	ldr	r3, [r4, #28]
 8006da0:	4620      	mov	r0, r4
 8006da2:	68d9      	ldr	r1, [r3, #12]
 8006da4:	f000 f872 	bl	8006e8c <_free_r>
 8006da8:	69e3      	ldr	r3, [r4, #28]
 8006daa:	6819      	ldr	r1, [r3, #0]
 8006dac:	b111      	cbz	r1, 8006db4 <_reclaim_reent+0x3c>
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 f86c 	bl	8006e8c <_free_r>
 8006db4:	6961      	ldr	r1, [r4, #20]
 8006db6:	b111      	cbz	r1, 8006dbe <_reclaim_reent+0x46>
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 f867 	bl	8006e8c <_free_r>
 8006dbe:	69e1      	ldr	r1, [r4, #28]
 8006dc0:	b111      	cbz	r1, 8006dc8 <_reclaim_reent+0x50>
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 f862 	bl	8006e8c <_free_r>
 8006dc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006dca:	b111      	cbz	r1, 8006dd2 <_reclaim_reent+0x5a>
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 f85d 	bl	8006e8c <_free_r>
 8006dd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dd4:	b111      	cbz	r1, 8006ddc <_reclaim_reent+0x64>
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 f858 	bl	8006e8c <_free_r>
 8006ddc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006dde:	b111      	cbz	r1, 8006de6 <_reclaim_reent+0x6e>
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 f853 	bl	8006e8c <_free_r>
 8006de6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006de8:	b111      	cbz	r1, 8006df0 <_reclaim_reent+0x78>
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 f84e 	bl	8006e8c <_free_r>
 8006df0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006df2:	b111      	cbz	r1, 8006dfa <_reclaim_reent+0x82>
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 f849 	bl	8006e8c <_free_r>
 8006dfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006dfc:	b111      	cbz	r1, 8006e04 <_reclaim_reent+0x8c>
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 f844 	bl	8006e8c <_free_r>
 8006e04:	6a23      	ldr	r3, [r4, #32]
 8006e06:	b14b      	cbz	r3, 8006e1c <_reclaim_reent+0xa4>
 8006e08:	4620      	mov	r0, r4
 8006e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e0e:	4718      	bx	r3
 8006e10:	680e      	ldr	r6, [r1, #0]
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 f83a 	bl	8006e8c <_free_r>
 8006e18:	4631      	mov	r1, r6
 8006e1a:	e7bb      	b.n	8006d94 <_reclaim_reent+0x1c>
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000010 	.word	0x20000010

08006e24 <__libc_init_array>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	4d0d      	ldr	r5, [pc, #52]	@ (8006e5c <__libc_init_array+0x38>)
 8006e28:	4c0d      	ldr	r4, [pc, #52]	@ (8006e60 <__libc_init_array+0x3c>)
 8006e2a:	1b64      	subs	r4, r4, r5
 8006e2c:	10a4      	asrs	r4, r4, #2
 8006e2e:	2600      	movs	r6, #0
 8006e30:	42a6      	cmp	r6, r4
 8006e32:	d109      	bne.n	8006e48 <__libc_init_array+0x24>
 8006e34:	4d0b      	ldr	r5, [pc, #44]	@ (8006e64 <__libc_init_array+0x40>)
 8006e36:	4c0c      	ldr	r4, [pc, #48]	@ (8006e68 <__libc_init_array+0x44>)
 8006e38:	f000 f87e 	bl	8006f38 <_init>
 8006e3c:	1b64      	subs	r4, r4, r5
 8006e3e:	10a4      	asrs	r4, r4, #2
 8006e40:	2600      	movs	r6, #0
 8006e42:	42a6      	cmp	r6, r4
 8006e44:	d105      	bne.n	8006e52 <__libc_init_array+0x2e>
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4c:	4798      	blx	r3
 8006e4e:	3601      	adds	r6, #1
 8006e50:	e7ee      	b.n	8006e30 <__libc_init_array+0xc>
 8006e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e56:	4798      	blx	r3
 8006e58:	3601      	adds	r6, #1
 8006e5a:	e7f2      	b.n	8006e42 <__libc_init_array+0x1e>
 8006e5c:	08007054 	.word	0x08007054
 8006e60:	08007054 	.word	0x08007054
 8006e64:	08007054 	.word	0x08007054
 8006e68:	08007058 	.word	0x08007058

08006e6c <__retarget_lock_acquire_recursive>:
 8006e6c:	4770      	bx	lr

08006e6e <__retarget_lock_release_recursive>:
 8006e6e:	4770      	bx	lr

08006e70 <memcpy>:
 8006e70:	440a      	add	r2, r1
 8006e72:	4291      	cmp	r1, r2
 8006e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e78:	d100      	bne.n	8006e7c <memcpy+0xc>
 8006e7a:	4770      	bx	lr
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e86:	4291      	cmp	r1, r2
 8006e88:	d1f9      	bne.n	8006e7e <memcpy+0xe>
 8006e8a:	bd10      	pop	{r4, pc}

08006e8c <_free_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4605      	mov	r5, r0
 8006e90:	2900      	cmp	r1, #0
 8006e92:	d041      	beq.n	8006f18 <_free_r+0x8c>
 8006e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e98:	1f0c      	subs	r4, r1, #4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	bfb8      	it	lt
 8006e9e:	18e4      	addlt	r4, r4, r3
 8006ea0:	f000 f83e 	bl	8006f20 <__malloc_lock>
 8006ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8006f1c <_free_r+0x90>)
 8006ea6:	6813      	ldr	r3, [r2, #0]
 8006ea8:	b933      	cbnz	r3, 8006eb8 <_free_r+0x2c>
 8006eaa:	6063      	str	r3, [r4, #4]
 8006eac:	6014      	str	r4, [r2, #0]
 8006eae:	4628      	mov	r0, r5
 8006eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eb4:	f000 b83a 	b.w	8006f2c <__malloc_unlock>
 8006eb8:	42a3      	cmp	r3, r4
 8006eba:	d908      	bls.n	8006ece <_free_r+0x42>
 8006ebc:	6820      	ldr	r0, [r4, #0]
 8006ebe:	1821      	adds	r1, r4, r0
 8006ec0:	428b      	cmp	r3, r1
 8006ec2:	bf01      	itttt	eq
 8006ec4:	6819      	ldreq	r1, [r3, #0]
 8006ec6:	685b      	ldreq	r3, [r3, #4]
 8006ec8:	1809      	addeq	r1, r1, r0
 8006eca:	6021      	streq	r1, [r4, #0]
 8006ecc:	e7ed      	b.n	8006eaa <_free_r+0x1e>
 8006ece:	461a      	mov	r2, r3
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	b10b      	cbz	r3, 8006ed8 <_free_r+0x4c>
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	d9fa      	bls.n	8006ece <_free_r+0x42>
 8006ed8:	6811      	ldr	r1, [r2, #0]
 8006eda:	1850      	adds	r0, r2, r1
 8006edc:	42a0      	cmp	r0, r4
 8006ede:	d10b      	bne.n	8006ef8 <_free_r+0x6c>
 8006ee0:	6820      	ldr	r0, [r4, #0]
 8006ee2:	4401      	add	r1, r0
 8006ee4:	1850      	adds	r0, r2, r1
 8006ee6:	4283      	cmp	r3, r0
 8006ee8:	6011      	str	r1, [r2, #0]
 8006eea:	d1e0      	bne.n	8006eae <_free_r+0x22>
 8006eec:	6818      	ldr	r0, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	6053      	str	r3, [r2, #4]
 8006ef2:	4408      	add	r0, r1
 8006ef4:	6010      	str	r0, [r2, #0]
 8006ef6:	e7da      	b.n	8006eae <_free_r+0x22>
 8006ef8:	d902      	bls.n	8006f00 <_free_r+0x74>
 8006efa:	230c      	movs	r3, #12
 8006efc:	602b      	str	r3, [r5, #0]
 8006efe:	e7d6      	b.n	8006eae <_free_r+0x22>
 8006f00:	6820      	ldr	r0, [r4, #0]
 8006f02:	1821      	adds	r1, r4, r0
 8006f04:	428b      	cmp	r3, r1
 8006f06:	bf04      	itt	eq
 8006f08:	6819      	ldreq	r1, [r3, #0]
 8006f0a:	685b      	ldreq	r3, [r3, #4]
 8006f0c:	6063      	str	r3, [r4, #4]
 8006f0e:	bf04      	itt	eq
 8006f10:	1809      	addeq	r1, r1, r0
 8006f12:	6021      	streq	r1, [r4, #0]
 8006f14:	6054      	str	r4, [r2, #4]
 8006f16:	e7ca      	b.n	8006eae <_free_r+0x22>
 8006f18:	bd38      	pop	{r3, r4, r5, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20001c40 	.word	0x20001c40

08006f20 <__malloc_lock>:
 8006f20:	4801      	ldr	r0, [pc, #4]	@ (8006f28 <__malloc_lock+0x8>)
 8006f22:	f7ff bfa3 	b.w	8006e6c <__retarget_lock_acquire_recursive>
 8006f26:	bf00      	nop
 8006f28:	20001c3c 	.word	0x20001c3c

08006f2c <__malloc_unlock>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	@ (8006f34 <__malloc_unlock+0x8>)
 8006f2e:	f7ff bf9e 	b.w	8006e6e <__retarget_lock_release_recursive>
 8006f32:	bf00      	nop
 8006f34:	20001c3c 	.word	0x20001c3c

08006f38 <_init>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	bf00      	nop
 8006f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3e:	bc08      	pop	{r3}
 8006f40:	469e      	mov	lr, r3
 8006f42:	4770      	bx	lr

08006f44 <_fini>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	bf00      	nop
 8006f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4a:	bc08      	pop	{r3}
 8006f4c:	469e      	mov	lr, r3
 8006f4e:	4770      	bx	lr
