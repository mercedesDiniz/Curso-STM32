
SPIExemplo01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e30  08002e30  00003e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e70  08002e70  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e70  08002e70  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e70  08002e70  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e70  08002e70  00003e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e74  08002e74  00003e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e78  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08002e84  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002e84  00004098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000067be  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000140b  00000000  00000000  0000a7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0000bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058c  00000000  00000000  0000c378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249d9  00000000  00000000  0000c904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000807d  00000000  00000000  000312dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1c4e  00000000  00000000  0003935a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011afa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001de8  00000000  00000000  0011afec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0011cdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e18 	.word	0x08002e18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002e18 	.word	0x08002e18

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	0000      	movs	r0, r0
	...

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083e:	f000 fa58 	bl	8000cf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000842:	f000 f87b 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000846:	f000 f8fd 	bl	8000a44 <MX_GPIO_Init>
  MX_SPI1_Init();
 800084a:	f000 f8bd 	bl	80009c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, CS_Pin, 1); //Chip Select em Alto; (DAC)
 800084e:	2201      	movs	r2, #1
 8000850:	2140      	movs	r1, #64	@ 0x40
 8000852:	4835      	ldr	r0, [pc, #212]	@ (8000928 <main+0xf0>)
 8000854:	f000 fd76 	bl	8001344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, CS_ad_Pin, 1); //Chip Select em Alto; (ADC)
 8000858:	2201      	movs	r2, #1
 800085a:	2180      	movs	r1, #128	@ 0x80
 800085c:	4833      	ldr	r0, [pc, #204]	@ (800092c <main+0xf4>)
 800085e:	f000 fd71 	bl	8001344 <HAL_GPIO_WritePin>
  HAL_Delay(100); //Aguarda Tempo.
 8000862:	2064      	movs	r0, #100	@ 0x64
 8000864:	f000 faba 	bl	8000ddc <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //MCP4921 - Lógica Básica:
	  HAL_GPIO_WritePin(GPIOB, CS_Pin, 0); //Chip Select em Baixo;
 8000868:	2200      	movs	r2, #0
 800086a:	2140      	movs	r1, #64	@ 0x40
 800086c:	482e      	ldr	r0, [pc, #184]	@ (8000928 <main+0xf0>)
 800086e:	f000 fd69 	bl	8001344 <HAL_GPIO_WritePin>
	  uint16_t dados=0x7000; //Configuração do MCP4921;
 8000872:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000876:	80bb      	strh	r3, [r7, #4]
	  uint16_t dac;//Dados Requeridos;
	  dac++; if(dac>4094){dac=0;}
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	3301      	adds	r3, #1
 800087c:	80fb      	strh	r3, [r7, #6]
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000884:	4293      	cmp	r3, r2
 8000886:	d901      	bls.n	800088c <main+0x54>
 8000888:	2300      	movs	r3, #0
 800088a:	80fb      	strh	r3, [r7, #6]
	  dados=dados+dac; //Valor do SPI;
 800088c:	88ba      	ldrh	r2, [r7, #4]
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	4413      	add	r3, r2
 8000892:	b29b      	uxth	r3, r3
 8000894:	80bb      	strh	r3, [r7, #4]
	  HAL_SPI_Transmit(&hspi1, &dados, 1, 100);
 8000896:	1d39      	adds	r1, r7, #4
 8000898:	2364      	movs	r3, #100	@ 0x64
 800089a:	2201      	movs	r2, #1
 800089c:	4824      	ldr	r0, [pc, #144]	@ (8000930 <main+0xf8>)
 800089e:	f001 fc26 	bl	80020ee <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, CS_Pin, 1); //Chip Select em Alto;
 80008a2:	2201      	movs	r2, #1
 80008a4:	2140      	movs	r1, #64	@ 0x40
 80008a6:	4820      	ldr	r0, [pc, #128]	@ (8000928 <main+0xf0>)
 80008a8:	f000 fd4c 	bl	8001344 <HAL_GPIO_WritePin>

	  //MCP3008 - Lógica Básica:
	  HAL_GPIO_WritePin(GPIOC, CS_ad_Pin, 0); //Chip Select em Baixo;
 80008ac:	2200      	movs	r2, #0
 80008ae:	2180      	movs	r1, #128	@ 0x80
 80008b0:	481e      	ldr	r0, [pc, #120]	@ (800092c <main+0xf4>)
 80008b2:	f000 fd47 	bl	8001344 <HAL_GPIO_WritePin>
	  uint16_t configadc=0x30; //Variável de Configuração;
 80008b6:	2330      	movs	r3, #48	@ 0x30
 80008b8:	807b      	strh	r3, [r7, #2]
	  HAL_SPI_Transmit(&hspi1, &configadc, 1, 100); //Envia Configuração;
 80008ba:	1cb9      	adds	r1, r7, #2
 80008bc:	2364      	movs	r3, #100	@ 0x64
 80008be:	2201      	movs	r2, #1
 80008c0:	481b      	ldr	r0, [pc, #108]	@ (8000930 <main+0xf8>)
 80008c2:	f001 fc14 	bl	80020ee <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, &dadosadc, 1, 100); //Recebe dados SPI e armazena na Variável;
 80008c6:	2364      	movs	r3, #100	@ 0x64
 80008c8:	2201      	movs	r2, #1
 80008ca:	491a      	ldr	r1, [pc, #104]	@ (8000934 <main+0xfc>)
 80008cc:	4818      	ldr	r0, [pc, #96]	@ (8000930 <main+0xf8>)
 80008ce:	f001 fd7c 	bl	80023ca <HAL_SPI_Receive>
	  dadosadc=((dadosadc & 0x7FE0)>>5); //Amostra em Resolução;
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <main+0xfc>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	115b      	asrs	r3, r3, #5
 80008d8:	b29b      	uxth	r3, r3
 80008da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <main+0xfc>)
 80008e2:	801a      	strh	r2, [r3, #0]
	  adcdados=dadosadc*0.003225806451; //Amostra em Tensão;
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <main+0xfc>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fee9 	bl	80006c0 <__aeabi_i2d>
 80008ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8000920 <main+0xe8>)
 80008f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008f4:	f7ff fc68 	bl	80001c8 <__aeabi_dmul>
 80008f8:	4602      	mov	r2, r0
 80008fa:	460b      	mov	r3, r1
 80008fc:	4610      	mov	r0, r2
 80008fe:	4619      	mov	r1, r3
 8000900:	f7ff ff48 	bl	8000794 <__aeabi_d2f>
 8000904:	4603      	mov	r3, r0
 8000906:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <main+0x100>)
 8000908:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOC, CS_ad_Pin, 1); //Chip Select em Alto;
 800090a:	2201      	movs	r2, #1
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	4807      	ldr	r0, [pc, #28]	@ (800092c <main+0xf4>)
 8000910:	f000 fd18 	bl	8001344 <HAL_GPIO_WritePin>

	  HAL_Delay(50); //Aguarda 50ms
 8000914:	2032      	movs	r0, #50	@ 0x32
 8000916:	f000 fa61 	bl	8000ddc <HAL_Delay>
  {
 800091a:	e7a5      	b.n	8000868 <main+0x30>
 800091c:	f3af 8000 	nop.w
 8000920:	a6ba89e2 	.word	0xa6ba89e2
 8000924:	3f6a6d01 	.word	0x3f6a6d01
 8000928:	48000400 	.word	0x48000400
 800092c:	48000800 	.word	0x48000800
 8000930:	20000030 	.word	0x20000030
 8000934:	20000028 	.word	0x20000028
 8000938:	2000002c 	.word	0x2000002c

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b096      	sub	sp, #88	@ 0x58
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	2244      	movs	r2, #68	@ 0x44
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fa38 	bl	8002dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	463b      	mov	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800095e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000962:	f000 fd15 	bl	8001390 <HAL_PWREx_ControlVoltageScaling>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800096c:	f000 f8ca 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000970:	2302      	movs	r3, #2
 8000972:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000974:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000978:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097a:	2310      	movs	r3, #16
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800097e:	2300      	movs	r3, #0
 8000980:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fd58 	bl	800143c <HAL_RCC_OscConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000992:	f000 f8b7 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000996:	230f      	movs	r3, #15
 8000998:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800099a:	2301      	movs	r3, #1
 800099c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f92c 	bl	8001c0c <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009ba:	f000 f8a3 	bl	8000b04 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3758      	adds	r7, #88	@ 0x58
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <MX_SPI1_Init+0x74>)
 80009ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000a40 <MX_SPI1_Init+0x78>)
 80009d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a3c <MX_SPI1_Init+0x74>)
 80009d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009da:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_SPI1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <MX_SPI1_Init+0x74>)
 80009e2:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80009e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e8:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <MX_SPI1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ee:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <MX_SPI1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_SPI1_Init+0x74>)
 80009f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_SPI1_Init+0x74>)
 80009fe:	2220      	movs	r2, #32
 8000a00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_SPI1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_SPI1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <MX_SPI1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_SPI1_Init+0x74>)
 8000a16:	2207      	movs	r2, #7
 8000a18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <MX_SPI1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_SPI1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_SPI1_Init+0x74>)
 8000a28:	f001 fabe 	bl	8001fa8 <HAL_SPI_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a32:	f000 f867 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000030 	.word	0x20000030
 8000a40:	40013000 	.word	0x40013000

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <MX_GPIO_Init+0xb4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5e:	4a26      	ldr	r2, [pc, #152]	@ (8000af8 <MX_GPIO_Init+0xb4>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a66:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <MX_GPIO_Init+0xb4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <MX_GPIO_Init+0xb4>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a76:	4a20      	ldr	r2, [pc, #128]	@ (8000af8 <MX_GPIO_Init+0xb4>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <MX_GPIO_Init+0xb4>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <MX_GPIO_Init+0xb4>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8000af8 <MX_GPIO_Init+0xb4>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_GPIO_Init+0xb4>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ad_GPIO_Port, CS_ad_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2180      	movs	r1, #128	@ 0x80
 8000aa6:	4815      	ldr	r0, [pc, #84]	@ (8000afc <MX_GPIO_Init+0xb8>)
 8000aa8:	f000 fc4c 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2140      	movs	r1, #64	@ 0x40
 8000ab0:	4813      	ldr	r0, [pc, #76]	@ (8000b00 <MX_GPIO_Init+0xbc>)
 8000ab2:	f000 fc47 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_ad_Pin */
  GPIO_InitStruct.Pin = CS_ad_Pin;
 8000ab6:	2380      	movs	r3, #128	@ 0x80
 8000ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_ad_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4619      	mov	r1, r3
 8000acc:	480b      	ldr	r0, [pc, #44]	@ (8000afc <MX_GPIO_Init+0xb8>)
 8000ace:	f000 fa8f 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000ad2:	2340      	movs	r3, #64	@ 0x40
 8000ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_GPIO_Init+0xbc>)
 8000aea:	f000 fa81 	bl	8000ff0 <HAL_GPIO_Init>

}
 8000aee:	bf00      	nop
 8000af0:	3720      	adds	r7, #32
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000
 8000afc:	48000800 	.word	0x48000800
 8000b00:	48000400 	.word	0x48000400

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b32:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <HAL_SPI_MspInit+0x7c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d128      	bne.n	8000bcc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b7a:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7e:	4a16      	ldr	r2, [pc, #88]	@ (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b86:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	4a10      	ldr	r2, [pc, #64]	@ (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_SPI_MspInit+0x80>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000baa:	23e0      	movs	r3, #224	@ 0xe0
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f000 fa12 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	@ 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40013000 	.word	0x40013000
 8000bd8:	40021000 	.word	0x40021000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c32:	f000 f8b3 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <SystemInit+0x5c>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c46:	4a14      	ldr	r2, [pc, #80]	@ (8000c98 <SystemInit+0x5c>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <SystemInit+0x60>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a11      	ldr	r2, [pc, #68]	@ (8000c9c <SystemInit+0x60>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <SystemInit+0x60>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <SystemInit+0x60>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <SystemInit+0x60>)
 8000c68:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000c6c:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000c70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c72:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <SystemInit+0x60>)
 8000c74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c78:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <SystemInit+0x60>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <SystemInit+0x60>)
 8000c80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c86:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <SystemInit+0x60>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca4:	f7ff ffca 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ca8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000caa:	e003      	b.n	8000cb4 <LoopCopyDataInit>

08000cac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cb0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cb2:	3104      	adds	r1, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cb4:	480a      	ldr	r0, [pc, #40]	@ (8000ce0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cb8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cbc:	d3f6      	bcc.n	8000cac <CopyDataInit>
	ldr	r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cc0:	e002      	b.n	8000cc8 <LoopFillZerobss>

08000cc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cc2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cc4:	f842 3b04 	str.w	r3, [r2], #4

08000cc8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <LoopForever+0x16>)
	cmp	r2, r3
 8000cca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ccc:	d3f9      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cce:	f002 f87f 	bl	8002dd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd2:	f7ff fdb1 	bl	8000838 <main>

08000cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd6:	e7fe      	b.n	8000cd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000cdc:	08002e78 	.word	0x08002e78
	ldr	r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ce4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ce8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000cec:	20000098 	.word	0x20000098

08000cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_2_IRQHandler>

08000cf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f943 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d02:	200f      	movs	r0, #15
 8000d04:	f000 f80e 	bl	8000d24 <HAL_InitTick>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	71fb      	strb	r3, [r7, #7]
 8000d12:	e001      	b.n	8000d18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d14:	f7ff fefc 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d30:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <HAL_InitTick+0x6c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d023      	beq.n	8000d80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <HAL_InitTick+0x70>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <HAL_InitTick+0x6c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f941 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10f      	bne.n	8000d7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d809      	bhi.n	8000d74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f919 	bl	8000f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <HAL_InitTick+0x74>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e007      	b.n	8000d84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	e004      	b.n	8000d84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	e001      	b.n	8000d84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000094 	.word	0x20000094

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000094 	.word	0x20000094

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	@ (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	@ (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	@ 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	@ 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f7ff ff8e 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff47 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff5c 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ff8e 	bl	8000edc <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5d 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffb0 	bl	8000f44 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffe:	e17f      	b.n	8001300 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8171 	beq.w	80012fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d00b      	beq.n	8001038 <HAL_GPIO_Init+0x48>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d007      	beq.n	8001038 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800102c:	2b11      	cmp	r3, #17
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b12      	cmp	r3, #18
 8001036:	d130      	bne.n	800109a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800106e:	2201      	movs	r2, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	091b      	lsrs	r3, r3, #4
 8001084:	f003 0201 	and.w	r2, r3, #1
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d118      	bne.n	80010d8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010ac:	2201      	movs	r2, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	08db      	lsrs	r3, r3, #3
 80010c2:	f003 0201 	and.w	r2, r3, #1
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x128>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b12      	cmp	r3, #18
 8001116:	d123      	bne.n	8001160 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	6939      	ldr	r1, [r7, #16]
 800115c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0203 	and.w	r2, r3, #3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80ac 	beq.w	80012fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001320 <HAL_GPIO_Init+0x330>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001320 <HAL_GPIO_Init+0x330>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001320 <HAL_GPIO_Init+0x330>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001324 <HAL_GPIO_Init+0x334>)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3302      	adds	r3, #2
 80011c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	220f      	movs	r2, #15
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011e4:	d025      	beq.n	8001232 <HAL_GPIO_Init+0x242>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001328 <HAL_GPIO_Init+0x338>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d01f      	beq.n	800122e <HAL_GPIO_Init+0x23e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4e      	ldr	r2, [pc, #312]	@ (800132c <HAL_GPIO_Init+0x33c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d019      	beq.n	800122a <HAL_GPIO_Init+0x23a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001330 <HAL_GPIO_Init+0x340>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0x236>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4c      	ldr	r2, [pc, #304]	@ (8001334 <HAL_GPIO_Init+0x344>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d00d      	beq.n	8001222 <HAL_GPIO_Init+0x232>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4b      	ldr	r2, [pc, #300]	@ (8001338 <HAL_GPIO_Init+0x348>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d007      	beq.n	800121e <HAL_GPIO_Init+0x22e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4a      	ldr	r2, [pc, #296]	@ (800133c <HAL_GPIO_Init+0x34c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <HAL_GPIO_Init+0x22a>
 8001216:	2306      	movs	r3, #6
 8001218:	e00c      	b.n	8001234 <HAL_GPIO_Init+0x244>
 800121a:	2307      	movs	r3, #7
 800121c:	e00a      	b.n	8001234 <HAL_GPIO_Init+0x244>
 800121e:	2305      	movs	r3, #5
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x244>
 8001222:	2304      	movs	r3, #4
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x244>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x244>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x244>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x244>
 8001232:	2300      	movs	r3, #0
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001244:	4937      	ldr	r1, [pc, #220]	@ (8001324 <HAL_GPIO_Init+0x334>)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <HAL_GPIO_Init+0x350>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001276:	4a32      	ldr	r2, [pc, #200]	@ (8001340 <HAL_GPIO_Init+0x350>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800127c:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <HAL_GPIO_Init+0x350>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a0:	4a27      	ldr	r2, [pc, #156]	@ (8001340 <HAL_GPIO_Init+0x350>)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a6:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <HAL_GPIO_Init+0x350>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001340 <HAL_GPIO_Init+0x350>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <HAL_GPIO_Init+0x350>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f4:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <HAL_GPIO_Init+0x350>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa22 f303 	lsr.w	r3, r2, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	f47f ae78 	bne.w	8001000 <HAL_GPIO_Init+0x10>
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000
 8001328:	48000400 	.word	0x48000400
 800132c:	48000800 	.word	0x48000800
 8001330:	48000c00 	.word	0x48000c00
 8001334:	48001000 	.word	0x48001000
 8001338:	48001400 	.word	0x48001400
 800133c:	48001800 	.word	0x48001800
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001360:	e002      	b.n	8001368 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <HAL_PWREx_GetVoltageRange+0x18>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40007000 	.word	0x40007000

08001390 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800139e:	d130      	bne.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013a0:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013ac:	d038      	beq.n	8001420 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ae:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013be:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2232      	movs	r2, #50	@ 0x32
 80013c4:	fb02 f303 	mul.w	r3, r2, r3
 80013c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0c9b      	lsrs	r3, r3, #18
 80013d0:	3301      	adds	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d4:	e002      	b.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3b01      	subs	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e8:	d102      	bne.n	80013f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f2      	bne.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013fc:	d110      	bne.n	8001420 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e00f      	b.n	8001422 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800140a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800140e:	d007      	beq.n	8001420 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001418:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40007000 	.word	0x40007000
 8001434:	20000000 	.word	0x20000000
 8001438:	431bde83 	.word	0x431bde83

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e3d8      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144e:	4b97      	ldr	r3, [pc, #604]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001458:	4b94      	ldr	r3, [pc, #592]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80e4 	beq.w	8001638 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_RCC_OscConfig+0x4a>
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2b0c      	cmp	r3, #12
 800147a:	f040 808b 	bne.w	8001594 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2b01      	cmp	r3, #1
 8001482:	f040 8087 	bne.w	8001594 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001486:	4b89      	ldr	r3, [pc, #548]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <HAL_RCC_OscConfig+0x62>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e3b0      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1a      	ldr	r2, [r3, #32]
 80014a2:	4b82      	ldr	r3, [pc, #520]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <HAL_RCC_OscConfig+0x7c>
 80014ae:	4b7f      	ldr	r3, [pc, #508]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014b6:	e005      	b.n	80014c4 <HAL_RCC_OscConfig+0x88>
 80014b8:	4b7c      	ldr	r3, [pc, #496]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80014ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d223      	bcs.n	8001510 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fd0b 	bl	8001ee8 <RCC_SetFlashLatencyFromMSIRange>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e391      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014dc:	4b73      	ldr	r3, [pc, #460]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a72      	ldr	r2, [pc, #456]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b70      	ldr	r3, [pc, #448]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	496d      	ldr	r1, [pc, #436]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fa:	4b6c      	ldr	r3, [pc, #432]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	4968      	ldr	r1, [pc, #416]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
 800150e:	e025      	b.n	800155c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001510:	4b66      	ldr	r3, [pc, #408]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a65      	ldr	r2, [pc, #404]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b63      	ldr	r3, [pc, #396]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4960      	ldr	r1, [pc, #384]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152e:	4b5f      	ldr	r3, [pc, #380]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	495b      	ldr	r1, [pc, #364]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fccb 	bl	8001ee8 <RCC_SetFlashLatencyFromMSIRange>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e351      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800155c:	f000 fc38 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001560:	4602      	mov	r2, r0
 8001562:	4b52      	ldr	r3, [pc, #328]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	4950      	ldr	r1, [pc, #320]	@ (80016b0 <HAL_RCC_OscConfig+0x274>)
 800156e:	5ccb      	ldrb	r3, [r1, r3]
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	fa22 f303 	lsr.w	r3, r2, r3
 8001578:	4a4e      	ldr	r2, [pc, #312]	@ (80016b4 <HAL_RCC_OscConfig+0x278>)
 800157a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800157c:	4b4e      	ldr	r3, [pc, #312]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fbcf 	bl	8000d24 <HAL_InitTick>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d052      	beq.n	8001636 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	e335      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d032      	beq.n	8001602 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800159c:	4b43      	ldr	r3, [pc, #268]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a42      	ldr	r2, [pc, #264]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fc0c 	bl	8000dc4 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b0:	f7ff fc08 	bl	8000dc4 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e31e      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c2:	4b3a      	ldr	r3, [pc, #232]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ce:	4b37      	ldr	r3, [pc, #220]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a36      	ldr	r2, [pc, #216]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b34      	ldr	r3, [pc, #208]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4931      	ldr	r1, [pc, #196]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ec:	4b2f      	ldr	r3, [pc, #188]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	492c      	ldr	r1, [pc, #176]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
 8001600:	e01a      	b.n	8001638 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001602:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a29      	ldr	r2, [pc, #164]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800160e:	f7ff fbd9 	bl	8000dc4 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001616:	f7ff fbd5 	bl	8000dc4 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e2eb      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001628:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0x1da>
 8001634:	e000      	b.n	8001638 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001636:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d074      	beq.n	800172e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2b08      	cmp	r3, #8
 8001648:	d005      	beq.n	8001656 <HAL_RCC_OscConfig+0x21a>
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b0c      	cmp	r3, #12
 800164e:	d10e      	bne.n	800166e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d10b      	bne.n	800166e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d064      	beq.n	800172c <HAL_RCC_OscConfig+0x2f0>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d160      	bne.n	800172c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e2c8      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x24a>
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0b      	ldr	r2, [pc, #44]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 800167e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	e026      	b.n	80016d4 <HAL_RCC_OscConfig+0x298>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800168e:	d115      	bne.n	80016bc <HAL_RCC_OscConfig+0x280>
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 8001696:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b03      	ldr	r3, [pc, #12]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a02      	ldr	r2, [pc, #8]	@ (80016ac <HAL_RCC_OscConfig+0x270>)
 80016a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e014      	b.n	80016d4 <HAL_RCC_OscConfig+0x298>
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	08002e30 	.word	0x08002e30
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000004 	.word	0x20000004
 80016bc:	4ba0      	ldr	r3, [pc, #640]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a9f      	ldr	r2, [pc, #636]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80016c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a9c      	ldr	r2, [pc, #624]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fb72 	bl	8000dc4 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff fb6e 	bl	8000dc4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	@ 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e284      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f6:	4b92      	ldr	r3, [pc, #584]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x2a8>
 8001702:	e014      	b.n	800172e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fb5e 	bl	8000dc4 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fb5a 	bl	8000dc4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	@ 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e270      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171e:	4b88      	ldr	r3, [pc, #544]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x2d0>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d060      	beq.n	80017fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d005      	beq.n	800174c <HAL_RCC_OscConfig+0x310>
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2b0c      	cmp	r3, #12
 8001744:	d119      	bne.n	800177a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d116      	bne.n	800177a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800174c:	4b7c      	ldr	r3, [pc, #496]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_OscConfig+0x328>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e24d      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b76      	ldr	r3, [pc, #472]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	4973      	ldr	r1, [pc, #460]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001778:	e040      	b.n	80017fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d023      	beq.n	80017ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001782:	4b6f      	ldr	r3, [pc, #444]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6e      	ldr	r2, [pc, #440]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800178c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff fb19 	bl	8000dc4 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001796:	f7ff fb15 	bl	8000dc4 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e22b      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a8:	4b65      	ldr	r3, [pc, #404]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	4b62      	ldr	r3, [pc, #392]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	061b      	lsls	r3, r3, #24
 80017c2:	495f      	ldr	r1, [pc, #380]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
 80017c8:	e018      	b.n	80017fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80017d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff faf5 	bl	8000dc4 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff faf1 	bl	8000dc4 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e207      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f0:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03c      	beq.n	8001882 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01c      	beq.n	800184a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001810:	4b4b      	ldr	r3, [pc, #300]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001816:	4a4a      	ldr	r2, [pc, #296]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fad0 	bl	8000dc4 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff facc 	bl	8000dc4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e1e2      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800183a:	4b41      	ldr	r3, [pc, #260]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 800183c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ef      	beq.n	8001828 <HAL_RCC_OscConfig+0x3ec>
 8001848:	e01b      	b.n	8001882 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184a:	4b3d      	ldr	r3, [pc, #244]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 800184c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001850:	4a3b      	ldr	r2, [pc, #236]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185a:	f7ff fab3 	bl	8000dc4 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff faaf 	bl	8000dc4 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1c5      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001874:	4b32      	ldr	r3, [pc, #200]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ef      	bne.n	8001862 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 80a6 	beq.w	80019dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001894:	4b2a      	ldr	r3, [pc, #168]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10d      	bne.n	80018bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a0:	4b27      	ldr	r3, [pc, #156]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80018a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a4:	4a26      	ldr	r2, [pc, #152]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ac:	4b24      	ldr	r3, [pc, #144]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b8:	2301      	movs	r3, #1
 80018ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018bc:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <HAL_RCC_OscConfig+0x508>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d118      	bne.n	80018fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <HAL_RCC_OscConfig+0x508>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001944 <HAL_RCC_OscConfig+0x508>)
 80018ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fa76 	bl	8000dc4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018dc:	f7ff fa72 	bl	8000dc4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e188      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <HAL_RCC_OscConfig+0x508>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d108      	bne.n	8001914 <HAL_RCC_OscConfig+0x4d8>
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001908:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001912:	e029      	b.n	8001968 <HAL_RCC_OscConfig+0x52c>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b05      	cmp	r3, #5
 800191a:	d115      	bne.n	8001948 <HAL_RCC_OscConfig+0x50c>
 800191c:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 800191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001922:	4a07      	ldr	r2, [pc, #28]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800192c:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001932:	4a03      	ldr	r2, [pc, #12]	@ (8001940 <HAL_RCC_OscConfig+0x504>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800193c:	e014      	b.n	8001968 <HAL_RCC_OscConfig+0x52c>
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	40007000 	.word	0x40007000
 8001948:	4b91      	ldr	r3, [pc, #580]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800194e:	4a90      	ldr	r2, [pc, #576]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001958:	4b8d      	ldr	r3, [pc, #564]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195e:	4a8c      	ldr	r2, [pc, #560]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d016      	beq.n	800199e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff fa28 	bl	8000dc4 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001976:	e00a      	b.n	800198e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff fa24 	bl	8000dc4 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e138      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198e:	4b80      	ldr	r3, [pc, #512]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ed      	beq.n	8001978 <HAL_RCC_OscConfig+0x53c>
 800199c:	e015      	b.n	80019ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff fa11 	bl	8000dc4 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff fa0d 	bl	8000dc4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e121      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019bc:	4b74      	ldr	r3, [pc, #464]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1ed      	bne.n	80019a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	4a6e      	ldr	r2, [pc, #440]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 80019d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019da:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 810c 	beq.w	8001bfe <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	f040 80d4 	bne.w	8001b98 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019f0:	4b67      	ldr	r3, [pc, #412]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 0203 	and.w	r2, r3, #3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d130      	bne.n	8001a66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d127      	bne.n	8001a66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d11f      	bne.n	8001a66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a30:	2a07      	cmp	r2, #7
 8001a32:	bf14      	ite	ne
 8001a34:	2201      	movne	r2, #1
 8001a36:	2200      	moveq	r2, #0
 8001a38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d113      	bne.n	8001a66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d109      	bne.n	8001a66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	085b      	lsrs	r3, r3, #1
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d06e      	beq.n	8001b44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b0c      	cmp	r3, #12
 8001a6a:	d069      	beq.n	8001b40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a6c:	4b48      	ldr	r3, [pc, #288]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a78:	4b45      	ldr	r3, [pc, #276]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0bb      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a88:	4b41      	ldr	r3, [pc, #260]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a40      	ldr	r2, [pc, #256]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001a8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a94:	f7ff f996 	bl	8000dc4 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f992 	bl	8000dc4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e0a8      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aae:	4b38      	ldr	r3, [pc, #224]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aba:	4b35      	ldr	r3, [pc, #212]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	4b35      	ldr	r3, [pc, #212]	@ (8001b94 <HAL_RCC_OscConfig+0x758>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001aca:	3a01      	subs	r2, #1
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	4311      	orrs	r1, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ad4:	0212      	lsls	r2, r2, #8
 8001ad6:	4311      	orrs	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001adc:	0852      	lsrs	r2, r2, #1
 8001ade:	3a01      	subs	r2, #1
 8001ae0:	0552      	lsls	r2, r2, #21
 8001ae2:	4311      	orrs	r1, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ae8:	0852      	lsrs	r2, r2, #1
 8001aea:	3a01      	subs	r2, #1
 8001aec:	0652      	lsls	r2, r2, #25
 8001aee:	4311      	orrs	r1, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001af4:	0912      	lsrs	r2, r2, #4
 8001af6:	0452      	lsls	r2, r2, #17
 8001af8:	430a      	orrs	r2, r1
 8001afa:	4925      	ldr	r1, [pc, #148]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b00:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a22      	ldr	r2, [pc, #136]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b0c:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a1f      	ldr	r2, [pc, #124]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b18:	f7ff f954 	bl	8000dc4 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f950 	bl	8000dc4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e066      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b3e:	e05e      	b.n	8001bfe <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e05d      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d156      	bne.n	8001bfe <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b50:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0e      	ldr	r2, [pc, #56]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b68:	f7ff f92c 	bl	8000dc4 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f928 	bl	8000dc4 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e03e      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	4b03      	ldr	r3, [pc, #12]	@ (8001b90 <HAL_RCC_OscConfig+0x754>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x734>
 8001b8e:	e036      	b.n	8001bfe <HAL_RCC_OscConfig+0x7c2>
 8001b90:	40021000 	.word	0x40021000
 8001b94:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d02d      	beq.n	8001bfa <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <HAL_RCC_OscConfig+0x7cc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a19      	ldr	r2, [pc, #100]	@ (8001c08 <HAL_RCC_OscConfig+0x7cc>)
 8001ba4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001baa:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <HAL_RCC_OscConfig+0x7cc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 5320 	and.w	r3, r3, #671088640	@ 0x28000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bb6:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <HAL_RCC_OscConfig+0x7cc>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4a13      	ldr	r2, [pc, #76]	@ (8001c08 <HAL_RCC_OscConfig+0x7cc>)
 8001bbc:	f023 0303 	bic.w	r3, r3, #3
 8001bc0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bc2:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <HAL_RCC_OscConfig+0x7cc>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	4a10      	ldr	r2, [pc, #64]	@ (8001c08 <HAL_RCC_OscConfig+0x7cc>)
 8001bc8:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8001bcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bd0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f8f7 	bl	8000dc4 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff f8f3 	bl	8000dc4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e009      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_RCC_OscConfig+0x7cc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x79e>
 8001bf8:	e001      	b.n	8001bfe <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0c8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b66      	ldr	r3, [pc, #408]	@ (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d910      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b63      	ldr	r3, [pc, #396]	@ (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 0207 	bic.w	r2, r3, #7
 8001c36:	4961      	ldr	r1, [pc, #388]	@ (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b0      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d04c      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c64:	4b56      	ldr	r3, [pc, #344]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d121      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e09e      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7c:	4b50      	ldr	r3, [pc, #320]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d115      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e092      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c94:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e086      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	4b46      	ldr	r3, [pc, #280]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e07e      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb4:	4b42      	ldr	r3, [pc, #264]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 0203 	bic.w	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	493f      	ldr	r1, [pc, #252]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc6:	f7ff f87d 	bl	8000dc4 <HAL_GetTick>
 8001cca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cce:	f7ff f879 	bl	8000dc4 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e066      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce4:	4b36      	ldr	r3, [pc, #216]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 020c 	and.w	r2, r3, #12
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d1eb      	bne.n	8001cce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d02:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	492c      	ldr	r1, [pc, #176]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d210      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0207 	bic.w	r2, r3, #7
 8001d2a:	4924      	ldr	r1, [pc, #144]	@ (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e036      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4918      	ldr	r1, [pc, #96]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4910      	ldr	r1, [pc, #64]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d82:	f000 f825 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	490c      	ldr	r1, [pc, #48]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe ffbc 	bl	8000d24 <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	72fb      	strb	r3, [r7, #11]

  return status;
 8001db0:	7afb      	ldrb	r3, [r7, #11]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08002e30 	.word	0x08002e30
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	@ 0x24
 8001dd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dde:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x34>
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d121      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d11e      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e04:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e10:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e005      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e20:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10d      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e48:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e004      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e54:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d134      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d003      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0xac>
 8001e74:	e005      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e78:	617b      	str	r3, [r7, #20]
      break;
 8001e7a:	e005      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e7e:	617b      	str	r3, [r7, #20]
      break;
 8001e80:	e002      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	617b      	str	r3, [r7, #20]
      break;
 8001e86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	fb03 f202 	mul.w	r2, r3, r2
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	0e5b      	lsrs	r3, r3, #25
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	@ 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08002e40 	.word	0x08002e40
 8001ee0:	00f42400 	.word	0x00f42400
 8001ee4:	007a1200 	.word	0x007a1200

08001ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f00:	f7ff fa38 	bl	8001374 <HAL_PWREx_GetVoltageRange>
 8001f04:	6178      	str	r0, [r7, #20]
 8001f06:	e014      	b.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	4b25      	ldr	r3, [pc, #148]	@ (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0c:	4a24      	ldr	r2, [pc, #144]	@ (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f14:	4b22      	ldr	r3, [pc, #136]	@ (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f20:	f7ff fa28 	bl	8001374 <HAL_PWREx_GetVoltageRange>
 8001f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f26:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f38:	d10b      	bne.n	8001f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b80      	cmp	r3, #128	@ 0x80
 8001f3e:	d919      	bls.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f44:	d902      	bls.n	8001f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f46:	2302      	movs	r3, #2
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	e013      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	e010      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b80      	cmp	r3, #128	@ 0x80
 8001f56:	d902      	bls.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f58:	2303      	movs	r3, #3
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	e00a      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b80      	cmp	r3, #128	@ 0x80
 8001f62:	d102      	bne.n	8001f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f64:	2302      	movs	r3, #2
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	e004      	b.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b70      	cmp	r3, #112	@ 0x70
 8001f6e:	d101      	bne.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f70:	2301      	movs	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 0207 	bic.w	r2, r3, #7
 8001f7c:	4909      	ldr	r1, [pc, #36]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f84:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40022000 	.word	0x40022000

08001fa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e095      	b.n	80020e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d108      	bne.n	8001fd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fca:	d009      	beq.n	8001fe0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
 8001fd2:	e005      	b.n	8001fe0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe fdac 	bl	8000b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002016:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002020:	d902      	bls.n	8002028 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	e002      	b.n	800202e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800202c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002036:	d007      	beq.n	8002048 <HAL_SPI_Init+0xa0>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002040:	d002      	beq.n	8002048 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208a:	ea42 0103 	orr.w	r1, r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002092:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	0c1b      	lsrs	r3, r3, #16
 80020a4:	f003 0204 	and.w	r2, r3, #4
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80020c4:	ea42 0103 	orr.w	r1, r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b088      	sub	sp, #32
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_SPI_Transmit+0x22>
 800210c:	2302      	movs	r3, #2
 800210e:	e158      	b.n	80023c2 <HAL_SPI_Transmit+0x2d4>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002118:	f7fe fe54 	bl	8000dc4 <HAL_GetTick>
 800211c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d002      	beq.n	8002134 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800212e:	2302      	movs	r3, #2
 8002130:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002132:	e13d      	b.n	80023b0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <HAL_SPI_Transmit+0x52>
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002144:	e134      	b.n	80023b0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2203      	movs	r2, #3
 800214a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	88fa      	ldrh	r2, [r7, #6]
 800215e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	88fa      	ldrh	r2, [r7, #6]
 8002164:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002190:	d10f      	bne.n	80021b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021bc:	2b40      	cmp	r3, #64	@ 0x40
 80021be:	d007      	beq.n	80021d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021d8:	d94b      	bls.n	8002272 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_SPI_Transmit+0xfa>
 80021e2:	8afb      	ldrh	r3, [r7, #22]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d13e      	bne.n	8002266 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ec:	881a      	ldrh	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f8:	1c9a      	adds	r2, r3, #2
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800220c:	e02b      	b.n	8002266 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b02      	cmp	r3, #2
 800221a:	d112      	bne.n	8002242 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002220:	881a      	ldrh	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222c:	1c9a      	adds	r2, r3, #2
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002240:	e011      	b.n	8002266 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002242:	f7fe fdbf 	bl	8000dc4 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d803      	bhi.n	800225a <HAL_SPI_Transmit+0x16c>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d102      	bne.n	8002260 <HAL_SPI_Transmit+0x172>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002264:	e0a4      	b.n	80023b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ce      	bne.n	800220e <HAL_SPI_Transmit+0x120>
 8002270:	e07c      	b.n	800236c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <HAL_SPI_Transmit+0x192>
 800227a:	8afb      	ldrh	r3, [r7, #22]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d170      	bne.n	8002362 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d912      	bls.n	80022b0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228e:	881a      	ldrh	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229a:	1c9a      	adds	r2, r3, #2
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3b02      	subs	r3, #2
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022ae:	e058      	b.n	8002362 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	330c      	adds	r3, #12
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80022d6:	e044      	b.n	8002362 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d12b      	bne.n	800233e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d912      	bls.n	8002316 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f4:	881a      	ldrh	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002300:	1c9a      	adds	r2, r3, #2
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b02      	subs	r3, #2
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002314:	e025      	b.n	8002362 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	330c      	adds	r3, #12
 8002320:	7812      	ldrb	r2, [r2, #0]
 8002322:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800233c:	e011      	b.n	8002362 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800233e:	f7fe fd41 	bl	8000dc4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d803      	bhi.n	8002356 <HAL_SPI_Transmit+0x268>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d102      	bne.n	800235c <HAL_SPI_Transmit+0x26e>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002360:	e026      	b.n	80023b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1b5      	bne.n	80022d8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	6839      	ldr	r1, [r7, #0]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fcdf 	bl	8002d34 <SPI_EndRxTxTransaction>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10a      	bne.n	80023a0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	77fb      	strb	r3, [r7, #31]
 80023ac:	e000      	b.n	80023b0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80023ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80023c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b088      	sub	sp, #32
 80023ce:	af02      	add	r7, sp, #8
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023e6:	d112      	bne.n	800240e <HAL_SPI_Receive+0x44>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10e      	bne.n	800240e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2204      	movs	r2, #4
 80023f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023f8:	88fa      	ldrh	r2, [r7, #6]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4613      	mov	r3, r2
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f910 	bl	800262a <HAL_SPI_TransmitReceive>
 800240a:	4603      	mov	r3, r0
 800240c:	e109      	b.n	8002622 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_SPI_Receive+0x52>
 8002418:	2302      	movs	r3, #2
 800241a:	e102      	b.n	8002622 <HAL_SPI_Receive+0x258>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002424:	f7fe fcce 	bl	8000dc4 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d002      	beq.n	800243c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	75fb      	strb	r3, [r7, #23]
    goto error;
 800243a:	e0e9      	b.n	8002610 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_SPI_Receive+0x7e>
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800244c:	e0e0      	b.n	8002610 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2204      	movs	r2, #4
 8002452:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	88fa      	ldrh	r2, [r7, #6]
 8002466:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	88fa      	ldrh	r2, [r7, #6]
 800246e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002498:	d908      	bls.n	80024ac <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	e007      	b.n	80024bc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80024ba:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024c4:	d10f      	bne.n	80024e6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f0:	2b40      	cmp	r3, #64	@ 0x40
 80024f2:	d007      	beq.n	8002504 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800250c:	d867      	bhi.n	80025de <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800250e:	e030      	b.n	8002572 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d117      	bne.n	800254e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f103 020c 	add.w	r2, r3, #12
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	7812      	ldrb	r2, [r2, #0]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800254c:	e011      	b.n	8002572 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800254e:	f7fe fc39 	bl	8000dc4 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d803      	bhi.n	8002566 <HAL_SPI_Receive+0x19c>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d102      	bne.n	800256c <HAL_SPI_Receive+0x1a2>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002570:	e04e      	b.n	8002610 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1c8      	bne.n	8002510 <HAL_SPI_Receive+0x146>
 800257e:	e034      	b.n	80025ea <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d115      	bne.n	80025ba <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	b292      	uxth	r2, r2
 800259a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	1c9a      	adds	r2, r3, #2
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80025b8:	e011      	b.n	80025de <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025ba:	f7fe fc03 	bl	8000dc4 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d803      	bhi.n	80025d2 <HAL_SPI_Receive+0x208>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d102      	bne.n	80025d8 <HAL_SPI_Receive+0x20e>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025dc:	e018      	b.n	8002610 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ca      	bne.n	8002580 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fb48 	bl	8002c84 <SPI_EndRxTransaction>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	75fb      	strb	r3, [r7, #23]
 800260c:	e000      	b.n	8002610 <HAL_SPI_Receive+0x246>
  }

error :
 800260e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002620:	7dfb      	ldrb	r3, [r7, #23]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b08a      	sub	sp, #40	@ 0x28
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002638:	2301      	movs	r3, #1
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_SPI_TransmitReceive+0x26>
 800264c:	2302      	movs	r3, #2
 800264e:	e1fb      	b.n	8002a48 <HAL_SPI_TransmitReceive+0x41e>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002658:	f7fe fbb4 	bl	8000dc4 <HAL_GetTick>
 800265c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002664:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800266c:	887b      	ldrh	r3, [r7, #2]
 800266e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002670:	887b      	ldrh	r3, [r7, #2]
 8002672:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002674:	7efb      	ldrb	r3, [r7, #27]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d00e      	beq.n	8002698 <HAL_SPI_TransmitReceive+0x6e>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002680:	d106      	bne.n	8002690 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <HAL_SPI_TransmitReceive+0x66>
 800268a:	7efb      	ldrb	r3, [r7, #27]
 800268c:	2b04      	cmp	r3, #4
 800268e:	d003      	beq.n	8002698 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002690:	2302      	movs	r3, #2
 8002692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002696:	e1cd      	b.n	8002a34 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_SPI_TransmitReceive+0x80>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_SPI_TransmitReceive+0x80>
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d103      	bne.n	80026b2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80026b0:	e1c0      	b.n	8002a34 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d003      	beq.n	80026c6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2205      	movs	r2, #5
 80026c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	887a      	ldrh	r2, [r7, #2]
 80026d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	887a      	ldrh	r2, [r7, #2]
 80026de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	887a      	ldrh	r2, [r7, #2]
 80026f2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002708:	d802      	bhi.n	8002710 <HAL_SPI_TransmitReceive+0xe6>
 800270a:	8a3b      	ldrh	r3, [r7, #16]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d908      	bls.n	8002722 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	e007      	b.n	8002732 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002730:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273c:	2b40      	cmp	r3, #64	@ 0x40
 800273e:	d007      	beq.n	8002750 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800274e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002758:	d97c      	bls.n	8002854 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_SPI_TransmitReceive+0x13e>
 8002762:	8a7b      	ldrh	r3, [r7, #18]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d169      	bne.n	800283c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276c:	881a      	ldrh	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002778:	1c9a      	adds	r2, r3, #2
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800278c:	e056      	b.n	800283c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b02      	cmp	r3, #2
 800279a:	d11b      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x1aa>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <HAL_SPI_TransmitReceive+0x1aa>
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d113      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027bc:	1c9a      	adds	r2, r3, #2
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d11c      	bne.n	800281c <HAL_SPI_TransmitReceive+0x1f2>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d016      	beq.n	800281c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	b292      	uxth	r2, r2
 80027fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	1c9a      	adds	r2, r3, #2
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002818:	2301      	movs	r3, #1
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800281c:	f7fe fad2 	bl	8000dc4 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002828:	429a      	cmp	r2, r3
 800282a:	d807      	bhi.n	800283c <HAL_SPI_TransmitReceive+0x212>
 800282c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d003      	beq.n	800283c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800283a:	e0fb      	b.n	8002a34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1a3      	bne.n	800278e <HAL_SPI_TransmitReceive+0x164>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d19d      	bne.n	800278e <HAL_SPI_TransmitReceive+0x164>
 8002852:	e0df      	b.n	8002a14 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_SPI_TransmitReceive+0x23a>
 800285c:	8a7b      	ldrh	r3, [r7, #18]
 800285e:	2b01      	cmp	r3, #1
 8002860:	f040 80cb 	bne.w	80029fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d912      	bls.n	8002894 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002872:	881a      	ldrh	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287e:	1c9a      	adds	r2, r3, #2
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b02      	subs	r3, #2
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002892:	e0b2      	b.n	80029fa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	7812      	ldrb	r2, [r2, #0]
 80028a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ba:	e09e      	b.n	80029fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d134      	bne.n	8002934 <HAL_SPI_TransmitReceive+0x30a>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d02f      	beq.n	8002934 <HAL_SPI_TransmitReceive+0x30a>
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d12c      	bne.n	8002934 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d912      	bls.n	800290a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e8:	881a      	ldrh	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f4:	1c9a      	adds	r2, r3, #2
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b02      	subs	r3, #2
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002908:	e012      	b.n	8002930 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	330c      	adds	r3, #12
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d148      	bne.n	80029d4 <HAL_SPI_TransmitReceive+0x3aa>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d042      	beq.n	80029d4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b01      	cmp	r3, #1
 8002958:	d923      	bls.n	80029a2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	b292      	uxth	r2, r2
 8002966:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	1c9a      	adds	r2, r3, #2
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b02      	subs	r3, #2
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d81f      	bhi.n	80029d0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	e016      	b.n	80029d0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f103 020c 	add.w	r2, r3, #12
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	7812      	ldrb	r2, [r2, #0]
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029d0:	2301      	movs	r3, #1
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029d4:	f7fe f9f6 	bl	8000dc4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d803      	bhi.n	80029ec <HAL_SPI_TransmitReceive+0x3c2>
 80029e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ea:	d102      	bne.n	80029f2 <HAL_SPI_TransmitReceive+0x3c8>
 80029ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80029f8:	e01c      	b.n	8002a34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f47f af5b 	bne.w	80028bc <HAL_SPI_TransmitReceive+0x292>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f47f af54 	bne.w	80028bc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f98b 	bl	8002d34 <SPI_EndRxTxTransaction>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d006      	beq.n	8002a32 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002a30:	e000      	b.n	8002a34 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002a32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002a44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3728      	adds	r7, #40	@ 0x28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a60:	f7fe f9b0 	bl	8000dc4 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a70:	f7fe f9a8 	bl	8000dc4 <HAL_GetTick>
 8002a74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a76:	4b39      	ldr	r3, [pc, #228]	@ (8002b5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	015b      	lsls	r3, r3, #5
 8002a7c:	0d1b      	lsrs	r3, r3, #20
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a86:	e054      	b.n	8002b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8e:	d050      	beq.n	8002b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a90:	f7fe f998 	bl	8000dc4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d902      	bls.n	8002aa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d13d      	bne.n	8002b22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002abe:	d111      	bne.n	8002ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ac8:	d004      	beq.n	8002ad4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad2:	d107      	bne.n	8002ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aec:	d10f      	bne.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e017      	b.n	8002b52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	bf0c      	ite	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	2300      	movne	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d19b      	bne.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000000 	.word	0x20000000

08002b60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b6e:	f7fe f929 	bl	8000dc4 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b7e:	f7fe f921 	bl	8000dc4 <HAL_GetTick>
 8002b82:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b84:	4b3e      	ldr	r3, [pc, #248]	@ (8002c80 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00da      	lsls	r2, r3, #3
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	0d1b      	lsrs	r3, r3, #20
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b9c:	e062      	b.n	8002c64 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ba4:	d109      	bne.n	8002bba <SPI_WaitFifoStateUntilTimeout+0x5a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d106      	bne.n	8002bba <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	330c      	adds	r3, #12
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002bb8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d050      	beq.n	8002c64 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bc2:	f7fe f8ff 	bl	8000dc4 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d902      	bls.n	8002bd8 <SPI_WaitFifoStateUntilTimeout+0x78>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d13d      	bne.n	8002c54 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002be6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bf0:	d111      	bne.n	8002c16 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bfa:	d004      	beq.n	8002c06 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c04:	d107      	bne.n	8002c16 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c1e:	d10f      	bne.n	8002c40 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e010      	b.n	8002c76 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d194      	bne.n	8002b9e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000000 	.word	0x20000000

08002c84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c98:	d111      	bne.n	8002cbe <SPI_EndRxTransaction+0x3a>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca2:	d004      	beq.n	8002cae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cac:	d107      	bne.n	8002cbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2180      	movs	r1, #128	@ 0x80
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff fec1 	bl	8002a50 <SPI_WaitFlagStateUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e023      	b.n	8002d2c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cec:	d11d      	bne.n	8002d2a <SPI_EndRxTransaction+0xa6>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cf6:	d004      	beq.n	8002d02 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d00:	d113      	bne.n	8002d2a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff ff26 	bl	8002b60 <SPI_WaitFifoStateUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d007      	beq.n	8002d2a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1e:	f043 0220 	orr.w	r2, r3, #32
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e000      	b.n	8002d2c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7ff ff07 	bl	8002b60 <SPI_WaitFifoStateUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5c:	f043 0220 	orr.w	r2, r3, #32
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e027      	b.n	8002db8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2180      	movs	r1, #128	@ 0x80
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7ff fe6c 	bl	8002a50 <SPI_WaitFlagStateUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d82:	f043 0220 	orr.w	r2, r3, #32
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e014      	b.n	8002db8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff fee0 	bl	8002b60 <SPI_WaitFifoStateUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e000      	b.n	8002db8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <memset>:
 8002dc0:	4402      	add	r2, r0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d100      	bne.n	8002dca <memset+0xa>
 8002dc8:	4770      	bx	lr
 8002dca:	f803 1b01 	strb.w	r1, [r3], #1
 8002dce:	e7f9      	b.n	8002dc4 <memset+0x4>

08002dd0 <__libc_init_array>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8002e08 <__libc_init_array+0x38>)
 8002dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8002e0c <__libc_init_array+0x3c>)
 8002dd6:	1b64      	subs	r4, r4, r5
 8002dd8:	10a4      	asrs	r4, r4, #2
 8002dda:	2600      	movs	r6, #0
 8002ddc:	42a6      	cmp	r6, r4
 8002dde:	d109      	bne.n	8002df4 <__libc_init_array+0x24>
 8002de0:	4d0b      	ldr	r5, [pc, #44]	@ (8002e10 <__libc_init_array+0x40>)
 8002de2:	4c0c      	ldr	r4, [pc, #48]	@ (8002e14 <__libc_init_array+0x44>)
 8002de4:	f000 f818 	bl	8002e18 <_init>
 8002de8:	1b64      	subs	r4, r4, r5
 8002dea:	10a4      	asrs	r4, r4, #2
 8002dec:	2600      	movs	r6, #0
 8002dee:	42a6      	cmp	r6, r4
 8002df0:	d105      	bne.n	8002dfe <__libc_init_array+0x2e>
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
 8002df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df8:	4798      	blx	r3
 8002dfa:	3601      	adds	r6, #1
 8002dfc:	e7ee      	b.n	8002ddc <__libc_init_array+0xc>
 8002dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e02:	4798      	blx	r3
 8002e04:	3601      	adds	r6, #1
 8002e06:	e7f2      	b.n	8002dee <__libc_init_array+0x1e>
 8002e08:	08002e70 	.word	0x08002e70
 8002e0c:	08002e70 	.word	0x08002e70
 8002e10:	08002e70 	.word	0x08002e70
 8002e14:	08002e74 	.word	0x08002e74

08002e18 <_init>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr

08002e24 <_fini>:
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e26:	bf00      	nop
 8002e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2a:	bc08      	pop	{r3}
 8002e2c:	469e      	mov	lr, r3
 8002e2e:	4770      	bx	lr
